/* Class > Primitive
        --- NOTE (Lapys) -> Container for all distinct, plain (or POD or primitive) data types.
        --- WARN (Lapys) ->
            - Do not utilize as an addresser or pointer.
            - Coerces rational forms to integers in arithmetic operations.
            - Must be casted to prompted type to access/ retrieve intrinsic value.
            - Type casts are handled natively and exceptions are not handled.
            - Utilize this class sparingly because memory handling is expensive.
*/
typedef struct primitive {
    // [...]
    private:
        // Initialization > (Type, Value)
        enum : unsigned char {boolean__type, char__type, char8_t__type, char16_t__type, char32_t__type, double__type, float__type, int__type, long__type, long_double__type, long_long__type, short__type, void__type, wchar_t__type} type : 8;
        void *value;

    // [...]
    public:
        // [Constructor]
        primitive(const boolean argument) : type{this -> boolean__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(boolean)); *((boolean*) this -> value) = argument; }
        primitive(const char argument) : type{this -> char__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(char)); *((char*) this -> value) = argument; }
        primitive(const char8_t argument) : type{this -> char8_t__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(char8_t)); *((char8_t*) this -> value) = argument; }
        primitive(const char16_t argument) : type{this -> char16_t__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(char16_t)); *((char16_t*) this -> value) = argument; }
        primitive(const char32_t argument) : type{this -> char32_t__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(char32_t)); *((char32_t*) this -> value) = argument; }
        primitive(const double argument) : type{this -> double__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(double)); *((double*) this -> value) = argument; }
        primitive(const float argument) : type{this -> float__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(float)); *((float*) this -> value) = argument; }
        primitive(const int argument) : type{this -> int__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(int)); *((int*) this -> value) = argument; }
        primitive(const long argument) : type{this -> long__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(long)); *((long*) this -> value) = argument; }
        primitive(const long double argument) : type{this -> long_double__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(long double)); *((long double*) this -> value) = argument; }
        primitive(const long long argument) : type{this -> long_long__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(long long)); *((long long*) this -> value) = argument; }
        primitive(const short argument) : type{this -> short__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(short)); *((short*) this -> value) = argument; }
        primitive(const signed char argument) : type{this -> char__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(signed char)); *((signed char*) this -> value) = argument; }
        primitive(const unsigned char argument) : type{this -> char__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(unsigned char)); *((unsigned char*) this -> value) = argument; }
        primitive(const unsigned int argument) : type{this -> int__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(unsigned int)); *((unsigned int*) this -> value) = argument; }
        primitive(const unsigned long argument) : type{this -> long__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(unsigned long)); *((unsigned long*) this -> value) = argument; }
        primitive(const unsigned long long argument) : type{this -> long_long__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(unsigned long long)); *((unsigned long long*) this -> value) = argument; }
        primitive(const unsigned short argument) : type{this -> short__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(unsigned short)); *((unsigned short*) this -> value) = argument; }
        primitive(void) : type{}, value{null} {}
        primitive(void* argument) : type{this -> void__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(void*)); *((void**) this -> value) = argument; }
        primitive(const void* argument) : type{this -> void__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(const void*)); *((const void**) this -> value) = argument; }
        primitive(const wchar_t argument) : type{this -> wchar_t__type} { this -> value = pointerAllocateMemory(this -> value, sizeof(wchar_t)); *((wchar_t*) this -> value) = argument; }

        inline primitive(primitive& argument) : type{argument.type}, value{argument.value} { switch (this -> type = argument.type) { case this -> boolean__type: this -> value = pointerAllocateMemory(this -> value, sizeof(boolean)); *((boolean*) this -> value) = *((boolean*) argument.value); break; case this -> char__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char)); *((char*) this -> value) = *((char*) argument.value); break; case this -> char8_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char8_t)); *((char8_t*) this -> value) = *((char8_t*) argument.value); break; case this -> char16_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char16_t)); *((char16_t*) this -> value) = *((char16_t*) argument.value); break; case this -> char32_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char32_t)); *((char32_t*) this -> value) = *((char32_t*) argument.value); break; case this -> double__type: this -> value = pointerAllocateMemory(this -> value, sizeof(double)); *((double*) this -> value) = *((double*) argument.value); break; case this -> float__type: this -> value = pointerAllocateMemory(this -> value, sizeof(float)); *((float*) this -> value) = *((float*) argument.value); break; case this -> int__type: this -> value = pointerAllocateMemory(this -> value, sizeof(int)); *((int*) this -> value) = *((int*) argument.value); break; case this -> long__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long)); *((long*) this -> value) = *((long*) argument.value); break; case this -> long_double__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long double)); *((long double*) this -> value) = *((long double*) argument.value); break; case this -> long_long__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long long)); *((long long*) this -> value) = *((long long*) argument.value); break; case this -> short__type: this -> value = pointerAllocateMemory(this -> value, sizeof(short)); *((short*) this -> value) = *((short*) argument.value); break; case this -> void__type: this -> value = pointerAllocateMemory(this -> value, sizeof(void*)); *((void**) this -> value) = *((void**) argument.value); break; case this -> wchar_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(wchar_t)); *((wchar_t*) this -> value) = *((wchar_t*) argument.value); break; } }
        inline primitive(primitive&& argument) { switch (this -> type = argument.type) { case this -> boolean__type: this -> value = pointerAllocateMemory(this -> value, sizeof(boolean)); *((boolean*) this -> value) = *((boolean*) argument.value); break; case this -> char__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char)); *((char*) this -> value) = *((char*) argument.value); break; case this -> char8_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char8_t)); *((char8_t*) this -> value) = *((char8_t*) argument.value); break; case this -> char16_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char16_t)); *((char16_t*) this -> value) = *((char16_t*) argument.value); break; case this -> char32_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char32_t)); *((char32_t*) this -> value) = *((char32_t*) argument.value); break; case this -> double__type: this -> value = pointerAllocateMemory(this -> value, sizeof(double)); *((double*) this -> value) = *((double*) argument.value); break; case this -> float__type: this -> value = pointerAllocateMemory(this -> value, sizeof(float)); *((float*) this -> value) = *((float*) argument.value); break; case this -> int__type: this -> value = pointerAllocateMemory(this -> value, sizeof(int)); *((int*) this -> value) = *((int*) argument.value); break; case this -> long__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long)); *((long*) this -> value) = *((long*) argument.value); break; case this -> long_double__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long double)); *((long double*) this -> value) = *((long double*) argument.value); break; case this -> long_long__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long long)); *((long long*) this -> value) = *((long long*) argument.value); break; case this -> short__type: this -> value = pointerAllocateMemory(this -> value, sizeof(short)); *((short*) this -> value) = *((short*) argument.value); break; case this -> void__type: this -> value = pointerAllocateMemory(this -> value, sizeof(void*)); *((void**) this -> value) = *((void**) argument.value); break; case this -> wchar_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(wchar_t)); *((wchar_t*) this -> value) = *((wchar_t*) argument.value); break; } }
        inline primitive(const primitive& argument) { switch (this -> type = argument.type) { case this -> boolean__type: this -> value = pointerAllocateMemory(this -> value, sizeof(boolean)); *((boolean*) this -> value) = *((boolean*) argument.value); break; case this -> char__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char)); *((char*) this -> value) = *((char*) argument.value); break; case this -> char8_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char8_t)); *((char8_t*) this -> value) = *((char8_t*) argument.value); break; case this -> char16_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char16_t)); *((char16_t*) this -> value) = *((char16_t*) argument.value); break; case this -> char32_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char32_t)); *((char32_t*) this -> value) = *((char32_t*) argument.value); break; case this -> double__type: this -> value = pointerAllocateMemory(this -> value, sizeof(double)); *((double*) this -> value) = *((double*) argument.value); break; case this -> float__type: this -> value = pointerAllocateMemory(this -> value, sizeof(float)); *((float*) this -> value) = *((float*) argument.value); break; case this -> int__type: this -> value = pointerAllocateMemory(this -> value, sizeof(int)); *((int*) this -> value) = *((int*) argument.value); break; case this -> long__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long)); *((long*) this -> value) = *((long*) argument.value); break; case this -> long_double__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long double)); *((long double*) this -> value) = *((long double*) argument.value); break; case this -> long_long__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long long)); *((long long*) this -> value) = *((long long*) argument.value); break; case this -> short__type: this -> value = pointerAllocateMemory(this -> value, sizeof(short)); *((short*) this -> value) = *((short*) argument.value); break; case this -> void__type: this -> value = pointerAllocateMemory(this -> value, sizeof(void*)); *((void**) this -> value) = *((void**) argument.value); break; case this -> wchar_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(wchar_t)); *((wchar_t*) this -> value) = *((wchar_t*) argument.value); break; } }
        inline primitive(const primitive&& argument) { switch (this -> type = argument.type) { case this -> boolean__type: this -> value = pointerAllocateMemory(this -> value, sizeof(boolean)); *((boolean*) this -> value) = *((boolean*) argument.value); break; case this -> char__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char)); *((char*) this -> value) = *((char*) argument.value); break; case this -> char8_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char8_t)); *((char8_t*) this -> value) = *((char8_t*) argument.value); break; case this -> char16_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char16_t)); *((char16_t*) this -> value) = *((char16_t*) argument.value); break; case this -> char32_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char32_t)); *((char32_t*) this -> value) = *((char32_t*) argument.value); break; case this -> double__type: this -> value = pointerAllocateMemory(this -> value, sizeof(double)); *((double*) this -> value) = *((double*) argument.value); break; case this -> float__type: this -> value = pointerAllocateMemory(this -> value, sizeof(float)); *((float*) this -> value) = *((float*) argument.value); break; case this -> int__type: this -> value = pointerAllocateMemory(this -> value, sizeof(int)); *((int*) this -> value) = *((int*) argument.value); break; case this -> long__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long)); *((long*) this -> value) = *((long*) argument.value); break; case this -> long_double__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long double)); *((long double*) this -> value) = *((long double*) argument.value); break; case this -> long_long__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long long)); *((long long*) this -> value) = *((long long*) argument.value); break; case this -> short__type: this -> value = pointerAllocateMemory(this -> value, sizeof(short)); *((short*) this -> value) = *((short*) argument.value); break; case this -> void__type: this -> value = pointerAllocateMemory(this -> value, sizeof(void*)); *((void**) this -> value) = *((void**) argument.value); break; case this -> wchar_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(wchar_t)); *((wchar_t*) this -> value) = *((wchar_t*) argument.value); break; } }

        ~primitive(void) { this -> value = pointerFreeMemory(this -> value); }

        // [Operator]
            // [+]
            inline primitive operator +() const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value); case this -> char__type: return *((char*) this -> value); case this -> char8_t__type: return *((char8_t*) this -> value); case this -> char16_t__type: return *((char16_t*) this -> value); case this -> char32_t__type: return *((char32_t*) this -> value); case this -> double__type: return *((double*) this -> value); case this -> float__type: return *((float*) this -> value); case this -> int__type: return *((int*) this -> value); case this -> long__type: return *((long*) this -> value); case this -> long_double__type: return *((long double*) this -> value); case this -> long_long__type: return *((long long*) this -> value); case this -> short__type: return *((short*) this -> value); case this -> void__type: return *((void**) this -> value); case this -> wchar_t__type: return *((wchar_t*) this -> value); } return *this; }

            inline primitive operator +(const boolean argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) + argument; case this -> char__type: return *((char*) this -> value) + argument; case this -> char8_t__type: return *((char8_t*) this -> value) + argument; case this -> char16_t__type: return *((char16_t*) this -> value) + argument; case this -> char32_t__type: return *((char32_t*) this -> value) + argument; case this -> double__type: return *((double*) this -> value) + argument; case this -> float__type: return *((float*) this -> value) + argument; case this -> int__type: return *((int*) this -> value) + argument; case this -> long__type: return *((long*) this -> value) + argument; case this -> long_double__type: return *((long double*) this -> value) + argument; case this -> long_long__type: return *((long long*) this -> value) + argument; case this -> short__type: return *((short*) this -> value) + argument; case this -> void__type: return ((int) *((void**) this -> value)) + argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) + argument; } return *((boolean*) this -> value) + argument; }
            friend inline primitive operator +(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((boolean*) argumentB.value); }
            friend inline primitive operator +(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((boolean*) argumentB.value); }
            friend inline primitive operator +(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((boolean*) argumentB.value); }
            friend inline primitive operator +(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((boolean*) argumentB.value); }

            inline primitive operator +(const char8_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) + argument; case this -> char__type: return *((char*) this -> value) + argument; case this -> char8_t__type: return *((char8_t*) this -> value) + argument; case this -> char16_t__type: return *((char16_t*) this -> value) + argument; case this -> char32_t__type: return *((char32_t*) this -> value) + argument; case this -> double__type: return *((double*) this -> value) + argument; case this -> float__type: return *((float*) this -> value) + argument; case this -> int__type: return *((int*) this -> value) + argument; case this -> long__type: return *((long*) this -> value) + argument; case this -> long_double__type: return *((long double*) this -> value) + argument; case this -> long_long__type: return *((long long*) this -> value) + argument; case this -> short__type: return *((short*) this -> value) + argument; case this -> void__type: return ((int) *((void**) this -> value)) + argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) + argument; } return *((char8_t*) this -> value) + argument; }
            friend inline primitive operator +(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((char8_t*) argumentB.value); }
            friend inline primitive operator +(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((char8_t*) argumentB.value); }
            friend inline primitive operator +(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((char8_t*) argumentB.value); }
            friend inline primitive operator +(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((char8_t*) argumentB.value); }

            inline primitive operator +(const char16_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) + argument; case this -> char__type: return *((char*) this -> value) + argument; case this -> char8_t__type: return *((char8_t*) this -> value) + argument; case this -> char16_t__type: return *((char16_t*) this -> value) + argument; case this -> char32_t__type: return *((char32_t*) this -> value) + argument; case this -> double__type: return *((double*) this -> value) + argument; case this -> float__type: return *((float*) this -> value) + argument; case this -> int__type: return *((int*) this -> value) + argument; case this -> long__type: return *((long*) this -> value) + argument; case this -> long_double__type: return *((long double*) this -> value) + argument; case this -> long_long__type: return *((long long*) this -> value) + argument; case this -> short__type: return *((short*) this -> value) + argument; case this -> void__type: return ((int) *((void**) this -> value)) + argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) + argument; } return *((char16_t*) this -> value) + argument; }
            friend inline primitive operator +(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((char16_t*) argumentB.value); }
            friend inline primitive operator +(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((char16_t*) argumentB.value); }
            friend inline primitive operator +(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((char16_t*) argumentB.value); }
            friend inline primitive operator +(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((char16_t*) argumentB.value); }

            inline primitive operator +(const char32_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) + argument; case this -> char__type: return *((char*) this -> value) + argument; case this -> char8_t__type: return *((char8_t*) this -> value) + argument; case this -> char16_t__type: return *((char16_t*) this -> value) + argument; case this -> char32_t__type: return *((char32_t*) this -> value) + argument; case this -> double__type: return *((double*) this -> value) + argument; case this -> float__type: return *((float*) this -> value) + argument; case this -> int__type: return *((int*) this -> value) + argument; case this -> long__type: return *((long*) this -> value) + argument; case this -> long_double__type: return *((long double*) this -> value) + argument; case this -> long_long__type: return *((long long*) this -> value) + argument; case this -> short__type: return *((short*) this -> value) + argument; case this -> void__type: return ((int) *((void**) this -> value)) + argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) + argument; } return *((char32_t*) this -> value) + argument; }
            friend inline primitive operator +(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((char32_t*) argumentB.value); }
            friend inline primitive operator +(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((char32_t*) argumentB.value); }
            friend inline primitive operator +(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((char32_t*) argumentB.value); }
            friend inline primitive operator +(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((char32_t*) argumentB.value); }

            inline primitive operator +(const double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) + argument; case this -> char__type: return *((char*) this -> value) + argument; case this -> char8_t__type: return *((char8_t*) this -> value) + argument; case this -> char16_t__type: return *((char16_t*) this -> value) + argument; case this -> char32_t__type: return *((char32_t*) this -> value) + argument; case this -> double__type: return *((double*) this -> value) + argument; case this -> float__type: return *((float*) this -> value) + argument; case this -> int__type: return *((int*) this -> value) + argument; case this -> long__type: return *((long*) this -> value) + argument; case this -> long_double__type: return *((long double*) this -> value) + argument; case this -> long_long__type: return *((long long*) this -> value) + argument; case this -> short__type: return *((short*) this -> value) + argument; case this -> void__type: return ((int) *((void**) this -> value)) + argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) + argument; } return *((double*) this -> value) + argument; }
            friend inline primitive operator +(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((double*) argumentB.value); }
            friend inline primitive operator +(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((double*) argumentB.value); }
            friend inline primitive operator +(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((double*) argumentB.value); }
            friend inline primitive operator +(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((double*) argumentB.value); }

            inline primitive operator +(const float argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) + argument; case this -> char__type: return *((char*) this -> value) + argument; case this -> char8_t__type: return *((char8_t*) this -> value) + argument; case this -> char16_t__type: return *((char16_t*) this -> value) + argument; case this -> char32_t__type: return *((char32_t*) this -> value) + argument; case this -> double__type: return *((double*) this -> value) + argument; case this -> float__type: return *((float*) this -> value) + argument; case this -> int__type: return *((int*) this -> value) + argument; case this -> long__type: return *((long*) this -> value) + argument; case this -> long_double__type: return *((long double*) this -> value) + argument; case this -> long_long__type: return *((long long*) this -> value) + argument; case this -> short__type: return *((short*) this -> value) + argument; case this -> void__type: return ((int) *((void**) this -> value)) + argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) + argument; } return *((float*) this -> value) + argument; }
            friend inline primitive operator +(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((float*) argumentB.value); }
            friend inline primitive operator +(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((float*) argumentB.value); }
            friend inline primitive operator +(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((float*) argumentB.value); }
            friend inline primitive operator +(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((float*) argumentB.value); }

            inline primitive operator +(const int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) + argument; case this -> char__type: return *((char*) this -> value) + argument; case this -> char8_t__type: return *((char8_t*) this -> value) + argument; case this -> char16_t__type: return *((char16_t*) this -> value) + argument; case this -> char32_t__type: return *((char32_t*) this -> value) + argument; case this -> double__type: return *((double*) this -> value) + argument; case this -> float__type: return *((float*) this -> value) + argument; case this -> int__type: return *((int*) this -> value) + argument; case this -> long__type: return *((long*) this -> value) + argument; case this -> long_double__type: return *((long double*) this -> value) + argument; case this -> long_long__type: return *((long long*) this -> value) + argument; case this -> short__type: return *((short*) this -> value) + argument; case this -> void__type: return ((int) *((void**) this -> value)) + argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) + argument; } return *((int*) this -> value) + argument; }
            friend inline primitive operator +(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((int*) argumentB.value); }
            friend inline primitive operator +(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((int*) argumentB.value); }
            friend inline primitive operator +(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((int*) argumentB.value); }
            friend inline primitive operator +(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((int*) argumentB.value); }

            inline primitive operator +(const long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) + argument; case this -> char__type: return *((char*) this -> value) + argument; case this -> char8_t__type: return *((char8_t*) this -> value) + argument; case this -> char16_t__type: return *((char16_t*) this -> value) + argument; case this -> char32_t__type: return *((char32_t*) this -> value) + argument; case this -> double__type: return *((double*) this -> value) + argument; case this -> float__type: return *((float*) this -> value) + argument; case this -> int__type: return *((int*) this -> value) + argument; case this -> long__type: return *((long*) this -> value) + argument; case this -> long_double__type: return *((long double*) this -> value) + argument; case this -> long_long__type: return *((long long*) this -> value) + argument; case this -> short__type: return *((short*) this -> value) + argument; case this -> void__type: return ((int) *((void**) this -> value)) + argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) + argument; } return *((long*) this -> value) + argument; }
            friend inline primitive operator +(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((long*) argumentB.value); }
            friend inline primitive operator +(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((long*) argumentB.value); }
            friend inline primitive operator +(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((long*) argumentB.value); }
            friend inline primitive operator +(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((long*) argumentB.value); }

            inline primitive operator +(const long double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) + argument; case this -> char__type: return *((char*) this -> value) + argument; case this -> char8_t__type: return *((char8_t*) this -> value) + argument; case this -> char16_t__type: return *((char16_t*) this -> value) + argument; case this -> char32_t__type: return *((char32_t*) this -> value) + argument; case this -> double__type: return *((double*) this -> value) + argument; case this -> float__type: return *((float*) this -> value) + argument; case this -> int__type: return *((int*) this -> value) + argument; case this -> long__type: return *((long*) this -> value) + argument; case this -> long_double__type: return *((long double*) this -> value) + argument; case this -> long_long__type: return *((long long*) this -> value) + argument; case this -> short__type: return *((short*) this -> value) + argument; case this -> void__type: return ((int) *((void**) this -> value)) + argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) + argument; } return *((long double*) this -> value) + argument; }
            friend inline primitive operator +(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((long double*) argumentB.value); }
            friend inline primitive operator +(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((long double*) argumentB.value); }
            friend inline primitive operator +(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((long double*) argumentB.value); }
            friend inline primitive operator +(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((long double*) argumentB.value); }

            inline primitive operator +(const long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) + argument; case this -> char__type: return *((char*) this -> value) + argument; case this -> char8_t__type: return *((char8_t*) this -> value) + argument; case this -> char16_t__type: return *((char16_t*) this -> value) + argument; case this -> char32_t__type: return *((char32_t*) this -> value) + argument; case this -> double__type: return *((double*) this -> value) + argument; case this -> float__type: return *((float*) this -> value) + argument; case this -> int__type: return *((int*) this -> value) + argument; case this -> long__type: return *((long*) this -> value) + argument; case this -> long_double__type: return *((long double*) this -> value) + argument; case this -> long_long__type: return *((long long*) this -> value) + argument; case this -> short__type: return *((short*) this -> value) + argument; case this -> void__type: return ((int) *((void**) this -> value)) + argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) + argument; } return *((long long*) this -> value) + argument; }
            friend inline primitive operator +(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((long long*) argumentB.value); }
            friend inline primitive operator +(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((long long*) argumentB.value); }
            friend inline primitive operator +(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((long long*) argumentB.value); }
            friend inline primitive operator +(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((long long*) argumentB.value); }

            inline primitive operator +(const short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) + argument; case this -> char__type: return *((char*) this -> value) + argument; case this -> char8_t__type: return *((char8_t*) this -> value) + argument; case this -> char16_t__type: return *((char16_t*) this -> value) + argument; case this -> char32_t__type: return *((char32_t*) this -> value) + argument; case this -> double__type: return *((double*) this -> value) + argument; case this -> float__type: return *((float*) this -> value) + argument; case this -> int__type: return *((int*) this -> value) + argument; case this -> long__type: return *((long*) this -> value) + argument; case this -> long_double__type: return *((long double*) this -> value) + argument; case this -> long_long__type: return *((long long*) this -> value) + argument; case this -> short__type: return *((short*) this -> value) + argument; case this -> void__type: return ((int) *((void**) this -> value)) + argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) + argument; } return *((short*) this -> value) + argument; }
            friend inline primitive operator +(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((short*) argumentB.value); }
            friend inline primitive operator +(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((short*) argumentB.value); }
            friend inline primitive operator +(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((short*) argumentB.value); }
            friend inline primitive operator +(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((short*) argumentB.value); }

            inline primitive operator +(const signed char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) + argument; case this -> char__type: return *((char*) this -> value) + argument; case this -> char8_t__type: return *((char8_t*) this -> value) + argument; case this -> char16_t__type: return *((char16_t*) this -> value) + argument; case this -> char32_t__type: return *((char32_t*) this -> value) + argument; case this -> double__type: return *((double*) this -> value) + argument; case this -> float__type: return *((float*) this -> value) + argument; case this -> int__type: return *((int*) this -> value) + argument; case this -> long__type: return *((long*) this -> value) + argument; case this -> long_double__type: return *((long double*) this -> value) + argument; case this -> long_long__type: return *((long long*) this -> value) + argument; case this -> short__type: return *((short*) this -> value) + argument; case this -> void__type: return ((int) *((void**) this -> value)) + argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) + argument; } return *((signed char*) this -> value) + argument; }
            friend inline primitive operator +(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((signed char*) argumentB.value); }
            friend inline primitive operator +(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((signed char*) argumentB.value); }
            friend inline primitive operator +(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((signed char*) argumentB.value); }
            friend inline primitive operator +(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((signed char*) argumentB.value); }

            inline primitive operator +(const unsigned char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) + argument; case this -> char__type: return *((char*) this -> value) + argument; case this -> char8_t__type: return *((char8_t*) this -> value) + argument; case this -> char16_t__type: return *((char16_t*) this -> value) + argument; case this -> char32_t__type: return *((char32_t*) this -> value) + argument; case this -> double__type: return *((double*) this -> value) + argument; case this -> float__type: return *((float*) this -> value) + argument; case this -> int__type: return *((int*) this -> value) + argument; case this -> long__type: return *((long*) this -> value) + argument; case this -> long_double__type: return *((long double*) this -> value) + argument; case this -> long_long__type: return *((long long*) this -> value) + argument; case this -> short__type: return *((short*) this -> value) + argument; case this -> void__type: return ((int) *((void**) this -> value)) + argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) + argument; } return *((unsigned char*) this -> value) + argument; }
            friend inline primitive operator +(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((unsigned char*) argumentB.value); }
            friend inline primitive operator +(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((unsigned char*) argumentB.value); }
            friend inline primitive operator +(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((unsigned char*) argumentB.value); }
            friend inline primitive operator +(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((unsigned char*) argumentB.value); }

            inline primitive operator +(const unsigned int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) + argument; case this -> char__type: return *((char*) this -> value) + argument; case this -> char8_t__type: return *((char8_t*) this -> value) + argument; case this -> char16_t__type: return *((char16_t*) this -> value) + argument; case this -> char32_t__type: return *((char32_t*) this -> value) + argument; case this -> double__type: return *((double*) this -> value) + argument; case this -> float__type: return *((float*) this -> value) + argument; case this -> int__type: return *((int*) this -> value) + argument; case this -> long__type: return *((long*) this -> value) + argument; case this -> long_double__type: return *((long double*) this -> value) + argument; case this -> long_long__type: return *((long long*) this -> value) + argument; case this -> short__type: return *((short*) this -> value) + argument; case this -> void__type: return ((int) *((void**) this -> value)) + argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) + argument; } return *((unsigned int*) this -> value) + argument; }
            friend inline primitive operator +(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((unsigned int*) argumentB.value); }
            friend inline primitive operator +(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((unsigned int*) argumentB.value); }
            friend inline primitive operator +(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((unsigned int*) argumentB.value); }
            friend inline primitive operator +(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((unsigned int*) argumentB.value); }

            inline primitive operator +(const unsigned long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) + argument; case this -> char__type: return *((char*) this -> value) + argument; case this -> char8_t__type: return *((char8_t*) this -> value) + argument; case this -> char16_t__type: return *((char16_t*) this -> value) + argument; case this -> char32_t__type: return *((char32_t*) this -> value) + argument; case this -> double__type: return *((double*) this -> value) + argument; case this -> float__type: return *((float*) this -> value) + argument; case this -> int__type: return *((int*) this -> value) + argument; case this -> long__type: return *((long*) this -> value) + argument; case this -> long_double__type: return *((long double*) this -> value) + argument; case this -> long_long__type: return *((long long*) this -> value) + argument; case this -> short__type: return *((short*) this -> value) + argument; case this -> void__type: return ((int) *((void**) this -> value)) + argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) + argument; } return *((unsigned long*) this -> value) + argument; }
            friend inline primitive operator +(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((unsigned long*) argumentB.value); }
            friend inline primitive operator +(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((unsigned long*) argumentB.value); }
            friend inline primitive operator +(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((unsigned long*) argumentB.value); }
            friend inline primitive operator +(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((unsigned long*) argumentB.value); }

            inline primitive operator +(const unsigned long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) + argument; case this -> char__type: return *((char*) this -> value) + argument; case this -> char8_t__type: return *((char8_t*) this -> value) + argument; case this -> char16_t__type: return *((char16_t*) this -> value) + argument; case this -> char32_t__type: return *((char32_t*) this -> value) + argument; case this -> double__type: return *((double*) this -> value) + argument; case this -> float__type: return *((float*) this -> value) + argument; case this -> int__type: return *((int*) this -> value) + argument; case this -> long__type: return *((long*) this -> value) + argument; case this -> long_double__type: return *((long double*) this -> value) + argument; case this -> long_long__type: return *((long long*) this -> value) + argument; case this -> short__type: return *((short*) this -> value) + argument; case this -> void__type: return ((int) *((void**) this -> value)) + argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) + argument; } return *((unsigned long long*) this -> value) + argument; }
            friend inline primitive operator +(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((unsigned long long*) argumentB.value); }
            friend inline primitive operator +(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((unsigned long long*) argumentB.value); }
            friend inline primitive operator +(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((unsigned long long*) argumentB.value); }
            friend inline primitive operator +(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((unsigned long long*) argumentB.value); }

            inline primitive operator +(const unsigned short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) + argument; case this -> char__type: return *((char*) this -> value) + argument; case this -> char8_t__type: return *((char8_t*) this -> value) + argument; case this -> char16_t__type: return *((char16_t*) this -> value) + argument; case this -> char32_t__type: return *((char32_t*) this -> value) + argument; case this -> double__type: return *((double*) this -> value) + argument; case this -> float__type: return *((float*) this -> value) + argument; case this -> int__type: return *((int*) this -> value) + argument; case this -> long__type: return *((long*) this -> value) + argument; case this -> long_double__type: return *((long double*) this -> value) + argument; case this -> long_long__type: return *((long long*) this -> value) + argument; case this -> short__type: return *((short*) this -> value) + argument; case this -> void__type: return ((int) *((void**) this -> value)) + argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) + argument; } return *((unsigned short*) this -> value) + argument; }
            friend inline primitive operator +(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((unsigned short*) argumentB.value); }
            friend inline primitive operator +(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((unsigned short*) argumentB.value); }
            friend inline primitive operator +(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((unsigned short*) argumentB.value); }
            friend inline primitive operator +(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((unsigned short*) argumentB.value); }

            inline primitive operator +(void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) + (int) argument; case this -> char__type: return *((char*) this -> value) + (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) + (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) + (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) + (int) argument; case this -> double__type: return *((double*) this -> value) + (int) argument; case this -> float__type: return *((float*) this -> value) + (int) argument; case this -> int__type: return *((int*) this -> value) + (int) argument; case this -> long__type: return *((long*) this -> value) + (int) argument; case this -> long_double__type: return *((long double*) this -> value) + (int) argument; case this -> long_long__type: return *((long long*) this -> value) + (int) argument; case this -> short__type: return *((short*) this -> value) + (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) + (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) + (int) argument; } return *((int*) this -> value) + (int) argument; }
            friend inline primitive operator +(void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) + *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) + *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) + *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) + *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) + *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) + *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) + *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) + *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) + *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) + *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) + ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) + *((wchar_t*) argumentB.value); } return ((int) argumentA) + *((int*) argumentB.value); }
            friend inline primitive operator +(void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) + *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) + *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) + *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) + *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) + *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) + *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) + *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) + *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) + *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) + *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) + ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) + *((wchar_t*) argumentB.value); } return ((int) argumentA) + *((int*) argumentB.value); }
            friend inline primitive operator +(void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) + *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) + *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) + *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) + *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) + *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) + *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) + *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) + *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) + *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) + *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) + ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) + *((wchar_t*) argumentB.value); } return ((int) argumentA) + *((int*) argumentB.value); }
            friend inline primitive operator +(void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) + *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) + *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) + *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) + *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) + *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) + *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) + *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) + *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) + *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) + *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) + ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) + *((wchar_t*) argumentB.value); } return ((int) argumentA) + *((int*) argumentB.value); }

            inline primitive operator +(const void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) + (int) argument; case this -> char__type: return *((char*) this -> value) + (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) + (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) + (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) + (int) argument; case this -> double__type: return *((double*) this -> value) + (int) argument; case this -> float__type: return *((float*) this -> value) + (int) argument; case this -> int__type: return *((int*) this -> value) + (int) argument; case this -> long__type: return *((long*) this -> value) + (int) argument; case this -> long_double__type: return *((long double*) this -> value) + (int) argument; case this -> long_long__type: return *((long long*) this -> value) + (int) argument; case this -> short__type: return *((short*) this -> value) + (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) + (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) + (int) argument; } return *((int*) this -> value) + (int) argument; }
            friend inline primitive operator +(const void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) + *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) + *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) + *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) + *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) + *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) + *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) + *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) + *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) + *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) + *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) + ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) + *((wchar_t*) argumentB.value); } return ((int) argumentA) + *((int*) argumentB.value); }
            friend inline primitive operator +(const void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) + *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) + *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) + *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) + *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) + *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) + *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) + *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) + *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) + *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) + *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) + ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) + *((wchar_t*) argumentB.value); } return ((int) argumentA) + *((int*) argumentB.value); }
            friend inline primitive operator +(const void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) + *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) + *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) + *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) + *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) + *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) + *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) + *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) + *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) + *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) + *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) + ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) + *((wchar_t*) argumentB.value); } return ((int) argumentA) + *((int*) argumentB.value); }
            friend inline primitive operator +(const void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) + *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) + *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) + *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) + *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) + *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) + *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) + *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) + *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) + *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) + *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) + ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) + *((wchar_t*) argumentB.value); } return ((int) argumentA) + *((int*) argumentB.value); }

            inline primitive operator +(const wchar_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) + argument; case this -> char__type: return *((char*) this -> value) + argument; case this -> char8_t__type: return *((char8_t*) this -> value) + argument; case this -> char16_t__type: return *((char16_t*) this -> value) + argument; case this -> char32_t__type: return *((char32_t*) this -> value) + argument; case this -> double__type: return *((double*) this -> value) + argument; case this -> float__type: return *((float*) this -> value) + argument; case this -> int__type: return *((int*) this -> value) + argument; case this -> long__type: return *((long*) this -> value) + argument; case this -> long_double__type: return *((long double*) this -> value) + argument; case this -> long_long__type: return *((long long*) this -> value) + argument; case this -> short__type: return *((short*) this -> value) + argument; case this -> void__type: return ((int) *((void**) this -> value)) + argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) + argument; } return *((wchar_t*) this -> value) + argument; }
            friend inline primitive operator +(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((wchar_t*) argumentB.value); }
            friend inline primitive operator +(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((wchar_t*) argumentB.value); }
            friend inline primitive operator +(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((wchar_t*) argumentB.value); }
            friend inline primitive operator +(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA + *((boolean*) argumentB.value); case argumentB.char__type: return argumentA + *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA + *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA + *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA + *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA + *((double*) argumentB.value); case argumentB.float__type: return argumentA + *((float*) argumentB.value); case argumentB.int__type: return argumentA + *((int*) argumentB.value); case argumentB.long__type: return argumentA + *((long*) argumentB.value); case argumentB.long_double__type: return argumentA + *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA + *((long long*) argumentB.value); case argumentB.short__type: return argumentA + *((short*) argumentB.value); case argumentB.void__type: return argumentA + (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA + *((wchar_t*) argumentB.value); } return argumentA + *((wchar_t*) argumentB.value); }

            // [-]
            inline primitive operator -() const { switch (this -> type) { case this -> boolean__type: return -*((boolean*) this -> value); case this -> char__type: return -*((char*) this -> value); case this -> char8_t__type: return -*((char8_t*) this -> value); case this -> char16_t__type: return -*((char16_t*) this -> value); case this -> char32_t__type: return -*((char32_t*) this -> value); case this -> double__type: return -*((double*) this -> value); case this -> float__type: return -*((float*) this -> value); case this -> int__type: return -*((int*) this -> value); case this -> long__type: return -*((long*) this -> value); case this -> long_double__type: return -*((long double*) this -> value); case this -> long_long__type: return -*((long long*) this -> value); case this -> short__type: return -*((short*) this -> value); case this -> void__type: return *((void**) this -> value); case this -> wchar_t__type: return -*((wchar_t*) this -> value); } return *this; }

            inline primitive operator -(const boolean argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) - argument; case this -> char__type: return *((char*) this -> value) - argument; case this -> char8_t__type: return *((char8_t*) this -> value) - argument; case this -> char16_t__type: return *((char16_t*) this -> value) - argument; case this -> char32_t__type: return *((char32_t*) this -> value) - argument; case this -> double__type: return *((double*) this -> value) - argument; case this -> float__type: return *((float*) this -> value) - argument; case this -> int__type: return *((int*) this -> value) - argument; case this -> long__type: return *((long*) this -> value) - argument; case this -> long_double__type: return *((long double*) this -> value) - argument; case this -> long_long__type: return *((long long*) this -> value) - argument; case this -> short__type: return *((short*) this -> value) - argument; case this -> void__type: return ((int) *((void**) this -> value)) - argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) - argument; } return *((boolean*) this -> value) - argument; }
            friend inline primitive operator -(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((boolean*) argumentB.value); }
            friend inline primitive operator -(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((boolean*) argumentB.value); }
            friend inline primitive operator -(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((boolean*) argumentB.value); }
            friend inline primitive operator -(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((boolean*) argumentB.value); }

            inline primitive operator -(const char8_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) - argument; case this -> char__type: return *((char*) this -> value) - argument; case this -> char8_t__type: return *((char8_t*) this -> value) - argument; case this -> char16_t__type: return *((char16_t*) this -> value) - argument; case this -> char32_t__type: return *((char32_t*) this -> value) - argument; case this -> double__type: return *((double*) this -> value) - argument; case this -> float__type: return *((float*) this -> value) - argument; case this -> int__type: return *((int*) this -> value) - argument; case this -> long__type: return *((long*) this -> value) - argument; case this -> long_double__type: return *((long double*) this -> value) - argument; case this -> long_long__type: return *((long long*) this -> value) - argument; case this -> short__type: return *((short*) this -> value) - argument; case this -> void__type: return ((int) *((void**) this -> value)) - argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) - argument; } return *((char8_t*) this -> value) - argument; }
            friend inline primitive operator -(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((char8_t*) argumentB.value); }
            friend inline primitive operator -(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((char8_t*) argumentB.value); }
            friend inline primitive operator -(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((char8_t*) argumentB.value); }
            friend inline primitive operator -(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((char8_t*) argumentB.value); }

            inline primitive operator -(const char16_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) - argument; case this -> char__type: return *((char*) this -> value) - argument; case this -> char8_t__type: return *((char8_t*) this -> value) - argument; case this -> char16_t__type: return *((char16_t*) this -> value) - argument; case this -> char32_t__type: return *((char32_t*) this -> value) - argument; case this -> double__type: return *((double*) this -> value) - argument; case this -> float__type: return *((float*) this -> value) - argument; case this -> int__type: return *((int*) this -> value) - argument; case this -> long__type: return *((long*) this -> value) - argument; case this -> long_double__type: return *((long double*) this -> value) - argument; case this -> long_long__type: return *((long long*) this -> value) - argument; case this -> short__type: return *((short*) this -> value) - argument; case this -> void__type: return ((int) *((void**) this -> value)) - argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) - argument; } return *((char16_t*) this -> value) - argument; }
            friend inline primitive operator -(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((char16_t*) argumentB.value); }
            friend inline primitive operator -(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((char16_t*) argumentB.value); }
            friend inline primitive operator -(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((char16_t*) argumentB.value); }
            friend inline primitive operator -(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((char16_t*) argumentB.value); }

            inline primitive operator -(const char32_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) - argument; case this -> char__type: return *((char*) this -> value) - argument; case this -> char8_t__type: return *((char8_t*) this -> value) - argument; case this -> char16_t__type: return *((char16_t*) this -> value) - argument; case this -> char32_t__type: return *((char32_t*) this -> value) - argument; case this -> double__type: return *((double*) this -> value) - argument; case this -> float__type: return *((float*) this -> value) - argument; case this -> int__type: return *((int*) this -> value) - argument; case this -> long__type: return *((long*) this -> value) - argument; case this -> long_double__type: return *((long double*) this -> value) - argument; case this -> long_long__type: return *((long long*) this -> value) - argument; case this -> short__type: return *((short*) this -> value) - argument; case this -> void__type: return ((int) *((void**) this -> value)) - argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) - argument; } return *((char32_t*) this -> value) - argument; }
            friend inline primitive operator -(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((char32_t*) argumentB.value); }
            friend inline primitive operator -(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((char32_t*) argumentB.value); }
            friend inline primitive operator -(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((char32_t*) argumentB.value); }
            friend inline primitive operator -(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((char32_t*) argumentB.value); }

            inline primitive operator -(const double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) - argument; case this -> char__type: return *((char*) this -> value) - argument; case this -> char8_t__type: return *((char8_t*) this -> value) - argument; case this -> char16_t__type: return *((char16_t*) this -> value) - argument; case this -> char32_t__type: return *((char32_t*) this -> value) - argument; case this -> double__type: return *((double*) this -> value) - argument; case this -> float__type: return *((float*) this -> value) - argument; case this -> int__type: return *((int*) this -> value) - argument; case this -> long__type: return *((long*) this -> value) - argument; case this -> long_double__type: return *((long double*) this -> value) - argument; case this -> long_long__type: return *((long long*) this -> value) - argument; case this -> short__type: return *((short*) this -> value) - argument; case this -> void__type: return ((int) *((void**) this -> value)) - argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) - argument; } return *((double*) this -> value) - argument; }
            friend inline primitive operator -(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((double*) argumentB.value); }
            friend inline primitive operator -(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((double*) argumentB.value); }
            friend inline primitive operator -(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((double*) argumentB.value); }
            friend inline primitive operator -(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((double*) argumentB.value); }

            inline primitive operator -(const float argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) - argument; case this -> char__type: return *((char*) this -> value) - argument; case this -> char8_t__type: return *((char8_t*) this -> value) - argument; case this -> char16_t__type: return *((char16_t*) this -> value) - argument; case this -> char32_t__type: return *((char32_t*) this -> value) - argument; case this -> double__type: return *((double*) this -> value) - argument; case this -> float__type: return *((float*) this -> value) - argument; case this -> int__type: return *((int*) this -> value) - argument; case this -> long__type: return *((long*) this -> value) - argument; case this -> long_double__type: return *((long double*) this -> value) - argument; case this -> long_long__type: return *((long long*) this -> value) - argument; case this -> short__type: return *((short*) this -> value) - argument; case this -> void__type: return ((int) *((void**) this -> value)) - argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) - argument; } return *((float*) this -> value) - argument; }
            friend inline primitive operator -(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((float*) argumentB.value); }
            friend inline primitive operator -(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((float*) argumentB.value); }
            friend inline primitive operator -(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((float*) argumentB.value); }
            friend inline primitive operator -(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((float*) argumentB.value); }

            inline primitive operator -(const int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) - argument; case this -> char__type: return *((char*) this -> value) - argument; case this -> char8_t__type: return *((char8_t*) this -> value) - argument; case this -> char16_t__type: return *((char16_t*) this -> value) - argument; case this -> char32_t__type: return *((char32_t*) this -> value) - argument; case this -> double__type: return *((double*) this -> value) - argument; case this -> float__type: return *((float*) this -> value) - argument; case this -> int__type: return *((int*) this -> value) - argument; case this -> long__type: return *((long*) this -> value) - argument; case this -> long_double__type: return *((long double*) this -> value) - argument; case this -> long_long__type: return *((long long*) this -> value) - argument; case this -> short__type: return *((short*) this -> value) - argument; case this -> void__type: return ((int) *((void**) this -> value)) - argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) - argument; } return *((int*) this -> value) - argument; }
            friend inline primitive operator -(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((int*) argumentB.value); }
            friend inline primitive operator -(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((int*) argumentB.value); }
            friend inline primitive operator -(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((int*) argumentB.value); }
            friend inline primitive operator -(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((int*) argumentB.value); }

            inline primitive operator -(const long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) - argument; case this -> char__type: return *((char*) this -> value) - argument; case this -> char8_t__type: return *((char8_t*) this -> value) - argument; case this -> char16_t__type: return *((char16_t*) this -> value) - argument; case this -> char32_t__type: return *((char32_t*) this -> value) - argument; case this -> double__type: return *((double*) this -> value) - argument; case this -> float__type: return *((float*) this -> value) - argument; case this -> int__type: return *((int*) this -> value) - argument; case this -> long__type: return *((long*) this -> value) - argument; case this -> long_double__type: return *((long double*) this -> value) - argument; case this -> long_long__type: return *((long long*) this -> value) - argument; case this -> short__type: return *((short*) this -> value) - argument; case this -> void__type: return ((int) *((void**) this -> value)) - argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) - argument; } return *((long*) this -> value) - argument; }
            friend inline primitive operator -(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((long*) argumentB.value); }
            friend inline primitive operator -(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((long*) argumentB.value); }
            friend inline primitive operator -(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((long*) argumentB.value); }
            friend inline primitive operator -(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((long*) argumentB.value); }

            inline primitive operator -(const long double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) - argument; case this -> char__type: return *((char*) this -> value) - argument; case this -> char8_t__type: return *((char8_t*) this -> value) - argument; case this -> char16_t__type: return *((char16_t*) this -> value) - argument; case this -> char32_t__type: return *((char32_t*) this -> value) - argument; case this -> double__type: return *((double*) this -> value) - argument; case this -> float__type: return *((float*) this -> value) - argument; case this -> int__type: return *((int*) this -> value) - argument; case this -> long__type: return *((long*) this -> value) - argument; case this -> long_double__type: return *((long double*) this -> value) - argument; case this -> long_long__type: return *((long long*) this -> value) - argument; case this -> short__type: return *((short*) this -> value) - argument; case this -> void__type: return ((int) *((void**) this -> value)) - argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) - argument; } return *((long double*) this -> value) - argument; }
            friend inline primitive operator -(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((long double*) argumentB.value); }
            friend inline primitive operator -(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((long double*) argumentB.value); }
            friend inline primitive operator -(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((long double*) argumentB.value); }
            friend inline primitive operator -(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((long double*) argumentB.value); }

            inline primitive operator -(const long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) - argument; case this -> char__type: return *((char*) this -> value) - argument; case this -> char8_t__type: return *((char8_t*) this -> value) - argument; case this -> char16_t__type: return *((char16_t*) this -> value) - argument; case this -> char32_t__type: return *((char32_t*) this -> value) - argument; case this -> double__type: return *((double*) this -> value) - argument; case this -> float__type: return *((float*) this -> value) - argument; case this -> int__type: return *((int*) this -> value) - argument; case this -> long__type: return *((long*) this -> value) - argument; case this -> long_double__type: return *((long double*) this -> value) - argument; case this -> long_long__type: return *((long long*) this -> value) - argument; case this -> short__type: return *((short*) this -> value) - argument; case this -> void__type: return ((int) *((void**) this -> value)) - argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) - argument; } return *((long long*) this -> value) - argument; }
            friend inline primitive operator -(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((long long*) argumentB.value); }
            friend inline primitive operator -(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((long long*) argumentB.value); }
            friend inline primitive operator -(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((long long*) argumentB.value); }
            friend inline primitive operator -(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((long long*) argumentB.value); }

            inline primitive operator -(const short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) - argument; case this -> char__type: return *((char*) this -> value) - argument; case this -> char8_t__type: return *((char8_t*) this -> value) - argument; case this -> char16_t__type: return *((char16_t*) this -> value) - argument; case this -> char32_t__type: return *((char32_t*) this -> value) - argument; case this -> double__type: return *((double*) this -> value) - argument; case this -> float__type: return *((float*) this -> value) - argument; case this -> int__type: return *((int*) this -> value) - argument; case this -> long__type: return *((long*) this -> value) - argument; case this -> long_double__type: return *((long double*) this -> value) - argument; case this -> long_long__type: return *((long long*) this -> value) - argument; case this -> short__type: return *((short*) this -> value) - argument; case this -> void__type: return ((int) *((void**) this -> value)) - argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) - argument; } return *((short*) this -> value) - argument; }
            friend inline primitive operator -(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((short*) argumentB.value); }
            friend inline primitive operator -(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((short*) argumentB.value); }
            friend inline primitive operator -(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((short*) argumentB.value); }
            friend inline primitive operator -(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((short*) argumentB.value); }

            inline primitive operator -(const signed char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) - argument; case this -> char__type: return *((char*) this -> value) - argument; case this -> char8_t__type: return *((char8_t*) this -> value) - argument; case this -> char16_t__type: return *((char16_t*) this -> value) - argument; case this -> char32_t__type: return *((char32_t*) this -> value) - argument; case this -> double__type: return *((double*) this -> value) - argument; case this -> float__type: return *((float*) this -> value) - argument; case this -> int__type: return *((int*) this -> value) - argument; case this -> long__type: return *((long*) this -> value) - argument; case this -> long_double__type: return *((long double*) this -> value) - argument; case this -> long_long__type: return *((long long*) this -> value) - argument; case this -> short__type: return *((short*) this -> value) - argument; case this -> void__type: return ((int) *((void**) this -> value)) - argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) - argument; } return *((signed char*) this -> value) - argument; }
            friend inline primitive operator -(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((signed char*) argumentB.value); }
            friend inline primitive operator -(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((signed char*) argumentB.value); }
            friend inline primitive operator -(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((signed char*) argumentB.value); }
            friend inline primitive operator -(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((signed char*) argumentB.value); }

            inline primitive operator -(const unsigned char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) - argument; case this -> char__type: return *((char*) this -> value) - argument; case this -> char8_t__type: return *((char8_t*) this -> value) - argument; case this -> char16_t__type: return *((char16_t*) this -> value) - argument; case this -> char32_t__type: return *((char32_t*) this -> value) - argument; case this -> double__type: return *((double*) this -> value) - argument; case this -> float__type: return *((float*) this -> value) - argument; case this -> int__type: return *((int*) this -> value) - argument; case this -> long__type: return *((long*) this -> value) - argument; case this -> long_double__type: return *((long double*) this -> value) - argument; case this -> long_long__type: return *((long long*) this -> value) - argument; case this -> short__type: return *((short*) this -> value) - argument; case this -> void__type: return ((int) *((void**) this -> value)) - argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) - argument; } return *((unsigned char*) this -> value) - argument; }
            friend inline primitive operator -(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((unsigned char*) argumentB.value); }
            friend inline primitive operator -(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((unsigned char*) argumentB.value); }
            friend inline primitive operator -(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((unsigned char*) argumentB.value); }
            friend inline primitive operator -(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((unsigned char*) argumentB.value); }

            inline primitive operator -(const unsigned int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) - argument; case this -> char__type: return *((char*) this -> value) - argument; case this -> char8_t__type: return *((char8_t*) this -> value) - argument; case this -> char16_t__type: return *((char16_t*) this -> value) - argument; case this -> char32_t__type: return *((char32_t*) this -> value) - argument; case this -> double__type: return *((double*) this -> value) - argument; case this -> float__type: return *((float*) this -> value) - argument; case this -> int__type: return *((int*) this -> value) - argument; case this -> long__type: return *((long*) this -> value) - argument; case this -> long_double__type: return *((long double*) this -> value) - argument; case this -> long_long__type: return *((long long*) this -> value) - argument; case this -> short__type: return *((short*) this -> value) - argument; case this -> void__type: return ((int) *((void**) this -> value)) - argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) - argument; } return *((unsigned int*) this -> value) - argument; }
            friend inline primitive operator -(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((unsigned int*) argumentB.value); }
            friend inline primitive operator -(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((unsigned int*) argumentB.value); }
            friend inline primitive operator -(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((unsigned int*) argumentB.value); }
            friend inline primitive operator -(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((unsigned int*) argumentB.value); }

            inline primitive operator -(const unsigned long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) - argument; case this -> char__type: return *((char*) this -> value) - argument; case this -> char8_t__type: return *((char8_t*) this -> value) - argument; case this -> char16_t__type: return *((char16_t*) this -> value) - argument; case this -> char32_t__type: return *((char32_t*) this -> value) - argument; case this -> double__type: return *((double*) this -> value) - argument; case this -> float__type: return *((float*) this -> value) - argument; case this -> int__type: return *((int*) this -> value) - argument; case this -> long__type: return *((long*) this -> value) - argument; case this -> long_double__type: return *((long double*) this -> value) - argument; case this -> long_long__type: return *((long long*) this -> value) - argument; case this -> short__type: return *((short*) this -> value) - argument; case this -> void__type: return ((int) *((void**) this -> value)) - argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) - argument; } return *((unsigned long*) this -> value) - argument; }
            friend inline primitive operator -(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((unsigned long*) argumentB.value); }
            friend inline primitive operator -(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((unsigned long*) argumentB.value); }
            friend inline primitive operator -(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((unsigned long*) argumentB.value); }
            friend inline primitive operator -(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((unsigned long*) argumentB.value); }

            inline primitive operator -(const unsigned long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) - argument; case this -> char__type: return *((char*) this -> value) - argument; case this -> char8_t__type: return *((char8_t*) this -> value) - argument; case this -> char16_t__type: return *((char16_t*) this -> value) - argument; case this -> char32_t__type: return *((char32_t*) this -> value) - argument; case this -> double__type: return *((double*) this -> value) - argument; case this -> float__type: return *((float*) this -> value) - argument; case this -> int__type: return *((int*) this -> value) - argument; case this -> long__type: return *((long*) this -> value) - argument; case this -> long_double__type: return *((long double*) this -> value) - argument; case this -> long_long__type: return *((long long*) this -> value) - argument; case this -> short__type: return *((short*) this -> value) - argument; case this -> void__type: return ((int) *((void**) this -> value)) - argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) - argument; } return *((unsigned long long*) this -> value) - argument; }
            friend inline primitive operator -(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((unsigned long long*) argumentB.value); }
            friend inline primitive operator -(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((unsigned long long*) argumentB.value); }
            friend inline primitive operator -(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((unsigned long long*) argumentB.value); }
            friend inline primitive operator -(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((unsigned long long*) argumentB.value); }

            inline primitive operator -(const unsigned short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) - argument; case this -> char__type: return *((char*) this -> value) - argument; case this -> char8_t__type: return *((char8_t*) this -> value) - argument; case this -> char16_t__type: return *((char16_t*) this -> value) - argument; case this -> char32_t__type: return *((char32_t*) this -> value) - argument; case this -> double__type: return *((double*) this -> value) - argument; case this -> float__type: return *((float*) this -> value) - argument; case this -> int__type: return *((int*) this -> value) - argument; case this -> long__type: return *((long*) this -> value) - argument; case this -> long_double__type: return *((long double*) this -> value) - argument; case this -> long_long__type: return *((long long*) this -> value) - argument; case this -> short__type: return *((short*) this -> value) - argument; case this -> void__type: return ((int) *((void**) this -> value)) - argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) - argument; } return *((unsigned short*) this -> value) - argument; }
            friend inline primitive operator -(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((unsigned short*) argumentB.value); }
            friend inline primitive operator -(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((unsigned short*) argumentB.value); }
            friend inline primitive operator -(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((unsigned short*) argumentB.value); }
            friend inline primitive operator -(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((unsigned short*) argumentB.value); }

            inline primitive operator -(void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) - (int) argument; case this -> char__type: return *((char*) this -> value) - (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) - (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) - (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) - (int) argument; case this -> double__type: return *((double*) this -> value) - (int) argument; case this -> float__type: return *((float*) this -> value) - (int) argument; case this -> int__type: return *((int*) this -> value) - (int) argument; case this -> long__type: return *((long*) this -> value) - (int) argument; case this -> long_double__type: return *((long double*) this -> value) - (int) argument; case this -> long_long__type: return *((long long*) this -> value) - (int) argument; case this -> short__type: return *((short*) this -> value) - (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) - (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) - (int) argument; } return *((int*) this -> value) - (int) argument; }
            friend inline primitive operator -(void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) - *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) - *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) - *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) - *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) - *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) - *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) - *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) - *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) - *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) - *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) - ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) - *((wchar_t*) argumentB.value); } return ((int) argumentA) - *((int*) argumentB.value); }
            friend inline primitive operator -(void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) - *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) - *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) - *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) - *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) - *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) - *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) - *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) - *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) - *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) - *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) - ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) - *((wchar_t*) argumentB.value); } return ((int) argumentA) - *((int*) argumentB.value); }
            friend inline primitive operator -(void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) - *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) - *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) - *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) - *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) - *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) - *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) - *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) - *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) - *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) - *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) - ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) - *((wchar_t*) argumentB.value); } return ((int) argumentA) - *((int*) argumentB.value); }
            friend inline primitive operator -(void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) - *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) - *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) - *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) - *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) - *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) - *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) - *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) - *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) - *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) - *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) - ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) - *((wchar_t*) argumentB.value); } return ((int) argumentA) - *((int*) argumentB.value); }

            inline primitive operator -(const void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) - (int) argument; case this -> char__type: return *((char*) this -> value) - (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) - (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) - (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) - (int) argument; case this -> double__type: return *((double*) this -> value) - (int) argument; case this -> float__type: return *((float*) this -> value) - (int) argument; case this -> int__type: return *((int*) this -> value) - (int) argument; case this -> long__type: return *((long*) this -> value) - (int) argument; case this -> long_double__type: return *((long double*) this -> value) - (int) argument; case this -> long_long__type: return *((long long*) this -> value) - (int) argument; case this -> short__type: return *((short*) this -> value) - (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) - (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) - (int) argument; } return *((int*) this -> value) - (int) argument; }
            friend inline primitive operator -(const void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) - *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) - *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) - *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) - *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) - *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) - *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) - *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) - *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) - *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) - *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) - ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) - *((wchar_t*) argumentB.value); } return ((int) argumentA) - *((int*) argumentB.value); }
            friend inline primitive operator -(const void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) - *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) - *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) - *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) - *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) - *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) - *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) - *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) - *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) - *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) - *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) - ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) - *((wchar_t*) argumentB.value); } return ((int) argumentA) - *((int*) argumentB.value); }
            friend inline primitive operator -(const void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) - *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) - *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) - *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) - *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) - *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) - *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) - *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) - *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) - *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) - *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) - ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) - *((wchar_t*) argumentB.value); } return ((int) argumentA) - *((int*) argumentB.value); }
            friend inline primitive operator -(const void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) - *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) - *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) - *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) - *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) - *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) - *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) - *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) - *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) - *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) - *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) - ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) - *((wchar_t*) argumentB.value); } return ((int) argumentA) - *((int*) argumentB.value); }

            inline primitive operator -(const wchar_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) - argument; case this -> char__type: return *((char*) this -> value) - argument; case this -> char8_t__type: return *((char8_t*) this -> value) - argument; case this -> char16_t__type: return *((char16_t*) this -> value) - argument; case this -> char32_t__type: return *((char32_t*) this -> value) - argument; case this -> double__type: return *((double*) this -> value) - argument; case this -> float__type: return *((float*) this -> value) - argument; case this -> int__type: return *((int*) this -> value) - argument; case this -> long__type: return *((long*) this -> value) - argument; case this -> long_double__type: return *((long double*) this -> value) - argument; case this -> long_long__type: return *((long long*) this -> value) - argument; case this -> short__type: return *((short*) this -> value) - argument; case this -> void__type: return ((int) *((void**) this -> value)) - argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) - argument; } return *((wchar_t*) this -> value) - argument; }
            friend inline primitive operator -(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((wchar_t*) argumentB.value); }
            friend inline primitive operator -(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((wchar_t*) argumentB.value); }
            friend inline primitive operator -(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((wchar_t*) argumentB.value); }
            friend inline primitive operator -(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA - *((boolean*) argumentB.value); case argumentB.char__type: return argumentA - *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA - *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA - *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA - *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA - *((double*) argumentB.value); case argumentB.float__type: return argumentA - *((float*) argumentB.value); case argumentB.int__type: return argumentA - *((int*) argumentB.value); case argumentB.long__type: return argumentA - *((long*) argumentB.value); case argumentB.long_double__type: return argumentA - *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA - *((long long*) argumentB.value); case argumentB.short__type: return argumentA - *((short*) argumentB.value); case argumentB.void__type: return argumentA - (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA - *((wchar_t*) argumentB.value); } return argumentA - *((wchar_t*) argumentB.value); }

            // [*]
            inline primitive operator *(const boolean argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) * argument; case this -> char__type: return *((char*) this -> value) * argument; case this -> char8_t__type: return *((char8_t*) this -> value) * argument; case this -> char16_t__type: return *((char16_t*) this -> value) * argument; case this -> char32_t__type: return *((char32_t*) this -> value) * argument; case this -> double__type: return *((double*) this -> value) * argument; case this -> float__type: return *((float*) this -> value) * argument; case this -> int__type: return *((int*) this -> value) * argument; case this -> long__type: return *((long*) this -> value) * argument; case this -> long_double__type: return *((long double*) this -> value) * argument; case this -> long_long__type: return *((long long*) this -> value) * argument; case this -> short__type: return *((short*) this -> value) * argument; case this -> void__type: return ((int) *((void**) this -> value)) * argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) * argument; } return *((boolean*) this -> value) * argument; }
            friend inline primitive operator *(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((boolean*) argumentB.value); }
            friend inline primitive operator *(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((boolean*) argumentB.value); }
            friend inline primitive operator *(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((boolean*) argumentB.value); }
            friend inline primitive operator *(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((boolean*) argumentB.value); }

            inline primitive operator *(const char8_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) * argument; case this -> char__type: return *((char*) this -> value) * argument; case this -> char8_t__type: return *((char8_t*) this -> value) * argument; case this -> char16_t__type: return *((char16_t*) this -> value) * argument; case this -> char32_t__type: return *((char32_t*) this -> value) * argument; case this -> double__type: return *((double*) this -> value) * argument; case this -> float__type: return *((float*) this -> value) * argument; case this -> int__type: return *((int*) this -> value) * argument; case this -> long__type: return *((long*) this -> value) * argument; case this -> long_double__type: return *((long double*) this -> value) * argument; case this -> long_long__type: return *((long long*) this -> value) * argument; case this -> short__type: return *((short*) this -> value) * argument; case this -> void__type: return ((int) *((void**) this -> value)) * argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) * argument; } return *((char8_t*) this -> value) * argument; }
            friend inline primitive operator *(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((char8_t*) argumentB.value); }
            friend inline primitive operator *(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((char8_t*) argumentB.value); }
            friend inline primitive operator *(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((char8_t*) argumentB.value); }
            friend inline primitive operator *(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((char8_t*) argumentB.value); }

            inline primitive operator *(const char16_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) * argument; case this -> char__type: return *((char*) this -> value) * argument; case this -> char8_t__type: return *((char8_t*) this -> value) * argument; case this -> char16_t__type: return *((char16_t*) this -> value) * argument; case this -> char32_t__type: return *((char32_t*) this -> value) * argument; case this -> double__type: return *((double*) this -> value) * argument; case this -> float__type: return *((float*) this -> value) * argument; case this -> int__type: return *((int*) this -> value) * argument; case this -> long__type: return *((long*) this -> value) * argument; case this -> long_double__type: return *((long double*) this -> value) * argument; case this -> long_long__type: return *((long long*) this -> value) * argument; case this -> short__type: return *((short*) this -> value) * argument; case this -> void__type: return ((int) *((void**) this -> value)) * argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) * argument; } return *((char16_t*) this -> value) * argument; }
            friend inline primitive operator *(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((char16_t*) argumentB.value); }
            friend inline primitive operator *(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((char16_t*) argumentB.value); }
            friend inline primitive operator *(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((char16_t*) argumentB.value); }
            friend inline primitive operator *(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((char16_t*) argumentB.value); }

            inline primitive operator *(const char32_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) * argument; case this -> char__type: return *((char*) this -> value) * argument; case this -> char8_t__type: return *((char8_t*) this -> value) * argument; case this -> char16_t__type: return *((char16_t*) this -> value) * argument; case this -> char32_t__type: return *((char32_t*) this -> value) * argument; case this -> double__type: return *((double*) this -> value) * argument; case this -> float__type: return *((float*) this -> value) * argument; case this -> int__type: return *((int*) this -> value) * argument; case this -> long__type: return *((long*) this -> value) * argument; case this -> long_double__type: return *((long double*) this -> value) * argument; case this -> long_long__type: return *((long long*) this -> value) * argument; case this -> short__type: return *((short*) this -> value) * argument; case this -> void__type: return ((int) *((void**) this -> value)) * argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) * argument; } return *((char32_t*) this -> value) * argument; }
            friend inline primitive operator *(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((char32_t*) argumentB.value); }
            friend inline primitive operator *(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((char32_t*) argumentB.value); }
            friend inline primitive operator *(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((char32_t*) argumentB.value); }
            friend inline primitive operator *(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((char32_t*) argumentB.value); }

            inline primitive operator *(const double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) * argument; case this -> char__type: return *((char*) this -> value) * argument; case this -> char8_t__type: return *((char8_t*) this -> value) * argument; case this -> char16_t__type: return *((char16_t*) this -> value) * argument; case this -> char32_t__type: return *((char32_t*) this -> value) * argument; case this -> double__type: return *((double*) this -> value) * argument; case this -> float__type: return *((float*) this -> value) * argument; case this -> int__type: return *((int*) this -> value) * argument; case this -> long__type: return *((long*) this -> value) * argument; case this -> long_double__type: return *((long double*) this -> value) * argument; case this -> long_long__type: return *((long long*) this -> value) * argument; case this -> short__type: return *((short*) this -> value) * argument; case this -> void__type: return ((int) *((void**) this -> value)) * argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) * argument; } return *((double*) this -> value) * argument; }
            friend inline primitive operator *(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((double*) argumentB.value); }
            friend inline primitive operator *(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((double*) argumentB.value); }
            friend inline primitive operator *(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((double*) argumentB.value); }
            friend inline primitive operator *(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((double*) argumentB.value); }

            inline primitive operator *(const float argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) * argument; case this -> char__type: return *((char*) this -> value) * argument; case this -> char8_t__type: return *((char8_t*) this -> value) * argument; case this -> char16_t__type: return *((char16_t*) this -> value) * argument; case this -> char32_t__type: return *((char32_t*) this -> value) * argument; case this -> double__type: return *((double*) this -> value) * argument; case this -> float__type: return *((float*) this -> value) * argument; case this -> int__type: return *((int*) this -> value) * argument; case this -> long__type: return *((long*) this -> value) * argument; case this -> long_double__type: return *((long double*) this -> value) * argument; case this -> long_long__type: return *((long long*) this -> value) * argument; case this -> short__type: return *((short*) this -> value) * argument; case this -> void__type: return ((int) *((void**) this -> value)) * argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) * argument; } return *((float*) this -> value) * argument; }
            friend inline primitive operator *(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((float*) argumentB.value); }
            friend inline primitive operator *(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((float*) argumentB.value); }
            friend inline primitive operator *(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((float*) argumentB.value); }
            friend inline primitive operator *(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((float*) argumentB.value); }

            inline primitive operator *(const int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) * argument; case this -> char__type: return *((char*) this -> value) * argument; case this -> char8_t__type: return *((char8_t*) this -> value) * argument; case this -> char16_t__type: return *((char16_t*) this -> value) * argument; case this -> char32_t__type: return *((char32_t*) this -> value) * argument; case this -> double__type: return *((double*) this -> value) * argument; case this -> float__type: return *((float*) this -> value) * argument; case this -> int__type: return *((int*) this -> value) * argument; case this -> long__type: return *((long*) this -> value) * argument; case this -> long_double__type: return *((long double*) this -> value) * argument; case this -> long_long__type: return *((long long*) this -> value) * argument; case this -> short__type: return *((short*) this -> value) * argument; case this -> void__type: return ((int) *((void**) this -> value)) * argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) * argument; } return *((int*) this -> value) * argument; }
            friend inline primitive operator *(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((int*) argumentB.value); }
            friend inline primitive operator *(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((int*) argumentB.value); }
            friend inline primitive operator *(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((int*) argumentB.value); }
            friend inline primitive operator *(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((int*) argumentB.value); }

            inline primitive operator *(const long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) * argument; case this -> char__type: return *((char*) this -> value) * argument; case this -> char8_t__type: return *((char8_t*) this -> value) * argument; case this -> char16_t__type: return *((char16_t*) this -> value) * argument; case this -> char32_t__type: return *((char32_t*) this -> value) * argument; case this -> double__type: return *((double*) this -> value) * argument; case this -> float__type: return *((float*) this -> value) * argument; case this -> int__type: return *((int*) this -> value) * argument; case this -> long__type: return *((long*) this -> value) * argument; case this -> long_double__type: return *((long double*) this -> value) * argument; case this -> long_long__type: return *((long long*) this -> value) * argument; case this -> short__type: return *((short*) this -> value) * argument; case this -> void__type: return ((int) *((void**) this -> value)) * argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) * argument; } return *((long*) this -> value) * argument; }
            friend inline primitive operator *(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((long*) argumentB.value); }
            friend inline primitive operator *(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((long*) argumentB.value); }
            friend inline primitive operator *(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((long*) argumentB.value); }
            friend inline primitive operator *(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((long*) argumentB.value); }

            inline primitive operator *(const long double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) * argument; case this -> char__type: return *((char*) this -> value) * argument; case this -> char8_t__type: return *((char8_t*) this -> value) * argument; case this -> char16_t__type: return *((char16_t*) this -> value) * argument; case this -> char32_t__type: return *((char32_t*) this -> value) * argument; case this -> double__type: return *((double*) this -> value) * argument; case this -> float__type: return *((float*) this -> value) * argument; case this -> int__type: return *((int*) this -> value) * argument; case this -> long__type: return *((long*) this -> value) * argument; case this -> long_double__type: return *((long double*) this -> value) * argument; case this -> long_long__type: return *((long long*) this -> value) * argument; case this -> short__type: return *((short*) this -> value) * argument; case this -> void__type: return ((int) *((void**) this -> value)) * argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) * argument; } return *((long double*) this -> value) * argument; }
            friend inline primitive operator *(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((long double*) argumentB.value); }
            friend inline primitive operator *(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((long double*) argumentB.value); }
            friend inline primitive operator *(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((long double*) argumentB.value); }
            friend inline primitive operator *(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((long double*) argumentB.value); }

            inline primitive operator *(const long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) * argument; case this -> char__type: return *((char*) this -> value) * argument; case this -> char8_t__type: return *((char8_t*) this -> value) * argument; case this -> char16_t__type: return *((char16_t*) this -> value) * argument; case this -> char32_t__type: return *((char32_t*) this -> value) * argument; case this -> double__type: return *((double*) this -> value) * argument; case this -> float__type: return *((float*) this -> value) * argument; case this -> int__type: return *((int*) this -> value) * argument; case this -> long__type: return *((long*) this -> value) * argument; case this -> long_double__type: return *((long double*) this -> value) * argument; case this -> long_long__type: return *((long long*) this -> value) * argument; case this -> short__type: return *((short*) this -> value) * argument; case this -> void__type: return ((int) *((void**) this -> value)) * argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) * argument; } return *((long long*) this -> value) * argument; }
            friend inline primitive operator *(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((long long*) argumentB.value); }
            friend inline primitive operator *(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((long long*) argumentB.value); }
            friend inline primitive operator *(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((long long*) argumentB.value); }
            friend inline primitive operator *(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((long long*) argumentB.value); }

            inline primitive operator *(const short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) * argument; case this -> char__type: return *((char*) this -> value) * argument; case this -> char8_t__type: return *((char8_t*) this -> value) * argument; case this -> char16_t__type: return *((char16_t*) this -> value) * argument; case this -> char32_t__type: return *((char32_t*) this -> value) * argument; case this -> double__type: return *((double*) this -> value) * argument; case this -> float__type: return *((float*) this -> value) * argument; case this -> int__type: return *((int*) this -> value) * argument; case this -> long__type: return *((long*) this -> value) * argument; case this -> long_double__type: return *((long double*) this -> value) * argument; case this -> long_long__type: return *((long long*) this -> value) * argument; case this -> short__type: return *((short*) this -> value) * argument; case this -> void__type: return ((int) *((void**) this -> value)) * argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) * argument; } return *((short*) this -> value) * argument; }
            friend inline primitive operator *(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((short*) argumentB.value); }
            friend inline primitive operator *(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((short*) argumentB.value); }
            friend inline primitive operator *(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((short*) argumentB.value); }
            friend inline primitive operator *(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((short*) argumentB.value); }

            inline primitive operator *(const signed char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) * argument; case this -> char__type: return *((char*) this -> value) * argument; case this -> char8_t__type: return *((char8_t*) this -> value) * argument; case this -> char16_t__type: return *((char16_t*) this -> value) * argument; case this -> char32_t__type: return *((char32_t*) this -> value) * argument; case this -> double__type: return *((double*) this -> value) * argument; case this -> float__type: return *((float*) this -> value) * argument; case this -> int__type: return *((int*) this -> value) * argument; case this -> long__type: return *((long*) this -> value) * argument; case this -> long_double__type: return *((long double*) this -> value) * argument; case this -> long_long__type: return *((long long*) this -> value) * argument; case this -> short__type: return *((short*) this -> value) * argument; case this -> void__type: return ((int) *((void**) this -> value)) * argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) * argument; } return *((signed char*) this -> value) * argument; }
            friend inline primitive operator *(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((signed char*) argumentB.value); }
            friend inline primitive operator *(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((signed char*) argumentB.value); }
            friend inline primitive operator *(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((signed char*) argumentB.value); }
            friend inline primitive operator *(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((signed char*) argumentB.value); }

            inline primitive operator *(const unsigned char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) * argument; case this -> char__type: return *((char*) this -> value) * argument; case this -> char8_t__type: return *((char8_t*) this -> value) * argument; case this -> char16_t__type: return *((char16_t*) this -> value) * argument; case this -> char32_t__type: return *((char32_t*) this -> value) * argument; case this -> double__type: return *((double*) this -> value) * argument; case this -> float__type: return *((float*) this -> value) * argument; case this -> int__type: return *((int*) this -> value) * argument; case this -> long__type: return *((long*) this -> value) * argument; case this -> long_double__type: return *((long double*) this -> value) * argument; case this -> long_long__type: return *((long long*) this -> value) * argument; case this -> short__type: return *((short*) this -> value) * argument; case this -> void__type: return ((int) *((void**) this -> value)) * argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) * argument; } return *((unsigned char*) this -> value) * argument; }
            friend inline primitive operator *(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((unsigned char*) argumentB.value); }
            friend inline primitive operator *(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((unsigned char*) argumentB.value); }
            friend inline primitive operator *(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((unsigned char*) argumentB.value); }
            friend inline primitive operator *(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((unsigned char*) argumentB.value); }

            inline primitive operator *(const unsigned int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) * argument; case this -> char__type: return *((char*) this -> value) * argument; case this -> char8_t__type: return *((char8_t*) this -> value) * argument; case this -> char16_t__type: return *((char16_t*) this -> value) * argument; case this -> char32_t__type: return *((char32_t*) this -> value) * argument; case this -> double__type: return *((double*) this -> value) * argument; case this -> float__type: return *((float*) this -> value) * argument; case this -> int__type: return *((int*) this -> value) * argument; case this -> long__type: return *((long*) this -> value) * argument; case this -> long_double__type: return *((long double*) this -> value) * argument; case this -> long_long__type: return *((long long*) this -> value) * argument; case this -> short__type: return *((short*) this -> value) * argument; case this -> void__type: return ((int) *((void**) this -> value)) * argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) * argument; } return *((unsigned int*) this -> value) * argument; }
            friend inline primitive operator *(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((unsigned int*) argumentB.value); }
            friend inline primitive operator *(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((unsigned int*) argumentB.value); }
            friend inline primitive operator *(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((unsigned int*) argumentB.value); }
            friend inline primitive operator *(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((unsigned int*) argumentB.value); }

            inline primitive operator *(const unsigned long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) * argument; case this -> char__type: return *((char*) this -> value) * argument; case this -> char8_t__type: return *((char8_t*) this -> value) * argument; case this -> char16_t__type: return *((char16_t*) this -> value) * argument; case this -> char32_t__type: return *((char32_t*) this -> value) * argument; case this -> double__type: return *((double*) this -> value) * argument; case this -> float__type: return *((float*) this -> value) * argument; case this -> int__type: return *((int*) this -> value) * argument; case this -> long__type: return *((long*) this -> value) * argument; case this -> long_double__type: return *((long double*) this -> value) * argument; case this -> long_long__type: return *((long long*) this -> value) * argument; case this -> short__type: return *((short*) this -> value) * argument; case this -> void__type: return ((int) *((void**) this -> value)) * argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) * argument; } return *((unsigned long*) this -> value) * argument; }
            friend inline primitive operator *(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((unsigned long*) argumentB.value); }
            friend inline primitive operator *(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((unsigned long*) argumentB.value); }
            friend inline primitive operator *(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((unsigned long*) argumentB.value); }
            friend inline primitive operator *(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((unsigned long*) argumentB.value); }

            inline primitive operator *(const unsigned long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) * argument; case this -> char__type: return *((char*) this -> value) * argument; case this -> char8_t__type: return *((char8_t*) this -> value) * argument; case this -> char16_t__type: return *((char16_t*) this -> value) * argument; case this -> char32_t__type: return *((char32_t*) this -> value) * argument; case this -> double__type: return *((double*) this -> value) * argument; case this -> float__type: return *((float*) this -> value) * argument; case this -> int__type: return *((int*) this -> value) * argument; case this -> long__type: return *((long*) this -> value) * argument; case this -> long_double__type: return *((long double*) this -> value) * argument; case this -> long_long__type: return *((long long*) this -> value) * argument; case this -> short__type: return *((short*) this -> value) * argument; case this -> void__type: return ((int) *((void**) this -> value)) * argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) * argument; } return *((unsigned long long*) this -> value) * argument; }
            friend inline primitive operator *(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((unsigned long long*) argumentB.value); }
            friend inline primitive operator *(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((unsigned long long*) argumentB.value); }
            friend inline primitive operator *(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((unsigned long long*) argumentB.value); }
            friend inline primitive operator *(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((unsigned long long*) argumentB.value); }

            inline primitive operator *(const unsigned short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) * argument; case this -> char__type: return *((char*) this -> value) * argument; case this -> char8_t__type: return *((char8_t*) this -> value) * argument; case this -> char16_t__type: return *((char16_t*) this -> value) * argument; case this -> char32_t__type: return *((char32_t*) this -> value) * argument; case this -> double__type: return *((double*) this -> value) * argument; case this -> float__type: return *((float*) this -> value) * argument; case this -> int__type: return *((int*) this -> value) * argument; case this -> long__type: return *((long*) this -> value) * argument; case this -> long_double__type: return *((long double*) this -> value) * argument; case this -> long_long__type: return *((long long*) this -> value) * argument; case this -> short__type: return *((short*) this -> value) * argument; case this -> void__type: return ((int) *((void**) this -> value)) * argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) * argument; } return *((unsigned short*) this -> value) * argument; }
            friend inline primitive operator *(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((unsigned short*) argumentB.value); }
            friend inline primitive operator *(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((unsigned short*) argumentB.value); }
            friend inline primitive operator *(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((unsigned short*) argumentB.value); }
            friend inline primitive operator *(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((unsigned short*) argumentB.value); }

            inline primitive operator *(void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) * (int) argument; case this -> char__type: return *((char*) this -> value) * (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) * (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) * (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) * (int) argument; case this -> double__type: return *((double*) this -> value) * (int) argument; case this -> float__type: return *((float*) this -> value) * (int) argument; case this -> int__type: return *((int*) this -> value) * (int) argument; case this -> long__type: return *((long*) this -> value) * (int) argument; case this -> long_double__type: return *((long double*) this -> value) * (int) argument; case this -> long_long__type: return *((long long*) this -> value) * (int) argument; case this -> short__type: return *((short*) this -> value) * (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) * (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) * (int) argument; } return *((int*) this -> value) * (int) argument; }
            friend inline primitive operator *(void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) * *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) * *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) * *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) * *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) * *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) * *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) * *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) * *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) * *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) * *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) * ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) * *((wchar_t*) argumentB.value); } return ((int) argumentA) * *((int*) argumentB.value); }
            friend inline primitive operator *(void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) * *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) * *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) * *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) * *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) * *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) * *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) * *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) * *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) * *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) * *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) * ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) * *((wchar_t*) argumentB.value); } return ((int) argumentA) * *((int*) argumentB.value); }
            friend inline primitive operator *(void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) * *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) * *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) * *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) * *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) * *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) * *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) * *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) * *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) * *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) * *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) * ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) * *((wchar_t*) argumentB.value); } return ((int) argumentA) * *((int*) argumentB.value); }
            friend inline primitive operator *(void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) * *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) * *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) * *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) * *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) * *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) * *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) * *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) * *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) * *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) * *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) * ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) * *((wchar_t*) argumentB.value); } return ((int) argumentA) * *((int*) argumentB.value); }

            inline primitive operator *(const void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) * (int) argument; case this -> char__type: return *((char*) this -> value) * (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) * (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) * (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) * (int) argument; case this -> double__type: return *((double*) this -> value) * (int) argument; case this -> float__type: return *((float*) this -> value) * (int) argument; case this -> int__type: return *((int*) this -> value) * (int) argument; case this -> long__type: return *((long*) this -> value) * (int) argument; case this -> long_double__type: return *((long double*) this -> value) * (int) argument; case this -> long_long__type: return *((long long*) this -> value) * (int) argument; case this -> short__type: return *((short*) this -> value) * (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) * (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) * (int) argument; } return *((int*) this -> value) * (int) argument; }
            friend inline primitive operator *(const void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) * *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) * *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) * *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) * *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) * *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) * *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) * *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) * *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) * *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) * *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) * ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) * *((wchar_t*) argumentB.value); } return ((int) argumentA) * *((int*) argumentB.value); }
            friend inline primitive operator *(const void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) * *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) * *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) * *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) * *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) * *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) * *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) * *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) * *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) * *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) * *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) * ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) * *((wchar_t*) argumentB.value); } return ((int) argumentA) * *((int*) argumentB.value); }
            friend inline primitive operator *(const void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) * *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) * *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) * *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) * *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) * *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) * *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) * *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) * *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) * *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) * *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) * ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) * *((wchar_t*) argumentB.value); } return ((int) argumentA) * *((int*) argumentB.value); }
            friend inline primitive operator *(const void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) * *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) * *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) * *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) * *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) * *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) * *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) * *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) * *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) * *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) * *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) * ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) * *((wchar_t*) argumentB.value); } return ((int) argumentA) * *((int*) argumentB.value); }

            inline primitive operator *(const wchar_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) * argument; case this -> char__type: return *((char*) this -> value) * argument; case this -> char8_t__type: return *((char8_t*) this -> value) * argument; case this -> char16_t__type: return *((char16_t*) this -> value) * argument; case this -> char32_t__type: return *((char32_t*) this -> value) * argument; case this -> double__type: return *((double*) this -> value) * argument; case this -> float__type: return *((float*) this -> value) * argument; case this -> int__type: return *((int*) this -> value) * argument; case this -> long__type: return *((long*) this -> value) * argument; case this -> long_double__type: return *((long double*) this -> value) * argument; case this -> long_long__type: return *((long long*) this -> value) * argument; case this -> short__type: return *((short*) this -> value) * argument; case this -> void__type: return ((int) *((void**) this -> value)) * argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) * argument; } return *((wchar_t*) this -> value) * argument; }
            friend inline primitive operator *(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((wchar_t*) argumentB.value); }
            friend inline primitive operator *(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((wchar_t*) argumentB.value); }
            friend inline primitive operator *(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((wchar_t*) argumentB.value); }
            friend inline primitive operator *(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA * *((boolean*) argumentB.value); case argumentB.char__type: return argumentA * *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA * *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA * *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA * *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA * *((double*) argumentB.value); case argumentB.float__type: return argumentA * *((float*) argumentB.value); case argumentB.int__type: return argumentA * *((int*) argumentB.value); case argumentB.long__type: return argumentA * *((long*) argumentB.value); case argumentB.long_double__type: return argumentA * *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA * *((long long*) argumentB.value); case argumentB.short__type: return argumentA * *((short*) argumentB.value); case argumentB.void__type: return argumentA * (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA * *((wchar_t*) argumentB.value); } return argumentA * *((wchar_t*) argumentB.value); }

            // [/]
            inline primitive operator /(const boolean argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) / argument; case this -> char__type: return *((char*) this -> value) / argument; case this -> char8_t__type: return *((char8_t*) this -> value) / argument; case this -> char16_t__type: return *((char16_t*) this -> value) / argument; case this -> char32_t__type: return *((char32_t*) this -> value) / argument; case this -> double__type: return *((double*) this -> value) / argument; case this -> float__type: return *((float*) this -> value) / argument; case this -> int__type: return *((int*) this -> value) / argument; case this -> long__type: return *((long*) this -> value) / argument; case this -> long_double__type: return *((long double*) this -> value) / argument; case this -> long_long__type: return *((long long*) this -> value) / argument; case this -> short__type: return *((short*) this -> value) / argument; case this -> void__type: return ((int) *((void**) this -> value)) / argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) / argument; } return *((boolean*) this -> value) / argument; }
            friend inline primitive operator /(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((boolean*) argumentB.value); }
            friend inline primitive operator /(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((boolean*) argumentB.value); }
            friend inline primitive operator /(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((boolean*) argumentB.value); }
            friend inline primitive operator /(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((boolean*) argumentB.value); }

            inline primitive operator /(const char8_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) / argument; case this -> char__type: return *((char*) this -> value) / argument; case this -> char8_t__type: return *((char8_t*) this -> value) / argument; case this -> char16_t__type: return *((char16_t*) this -> value) / argument; case this -> char32_t__type: return *((char32_t*) this -> value) / argument; case this -> double__type: return *((double*) this -> value) / argument; case this -> float__type: return *((float*) this -> value) / argument; case this -> int__type: return *((int*) this -> value) / argument; case this -> long__type: return *((long*) this -> value) / argument; case this -> long_double__type: return *((long double*) this -> value) / argument; case this -> long_long__type: return *((long long*) this -> value) / argument; case this -> short__type: return *((short*) this -> value) / argument; case this -> void__type: return ((int) *((void**) this -> value)) / argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) / argument; } return *((char8_t*) this -> value) / argument; }
            friend inline primitive operator /(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((char8_t*) argumentB.value); }
            friend inline primitive operator /(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((char8_t*) argumentB.value); }
            friend inline primitive operator /(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((char8_t*) argumentB.value); }
            friend inline primitive operator /(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((char8_t*) argumentB.value); }

            inline primitive operator /(const char16_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) / argument; case this -> char__type: return *((char*) this -> value) / argument; case this -> char8_t__type: return *((char8_t*) this -> value) / argument; case this -> char16_t__type: return *((char16_t*) this -> value) / argument; case this -> char32_t__type: return *((char32_t*) this -> value) / argument; case this -> double__type: return *((double*) this -> value) / argument; case this -> float__type: return *((float*) this -> value) / argument; case this -> int__type: return *((int*) this -> value) / argument; case this -> long__type: return *((long*) this -> value) / argument; case this -> long_double__type: return *((long double*) this -> value) / argument; case this -> long_long__type: return *((long long*) this -> value) / argument; case this -> short__type: return *((short*) this -> value) / argument; case this -> void__type: return ((int) *((void**) this -> value)) / argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) / argument; } return *((char16_t*) this -> value) / argument; }
            friend inline primitive operator /(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((char16_t*) argumentB.value); }
            friend inline primitive operator /(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((char16_t*) argumentB.value); }
            friend inline primitive operator /(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((char16_t*) argumentB.value); }
            friend inline primitive operator /(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((char16_t*) argumentB.value); }

            inline primitive operator /(const char32_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) / argument; case this -> char__type: return *((char*) this -> value) / argument; case this -> char8_t__type: return *((char8_t*) this -> value) / argument; case this -> char16_t__type: return *((char16_t*) this -> value) / argument; case this -> char32_t__type: return *((char32_t*) this -> value) / argument; case this -> double__type: return *((double*) this -> value) / argument; case this -> float__type: return *((float*) this -> value) / argument; case this -> int__type: return *((int*) this -> value) / argument; case this -> long__type: return *((long*) this -> value) / argument; case this -> long_double__type: return *((long double*) this -> value) / argument; case this -> long_long__type: return *((long long*) this -> value) / argument; case this -> short__type: return *((short*) this -> value) / argument; case this -> void__type: return ((int) *((void**) this -> value)) / argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) / argument; } return *((char32_t*) this -> value) / argument; }
            friend inline primitive operator /(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((char32_t*) argumentB.value); }
            friend inline primitive operator /(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((char32_t*) argumentB.value); }
            friend inline primitive operator /(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((char32_t*) argumentB.value); }
            friend inline primitive operator /(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((char32_t*) argumentB.value); }

            inline primitive operator /(const double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) / argument; case this -> char__type: return *((char*) this -> value) / argument; case this -> char8_t__type: return *((char8_t*) this -> value) / argument; case this -> char16_t__type: return *((char16_t*) this -> value) / argument; case this -> char32_t__type: return *((char32_t*) this -> value) / argument; case this -> double__type: return *((double*) this -> value) / argument; case this -> float__type: return *((float*) this -> value) / argument; case this -> int__type: return *((int*) this -> value) / argument; case this -> long__type: return *((long*) this -> value) / argument; case this -> long_double__type: return *((long double*) this -> value) / argument; case this -> long_long__type: return *((long long*) this -> value) / argument; case this -> short__type: return *((short*) this -> value) / argument; case this -> void__type: return ((int) *((void**) this -> value)) / argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) / argument; } return *((double*) this -> value) / argument; }
            friend inline primitive operator /(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((double*) argumentB.value); }
            friend inline primitive operator /(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((double*) argumentB.value); }
            friend inline primitive operator /(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((double*) argumentB.value); }
            friend inline primitive operator /(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((double*) argumentB.value); }

            inline primitive operator /(const float argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) / argument; case this -> char__type: return *((char*) this -> value) / argument; case this -> char8_t__type: return *((char8_t*) this -> value) / argument; case this -> char16_t__type: return *((char16_t*) this -> value) / argument; case this -> char32_t__type: return *((char32_t*) this -> value) / argument; case this -> double__type: return *((double*) this -> value) / argument; case this -> float__type: return *((float*) this -> value) / argument; case this -> int__type: return *((int*) this -> value) / argument; case this -> long__type: return *((long*) this -> value) / argument; case this -> long_double__type: return *((long double*) this -> value) / argument; case this -> long_long__type: return *((long long*) this -> value) / argument; case this -> short__type: return *((short*) this -> value) / argument; case this -> void__type: return ((int) *((void**) this -> value)) / argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) / argument; } return *((float*) this -> value) / argument; }
            friend inline primitive operator /(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((float*) argumentB.value); }
            friend inline primitive operator /(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((float*) argumentB.value); }
            friend inline primitive operator /(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((float*) argumentB.value); }
            friend inline primitive operator /(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((float*) argumentB.value); }

            inline primitive operator /(const int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) / argument; case this -> char__type: return *((char*) this -> value) / argument; case this -> char8_t__type: return *((char8_t*) this -> value) / argument; case this -> char16_t__type: return *((char16_t*) this -> value) / argument; case this -> char32_t__type: return *((char32_t*) this -> value) / argument; case this -> double__type: return *((double*) this -> value) / argument; case this -> float__type: return *((float*) this -> value) / argument; case this -> int__type: return *((int*) this -> value) / argument; case this -> long__type: return *((long*) this -> value) / argument; case this -> long_double__type: return *((long double*) this -> value) / argument; case this -> long_long__type: return *((long long*) this -> value) / argument; case this -> short__type: return *((short*) this -> value) / argument; case this -> void__type: return ((int) *((void**) this -> value)) / argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) / argument; } return *((int*) this -> value) / argument; }
            friend inline primitive operator /(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((int*) argumentB.value); }
            friend inline primitive operator /(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((int*) argumentB.value); }
            friend inline primitive operator /(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((int*) argumentB.value); }
            friend inline primitive operator /(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((int*) argumentB.value); }

            inline primitive operator /(const long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) / argument; case this -> char__type: return *((char*) this -> value) / argument; case this -> char8_t__type: return *((char8_t*) this -> value) / argument; case this -> char16_t__type: return *((char16_t*) this -> value) / argument; case this -> char32_t__type: return *((char32_t*) this -> value) / argument; case this -> double__type: return *((double*) this -> value) / argument; case this -> float__type: return *((float*) this -> value) / argument; case this -> int__type: return *((int*) this -> value) / argument; case this -> long__type: return *((long*) this -> value) / argument; case this -> long_double__type: return *((long double*) this -> value) / argument; case this -> long_long__type: return *((long long*) this -> value) / argument; case this -> short__type: return *((short*) this -> value) / argument; case this -> void__type: return ((int) *((void**) this -> value)) / argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) / argument; } return *((long*) this -> value) / argument; }
            friend inline primitive operator /(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((long*) argumentB.value); }
            friend inline primitive operator /(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((long*) argumentB.value); }
            friend inline primitive operator /(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((long*) argumentB.value); }
            friend inline primitive operator /(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((long*) argumentB.value); }

            inline primitive operator /(const long double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) / argument; case this -> char__type: return *((char*) this -> value) / argument; case this -> char8_t__type: return *((char8_t*) this -> value) / argument; case this -> char16_t__type: return *((char16_t*) this -> value) / argument; case this -> char32_t__type: return *((char32_t*) this -> value) / argument; case this -> double__type: return *((double*) this -> value) / argument; case this -> float__type: return *((float*) this -> value) / argument; case this -> int__type: return *((int*) this -> value) / argument; case this -> long__type: return *((long*) this -> value) / argument; case this -> long_double__type: return *((long double*) this -> value) / argument; case this -> long_long__type: return *((long long*) this -> value) / argument; case this -> short__type: return *((short*) this -> value) / argument; case this -> void__type: return ((int) *((void**) this -> value)) / argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) / argument; } return *((long double*) this -> value) / argument; }
            friend inline primitive operator /(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((long double*) argumentB.value); }
            friend inline primitive operator /(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((long double*) argumentB.value); }
            friend inline primitive operator /(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((long double*) argumentB.value); }
            friend inline primitive operator /(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((long double*) argumentB.value); }

            inline primitive operator /(const long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) / argument; case this -> char__type: return *((char*) this -> value) / argument; case this -> char8_t__type: return *((char8_t*) this -> value) / argument; case this -> char16_t__type: return *((char16_t*) this -> value) / argument; case this -> char32_t__type: return *((char32_t*) this -> value) / argument; case this -> double__type: return *((double*) this -> value) / argument; case this -> float__type: return *((float*) this -> value) / argument; case this -> int__type: return *((int*) this -> value) / argument; case this -> long__type: return *((long*) this -> value) / argument; case this -> long_double__type: return *((long double*) this -> value) / argument; case this -> long_long__type: return *((long long*) this -> value) / argument; case this -> short__type: return *((short*) this -> value) / argument; case this -> void__type: return ((int) *((void**) this -> value)) / argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) / argument; } return *((long long*) this -> value) / argument; }
            friend inline primitive operator /(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((long long*) argumentB.value); }
            friend inline primitive operator /(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((long long*) argumentB.value); }
            friend inline primitive operator /(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((long long*) argumentB.value); }
            friend inline primitive operator /(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((long long*) argumentB.value); }

            inline primitive operator /(const short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) / argument; case this -> char__type: return *((char*) this -> value) / argument; case this -> char8_t__type: return *((char8_t*) this -> value) / argument; case this -> char16_t__type: return *((char16_t*) this -> value) / argument; case this -> char32_t__type: return *((char32_t*) this -> value) / argument; case this -> double__type: return *((double*) this -> value) / argument; case this -> float__type: return *((float*) this -> value) / argument; case this -> int__type: return *((int*) this -> value) / argument; case this -> long__type: return *((long*) this -> value) / argument; case this -> long_double__type: return *((long double*) this -> value) / argument; case this -> long_long__type: return *((long long*) this -> value) / argument; case this -> short__type: return *((short*) this -> value) / argument; case this -> void__type: return ((int) *((void**) this -> value)) / argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) / argument; } return *((short*) this -> value) / argument; }
            friend inline primitive operator /(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((short*) argumentB.value); }
            friend inline primitive operator /(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((short*) argumentB.value); }
            friend inline primitive operator /(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((short*) argumentB.value); }
            friend inline primitive operator /(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((short*) argumentB.value); }

            inline primitive operator /(const signed char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) / argument; case this -> char__type: return *((char*) this -> value) / argument; case this -> char8_t__type: return *((char8_t*) this -> value) / argument; case this -> char16_t__type: return *((char16_t*) this -> value) / argument; case this -> char32_t__type: return *((char32_t*) this -> value) / argument; case this -> double__type: return *((double*) this -> value) / argument; case this -> float__type: return *((float*) this -> value) / argument; case this -> int__type: return *((int*) this -> value) / argument; case this -> long__type: return *((long*) this -> value) / argument; case this -> long_double__type: return *((long double*) this -> value) / argument; case this -> long_long__type: return *((long long*) this -> value) / argument; case this -> short__type: return *((short*) this -> value) / argument; case this -> void__type: return ((int) *((void**) this -> value)) / argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) / argument; } return *((signed char*) this -> value) / argument; }
            friend inline primitive operator /(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((signed char*) argumentB.value); }
            friend inline primitive operator /(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((signed char*) argumentB.value); }
            friend inline primitive operator /(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((signed char*) argumentB.value); }
            friend inline primitive operator /(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((signed char*) argumentB.value); }

            inline primitive operator /(const unsigned char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) / argument; case this -> char__type: return *((char*) this -> value) / argument; case this -> char8_t__type: return *((char8_t*) this -> value) / argument; case this -> char16_t__type: return *((char16_t*) this -> value) / argument; case this -> char32_t__type: return *((char32_t*) this -> value) / argument; case this -> double__type: return *((double*) this -> value) / argument; case this -> float__type: return *((float*) this -> value) / argument; case this -> int__type: return *((int*) this -> value) / argument; case this -> long__type: return *((long*) this -> value) / argument; case this -> long_double__type: return *((long double*) this -> value) / argument; case this -> long_long__type: return *((long long*) this -> value) / argument; case this -> short__type: return *((short*) this -> value) / argument; case this -> void__type: return ((int) *((void**) this -> value)) / argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) / argument; } return *((unsigned char*) this -> value) / argument; }
            friend inline primitive operator /(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((unsigned char*) argumentB.value); }
            friend inline primitive operator /(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((unsigned char*) argumentB.value); }
            friend inline primitive operator /(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((unsigned char*) argumentB.value); }
            friend inline primitive operator /(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((unsigned char*) argumentB.value); }

            inline primitive operator /(const unsigned int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) / argument; case this -> char__type: return *((char*) this -> value) / argument; case this -> char8_t__type: return *((char8_t*) this -> value) / argument; case this -> char16_t__type: return *((char16_t*) this -> value) / argument; case this -> char32_t__type: return *((char32_t*) this -> value) / argument; case this -> double__type: return *((double*) this -> value) / argument; case this -> float__type: return *((float*) this -> value) / argument; case this -> int__type: return *((int*) this -> value) / argument; case this -> long__type: return *((long*) this -> value) / argument; case this -> long_double__type: return *((long double*) this -> value) / argument; case this -> long_long__type: return *((long long*) this -> value) / argument; case this -> short__type: return *((short*) this -> value) / argument; case this -> void__type: return ((int) *((void**) this -> value)) / argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) / argument; } return *((unsigned int*) this -> value) / argument; }
            friend inline primitive operator /(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((unsigned int*) argumentB.value); }
            friend inline primitive operator /(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((unsigned int*) argumentB.value); }
            friend inline primitive operator /(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((unsigned int*) argumentB.value); }
            friend inline primitive operator /(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((unsigned int*) argumentB.value); }

            inline primitive operator /(const unsigned long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) / argument; case this -> char__type: return *((char*) this -> value) / argument; case this -> char8_t__type: return *((char8_t*) this -> value) / argument; case this -> char16_t__type: return *((char16_t*) this -> value) / argument; case this -> char32_t__type: return *((char32_t*) this -> value) / argument; case this -> double__type: return *((double*) this -> value) / argument; case this -> float__type: return *((float*) this -> value) / argument; case this -> int__type: return *((int*) this -> value) / argument; case this -> long__type: return *((long*) this -> value) / argument; case this -> long_double__type: return *((long double*) this -> value) / argument; case this -> long_long__type: return *((long long*) this -> value) / argument; case this -> short__type: return *((short*) this -> value) / argument; case this -> void__type: return ((int) *((void**) this -> value)) / argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) / argument; } return *((unsigned long*) this -> value) / argument; }
            friend inline primitive operator /(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((unsigned long*) argumentB.value); }
            friend inline primitive operator /(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((unsigned long*) argumentB.value); }
            friend inline primitive operator /(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((unsigned long*) argumentB.value); }
            friend inline primitive operator /(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((unsigned long*) argumentB.value); }

            inline primitive operator /(const unsigned long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) / argument; case this -> char__type: return *((char*) this -> value) / argument; case this -> char8_t__type: return *((char8_t*) this -> value) / argument; case this -> char16_t__type: return *((char16_t*) this -> value) / argument; case this -> char32_t__type: return *((char32_t*) this -> value) / argument; case this -> double__type: return *((double*) this -> value) / argument; case this -> float__type: return *((float*) this -> value) / argument; case this -> int__type: return *((int*) this -> value) / argument; case this -> long__type: return *((long*) this -> value) / argument; case this -> long_double__type: return *((long double*) this -> value) / argument; case this -> long_long__type: return *((long long*) this -> value) / argument; case this -> short__type: return *((short*) this -> value) / argument; case this -> void__type: return ((int) *((void**) this -> value)) / argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) / argument; } return *((unsigned long long*) this -> value) / argument; }
            friend inline primitive operator /(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((unsigned long long*) argumentB.value); }
            friend inline primitive operator /(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((unsigned long long*) argumentB.value); }
            friend inline primitive operator /(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((unsigned long long*) argumentB.value); }
            friend inline primitive operator /(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((unsigned long long*) argumentB.value); }

            inline primitive operator /(const unsigned short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) / argument; case this -> char__type: return *((char*) this -> value) / argument; case this -> char8_t__type: return *((char8_t*) this -> value) / argument; case this -> char16_t__type: return *((char16_t*) this -> value) / argument; case this -> char32_t__type: return *((char32_t*) this -> value) / argument; case this -> double__type: return *((double*) this -> value) / argument; case this -> float__type: return *((float*) this -> value) / argument; case this -> int__type: return *((int*) this -> value) / argument; case this -> long__type: return *((long*) this -> value) / argument; case this -> long_double__type: return *((long double*) this -> value) / argument; case this -> long_long__type: return *((long long*) this -> value) / argument; case this -> short__type: return *((short*) this -> value) / argument; case this -> void__type: return ((int) *((void**) this -> value)) / argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) / argument; } return *((unsigned short*) this -> value) / argument; }
            friend inline primitive operator /(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((unsigned short*) argumentB.value); }
            friend inline primitive operator /(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((unsigned short*) argumentB.value); }
            friend inline primitive operator /(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((unsigned short*) argumentB.value); }
            friend inline primitive operator /(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((unsigned short*) argumentB.value); }

            inline primitive operator /(void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) / (int) argument; case this -> char__type: return *((char*) this -> value) / (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) / (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) / (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) / (int) argument; case this -> double__type: return *((double*) this -> value) / (int) argument; case this -> float__type: return *((float*) this -> value) / (int) argument; case this -> int__type: return *((int*) this -> value) / (int) argument; case this -> long__type: return *((long*) this -> value) / (int) argument; case this -> long_double__type: return *((long double*) this -> value) / (int) argument; case this -> long_long__type: return *((long long*) this -> value) / (int) argument; case this -> short__type: return *((short*) this -> value) / (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) / (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) / (int) argument; } return *((int*) this -> value) / (int) argument; }
            friend inline primitive operator /(void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) / *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) / *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) / *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) / *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) / *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) / *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) / *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) / *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) / *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) / *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) / ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) / *((wchar_t*) argumentB.value); } return ((int) argumentA) / *((int*) argumentB.value); }
            friend inline primitive operator /(void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) / *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) / *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) / *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) / *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) / *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) / *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) / *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) / *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) / *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) / *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) / ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) / *((wchar_t*) argumentB.value); } return ((int) argumentA) / *((int*) argumentB.value); }
            friend inline primitive operator /(void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) / *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) / *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) / *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) / *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) / *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) / *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) / *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) / *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) / *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) / *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) / ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) / *((wchar_t*) argumentB.value); } return ((int) argumentA) / *((int*) argumentB.value); }
            friend inline primitive operator /(void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) / *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) / *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) / *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) / *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) / *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) / *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) / *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) / *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) / *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) / *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) / ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) / *((wchar_t*) argumentB.value); } return ((int) argumentA) / *((int*) argumentB.value); }

            inline primitive operator /(const void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) / (int) argument; case this -> char__type: return *((char*) this -> value) / (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) / (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) / (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) / (int) argument; case this -> double__type: return *((double*) this -> value) / (int) argument; case this -> float__type: return *((float*) this -> value) / (int) argument; case this -> int__type: return *((int*) this -> value) / (int) argument; case this -> long__type: return *((long*) this -> value) / (int) argument; case this -> long_double__type: return *((long double*) this -> value) / (int) argument; case this -> long_long__type: return *((long long*) this -> value) / (int) argument; case this -> short__type: return *((short*) this -> value) / (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) / (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) / (int) argument; } return *((int*) this -> value) / (int) argument; }
            friend inline primitive operator /(const void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) / *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) / *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) / *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) / *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) / *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) / *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) / *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) / *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) / *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) / *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) / ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) / *((wchar_t*) argumentB.value); } return ((int) argumentA) / *((int*) argumentB.value); }
            friend inline primitive operator /(const void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) / *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) / *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) / *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) / *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) / *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) / *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) / *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) / *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) / *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) / *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) / ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) / *((wchar_t*) argumentB.value); } return ((int) argumentA) / *((int*) argumentB.value); }
            friend inline primitive operator /(const void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) / *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) / *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) / *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) / *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) / *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) / *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) / *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) / *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) / *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) / *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) / ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) / *((wchar_t*) argumentB.value); } return ((int) argumentA) / *((int*) argumentB.value); }
            friend inline primitive operator /(const void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) / *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) / *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) / *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) / *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) / *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) / *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) / *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) / *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) / *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) / *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) / ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) / *((wchar_t*) argumentB.value); } return ((int) argumentA) / *((int*) argumentB.value); }

            inline primitive operator /(const wchar_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) / argument; case this -> char__type: return *((char*) this -> value) / argument; case this -> char8_t__type: return *((char8_t*) this -> value) / argument; case this -> char16_t__type: return *((char16_t*) this -> value) / argument; case this -> char32_t__type: return *((char32_t*) this -> value) / argument; case this -> double__type: return *((double*) this -> value) / argument; case this -> float__type: return *((float*) this -> value) / argument; case this -> int__type: return *((int*) this -> value) / argument; case this -> long__type: return *((long*) this -> value) / argument; case this -> long_double__type: return *((long double*) this -> value) / argument; case this -> long_long__type: return *((long long*) this -> value) / argument; case this -> short__type: return *((short*) this -> value) / argument; case this -> void__type: return ((int) *((void**) this -> value)) / argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) / argument; } return *((wchar_t*) this -> value) / argument; }
            friend inline primitive operator /(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((wchar_t*) argumentB.value); }
            friend inline primitive operator /(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((wchar_t*) argumentB.value); }
            friend inline primitive operator /(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((wchar_t*) argumentB.value); }
            friend inline primitive operator /(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA / *((boolean*) argumentB.value); case argumentB.char__type: return argumentA / *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA / *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA / *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA / *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA / *((double*) argumentB.value); case argumentB.float__type: return argumentA / *((float*) argumentB.value); case argumentB.int__type: return argumentA / *((int*) argumentB.value); case argumentB.long__type: return argumentA / *((long*) argumentB.value); case argumentB.long_double__type: return argumentA / *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA / *((long long*) argumentB.value); case argumentB.short__type: return argumentA / *((short*) argumentB.value); case argumentB.void__type: return argumentA / (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA / *((wchar_t*) argumentB.value); } return argumentA / *((wchar_t*) argumentB.value); }

            // [%]
            inline primitive operator %(const boolean argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) % argument; case this -> char__type: return *((char*) this -> value) % argument; case this -> char8_t__type: return *((char8_t*) this -> value) % argument; case this -> char16_t__type: return *((char16_t*) this -> value) % argument; case this -> char32_t__type: return *((char32_t*) this -> value) % argument; case this -> double__type: return mod(*((double*) this -> value), argument); case this -> float__type: return mod(*((float*) this -> value), argument); case this -> int__type: return *((int*) this -> value) % argument; case this -> long__type: return *((long*) this -> value) % argument; case this -> long_double__type: return mod(*((long double*) this -> value), argument); case this -> long_long__type: return *((long long*) this -> value) % argument; case this -> short__type: return *((short*) this -> value) % argument; case this -> void__type: return ((int) *((void**) this -> value)) % argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) % argument; } return *((boolean*) this -> value) % argument; }
            friend inline primitive operator %(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((boolean*) argumentB.value); }
            friend inline primitive operator %(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((boolean*) argumentB.value); }
            friend inline primitive operator %(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((boolean*) argumentB.value); }
            friend inline primitive operator %(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((boolean*) argumentB.value); }

            inline primitive operator %(const char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) % argument; case this -> char__type: return *((char*) this -> value) % argument; case this -> char8_t__type: return *((char8_t*) this -> value) % argument; case this -> char16_t__type: return *((char16_t*) this -> value) % argument; case this -> char32_t__type: return *((char32_t*) this -> value) % argument; case this -> double__type: return mod(*((double*) this -> value), argument); case this -> float__type: return mod(*((float*) this -> value), argument); case this -> int__type: return *((int*) this -> value) % argument; case this -> long__type: return *((long*) this -> value) % argument; case this -> long_double__type: return mod(*((long double*) this -> value), argument); case this -> long_long__type: return *((long long*) this -> value) % argument; case this -> short__type: return *((short*) this -> value) % argument; case this -> void__type: return ((int) *((void**) this -> value)) % argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) % argument; } return *((char*) this -> value) % argument; }
            friend inline primitive operator %(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((char*) argumentB.value); }
            friend inline primitive operator %(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((char*) argumentB.value); }
            friend inline primitive operator %(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((char*) argumentB.value); }
            friend inline primitive operator %(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((char*) argumentB.value); }

            inline primitive operator %(const char8_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) % argument; case this -> char__type: return *((char*) this -> value) % argument; case this -> char8_t__type: return *((char8_t*) this -> value) % argument; case this -> char16_t__type: return *((char16_t*) this -> value) % argument; case this -> char32_t__type: return *((char32_t*) this -> value) % argument; case this -> double__type: return mod(*((double*) this -> value), argument); case this -> float__type: return mod(*((float*) this -> value), argument); case this -> int__type: return *((int*) this -> value) % argument; case this -> long__type: return *((long*) this -> value) % argument; case this -> long_double__type: return mod(*((long double*) this -> value), argument); case this -> long_long__type: return *((long long*) this -> value) % argument; case this -> short__type: return *((short*) this -> value) % argument; case this -> void__type: return ((int) *((void**) this -> value)) % argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) % argument; } return *((char8_t*) this -> value) % argument; }
            friend inline primitive operator %(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((char8_t*) argumentB.value); }
            friend inline primitive operator %(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((char8_t*) argumentB.value); }
            friend inline primitive operator %(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((char8_t*) argumentB.value); }
            friend inline primitive operator %(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((char8_t*) argumentB.value); }

            inline primitive operator %(const char16_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) % argument; case this -> char__type: return *((char*) this -> value) % argument; case this -> char8_t__type: return *((char8_t*) this -> value) % argument; case this -> char16_t__type: return *((char16_t*) this -> value) % argument; case this -> char32_t__type: return *((char32_t*) this -> value) % argument; case this -> double__type: return mod(*((double*) this -> value), argument); case this -> float__type: return mod(*((float*) this -> value), argument); case this -> int__type: return *((int*) this -> value) % argument; case this -> long__type: return *((long*) this -> value) % argument; case this -> long_double__type: return mod(*((long double*) this -> value), argument); case this -> long_long__type: return *((long long*) this -> value) % argument; case this -> short__type: return *((short*) this -> value) % argument; case this -> void__type: return ((int) *((void**) this -> value)) % argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) % argument; } return *((char16_t*) this -> value) % argument; }
            friend inline primitive operator %(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((char16_t*) argumentB.value); }
            friend inline primitive operator %(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((char16_t*) argumentB.value); }
            friend inline primitive operator %(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((char16_t*) argumentB.value); }
            friend inline primitive operator %(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((char16_t*) argumentB.value); }

            inline primitive operator %(const char32_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) % argument; case this -> char__type: return *((char*) this -> value) % argument; case this -> char8_t__type: return *((char8_t*) this -> value) % argument; case this -> char16_t__type: return *((char16_t*) this -> value) % argument; case this -> char32_t__type: return *((char32_t*) this -> value) % argument; case this -> double__type: return mod(*((double*) this -> value), argument); case this -> float__type: return mod(*((float*) this -> value), argument); case this -> int__type: return *((int*) this -> value) % argument; case this -> long__type: return *((long*) this -> value) % argument; case this -> long_double__type: return mod(*((long double*) this -> value), argument); case this -> long_long__type: return *((long long*) this -> value) % argument; case this -> short__type: return *((short*) this -> value) % argument; case this -> void__type: return ((int) *((void**) this -> value)) % argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) % argument; } return *((char32_t*) this -> value) % argument; }
            friend inline primitive operator %(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((char32_t*) argumentB.value); }
            friend inline primitive operator %(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((char32_t*) argumentB.value); }
            friend inline primitive operator %(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((char32_t*) argumentB.value); }
            friend inline primitive operator %(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((char32_t*) argumentB.value); }

            inline primitive operator %(const double argument) const { switch (this -> type) { case this -> boolean__type: return mod((unsigned short) *((boolean*) this -> value), argument); case this -> char__type: return mod((short) *((char*) this -> value), argument); case this -> char8_t__type: return mod((short) *((char8_t*) this -> value), argument); case this -> char16_t__type: return mod((short) *((char16_t*) this -> value), argument); case this -> char32_t__type: return mod((int) *((char32_t*) this -> value), argument); case this -> double__type: return mod(*((double*) this -> value), argument); case this -> float__type: return mod(*((float*) this -> value), argument); case this -> int__type: return mod(*((int*) this -> value), argument); case this -> long__type: return mod(*((long*) this -> value), argument); case this -> long_double__type: return mod(*((long double*) this -> value), argument); case this -> long_long__type: return mod(*((long long*) this -> value), argument); case this -> short__type: return mod(*((short*) this -> value), argument); case this -> void__type: return mod((int) *((void**) this -> value), argument); case this -> wchar_t__type: return mod((long) *((wchar_t*) this -> value), argument); } return mod(*((double*) this -> value), argument); }
            friend inline primitive operator %(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return mod(argumentA, (unsigned short) *((boolean*) argumentB.value)); case argumentB.char__type: return mod(argumentA, (short) *((char*) argumentB.value)); case argumentB.char8_t__type: return mod(argumentA, (short) *((char8_t*) argumentB.value)); case argumentB.char16_t__type: return mod(argumentA, (short) *((char16_t*) argumentB.value)); case argumentB.char32_t__type: return mod(argumentA, (int) *((char32_t*) argumentB.value)); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return mod(argumentA, *((int*) argumentB.value)); case argumentB.long__type: return mod(argumentA, *((long*) argumentB.value)); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return mod(argumentA, *((long long*) argumentB.value)); case argumentB.short__type: return mod(argumentA, *((short*) argumentB.value)); case argumentB.void__type: return mod(argumentA, (int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return mod(argumentA, (long) *((wchar_t*) argumentB.value)); } return mod(argumentA, *((double*) argumentB.value)); }
            friend inline primitive operator %(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return mod(argumentA, (unsigned short) *((boolean*) argumentB.value)); case argumentB.char__type: return mod(argumentA, (short) *((char*) argumentB.value)); case argumentB.char8_t__type: return mod(argumentA, (short) *((char8_t*) argumentB.value)); case argumentB.char16_t__type: return mod(argumentA, (short) *((char16_t*) argumentB.value)); case argumentB.char32_t__type: return mod(argumentA, (int) *((char32_t*) argumentB.value)); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return mod(argumentA, *((int*) argumentB.value)); case argumentB.long__type: return mod(argumentA, *((long*) argumentB.value)); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return mod(argumentA, *((long long*) argumentB.value)); case argumentB.short__type: return mod(argumentA, *((short*) argumentB.value)); case argumentB.void__type: return mod(argumentA, (int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return mod(argumentA, (long) *((wchar_t*) argumentB.value)); } return mod(argumentA, *((double*) argumentB.value)); }
            friend inline primitive operator %(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return mod(argumentA, (unsigned short) *((boolean*) argumentB.value)); case argumentB.char__type: return mod(argumentA, (short) *((char*) argumentB.value)); case argumentB.char8_t__type: return mod(argumentA, (short) *((char8_t*) argumentB.value)); case argumentB.char16_t__type: return mod(argumentA, (short) *((char16_t*) argumentB.value)); case argumentB.char32_t__type: return mod(argumentA, (int) *((char32_t*) argumentB.value)); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return mod(argumentA, *((int*) argumentB.value)); case argumentB.long__type: return mod(argumentA, *((long*) argumentB.value)); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return mod(argumentA, *((long long*) argumentB.value)); case argumentB.short__type: return mod(argumentA, *((short*) argumentB.value)); case argumentB.void__type: return mod(argumentA, (int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return mod(argumentA, (long) *((wchar_t*) argumentB.value)); } return mod(argumentA, *((double*) argumentB.value)); }
            friend inline primitive operator %(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return mod(argumentA, (unsigned short) *((boolean*) argumentB.value)); case argumentB.char__type: return mod(argumentA, (short) *((char*) argumentB.value)); case argumentB.char8_t__type: return mod(argumentA, (short) *((char8_t*) argumentB.value)); case argumentB.char16_t__type: return mod(argumentA, (short) *((char16_t*) argumentB.value)); case argumentB.char32_t__type: return mod(argumentA, (int) *((char32_t*) argumentB.value)); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return mod(argumentA, *((int*) argumentB.value)); case argumentB.long__type: return mod(argumentA, *((long*) argumentB.value)); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return mod(argumentA, *((long long*) argumentB.value)); case argumentB.short__type: return mod(argumentA, *((short*) argumentB.value)); case argumentB.void__type: return mod(argumentA, (int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return mod(argumentA, (long) *((wchar_t*) argumentB.value)); } return mod(argumentA, *((double*) argumentB.value)); }

            inline primitive operator %(const float argument) const { switch (this -> type) { case this -> boolean__type: return mod((unsigned short) *((boolean*) this -> value), argument); case this -> char__type: return mod((short) *((char*) this -> value), argument); case this -> char8_t__type: return mod((short) *((char8_t*) this -> value), argument); case this -> char16_t__type: return mod((short) *((char16_t*) this -> value), argument); case this -> char32_t__type: return mod((int) *((char32_t*) this -> value), argument); case this -> double__type: return mod(*((double*) this -> value), argument); case this -> float__type: return mod(*((float*) this -> value), argument); case this -> int__type: return mod(*((int*) this -> value), argument); case this -> long__type: return mod(*((long*) this -> value), argument); case this -> long_double__type: return mod(*((long double*) this -> value), argument); case this -> long_long__type: return mod(*((long long*) this -> value), argument); case this -> short__type: return mod(*((short*) this -> value), argument); case this -> void__type: return mod((int) *((void**) this -> value), argument); case this -> wchar_t__type: return mod((long) *((wchar_t*) this -> value), argument); } return mod(*((float*) this -> value), argument); }
            friend inline primitive operator %(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return mod(argumentA, (unsigned short) *((boolean*) argumentB.value)); case argumentB.char__type: return mod(argumentA, (short) *((char*) argumentB.value)); case argumentB.char8_t__type: return mod(argumentA, (short) *((char8_t*) argumentB.value)); case argumentB.char16_t__type: return mod(argumentA, (short) *((char16_t*) argumentB.value)); case argumentB.char32_t__type: return mod(argumentA, (int) *((char32_t*) argumentB.value)); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return mod(argumentA, *((int*) argumentB.value)); case argumentB.long__type: return mod(argumentA, *((long*) argumentB.value)); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return mod(argumentA, *((long long*) argumentB.value)); case argumentB.short__type: return mod(argumentA, *((short*) argumentB.value)); case argumentB.void__type: return mod(argumentA, (int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return mod(argumentA, (long) *((wchar_t*) argumentB.value)); } return mod(argumentA, *((float*) argumentB.value)); }
            friend inline primitive operator %(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return mod(argumentA, (unsigned short) *((boolean*) argumentB.value)); case argumentB.char__type: return mod(argumentA, (short) *((char*) argumentB.value)); case argumentB.char8_t__type: return mod(argumentA, (short) *((char8_t*) argumentB.value)); case argumentB.char16_t__type: return mod(argumentA, (short) *((char16_t*) argumentB.value)); case argumentB.char32_t__type: return mod(argumentA, (int) *((char32_t*) argumentB.value)); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return mod(argumentA, *((int*) argumentB.value)); case argumentB.long__type: return mod(argumentA, *((long*) argumentB.value)); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return mod(argumentA, *((long long*) argumentB.value)); case argumentB.short__type: return mod(argumentA, *((short*) argumentB.value)); case argumentB.void__type: return mod(argumentA, (int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return mod(argumentA, (long) *((wchar_t*) argumentB.value)); } return mod(argumentA, *((float*) argumentB.value)); }
            friend inline primitive operator %(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return mod(argumentA, (unsigned short) *((boolean*) argumentB.value)); case argumentB.char__type: return mod(argumentA, (short) *((char*) argumentB.value)); case argumentB.char8_t__type: return mod(argumentA, (short) *((char8_t*) argumentB.value)); case argumentB.char16_t__type: return mod(argumentA, (short) *((char16_t*) argumentB.value)); case argumentB.char32_t__type: return mod(argumentA, (int) *((char32_t*) argumentB.value)); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return mod(argumentA, *((int*) argumentB.value)); case argumentB.long__type: return mod(argumentA, *((long*) argumentB.value)); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return mod(argumentA, *((long long*) argumentB.value)); case argumentB.short__type: return mod(argumentA, *((short*) argumentB.value)); case argumentB.void__type: return mod(argumentA, (int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return mod(argumentA, (long) *((wchar_t*) argumentB.value)); } return mod(argumentA, *((float*) argumentB.value)); }
            friend inline primitive operator %(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return mod(argumentA, (unsigned short) *((boolean*) argumentB.value)); case argumentB.char__type: return mod(argumentA, (short) *((char*) argumentB.value)); case argumentB.char8_t__type: return mod(argumentA, (short) *((char8_t*) argumentB.value)); case argumentB.char16_t__type: return mod(argumentA, (short) *((char16_t*) argumentB.value)); case argumentB.char32_t__type: return mod(argumentA, (int) *((char32_t*) argumentB.value)); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return mod(argumentA, *((int*) argumentB.value)); case argumentB.long__type: return mod(argumentA, *((long*) argumentB.value)); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return mod(argumentA, *((long long*) argumentB.value)); case argumentB.short__type: return mod(argumentA, *((short*) argumentB.value)); case argumentB.void__type: return mod(argumentA, (int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return mod(argumentA, (long) *((wchar_t*) argumentB.value)); } return mod(argumentA, *((float*) argumentB.value)); }

            inline primitive operator %(const int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) % argument; case this -> char__type: return *((char*) this -> value) % argument; case this -> char8_t__type: return *((char8_t*) this -> value) % argument; case this -> char16_t__type: return *((char16_t*) this -> value) % argument; case this -> char32_t__type: return *((char32_t*) this -> value) % argument; case this -> double__type: return mod(*((double*) this -> value), argument); case this -> float__type: return mod(*((float*) this -> value), argument); case this -> int__type: return *((int*) this -> value) % argument; case this -> long__type: return *((long*) this -> value) % argument; case this -> long_double__type: return mod(*((long double*) this -> value), argument); case this -> long_long__type: return *((long long*) this -> value) % argument; case this -> short__type: return *((short*) this -> value) % argument; case this -> void__type: return ((int) *((void**) this -> value)) % argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) % argument; } return *((int*) this -> value) % argument; }
            friend inline primitive operator %(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((int*) argumentB.value); }
            friend inline primitive operator %(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((int*) argumentB.value); }
            friend inline primitive operator %(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((int*) argumentB.value); }
            friend inline primitive operator %(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((int*) argumentB.value); }

            inline primitive operator %(const long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) % argument; case this -> char__type: return *((char*) this -> value) % argument; case this -> char8_t__type: return *((char8_t*) this -> value) % argument; case this -> char16_t__type: return *((char16_t*) this -> value) % argument; case this -> char32_t__type: return *((char32_t*) this -> value) % argument; case this -> double__type: return mod(*((double*) this -> value), argument); case this -> float__type: return mod(*((float*) this -> value), argument); case this -> int__type: return *((int*) this -> value) % argument; case this -> long__type: return *((long*) this -> value) % argument; case this -> long_double__type: return mod(*((long double*) this -> value), argument); case this -> long_long__type: return *((long long*) this -> value) % argument; case this -> short__type: return *((short*) this -> value) % argument; case this -> void__type: return ((int) *((void**) this -> value)) % argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) % argument; } return *((long*) this -> value) % argument; }
            friend inline primitive operator %(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((long*) argumentB.value); }
            friend inline primitive operator %(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((long*) argumentB.value); }
            friend inline primitive operator %(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((long*) argumentB.value); }
            friend inline primitive operator %(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((long*) argumentB.value); }

            inline primitive operator %(const long double argument) const { switch (this -> type) { case this -> boolean__type: return mod((unsigned short) *((boolean*) this -> value), argument); case this -> char__type: return mod((short) *((char*) this -> value), argument); case this -> char8_t__type: return mod((short) *((char8_t*) this -> value), argument); case this -> char16_t__type: return mod((short) *((char16_t*) this -> value), argument); case this -> char32_t__type: return mod((int) *((char32_t*) this -> value), argument); case this -> double__type: return mod(*((double*) this -> value), argument); case this -> float__type: return mod(*((float*) this -> value), argument); case this -> int__type: return mod(*((int*) this -> value), argument); case this -> long__type: return mod(*((long*) this -> value), argument); case this -> long_double__type: return mod(*((long double*) this -> value), argument); case this -> long_long__type: return mod(*((long long*) this -> value), argument); case this -> short__type: return mod(*((short*) this -> value), argument); case this -> void__type: return mod((int) *((void**) this -> value), argument); case this -> wchar_t__type: return mod((long) *((wchar_t*) this -> value), argument); } return mod(*((long double*) this -> value), argument); }
            friend inline primitive operator %(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return mod(argumentA, (unsigned short) *((boolean*) argumentB.value)); case argumentB.char__type: return mod(argumentA, (short) *((char*) argumentB.value)); case argumentB.char8_t__type: return mod(argumentA, (short) *((char8_t*) argumentB.value)); case argumentB.char16_t__type: return mod(argumentA, (short) *((char16_t*) argumentB.value)); case argumentB.char32_t__type: return mod(argumentA, (int) *((char32_t*) argumentB.value)); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return mod(argumentA, *((int*) argumentB.value)); case argumentB.long__type: return mod(argumentA, *((long*) argumentB.value)); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return mod(argumentA, *((long long*) argumentB.value)); case argumentB.short__type: return mod(argumentA, *((short*) argumentB.value)); case argumentB.void__type: return mod(argumentA, (int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return mod(argumentA, (long) *((wchar_t*) argumentB.value)); } return mod(argumentA, *((long double*) argumentB.value)); }
            friend inline primitive operator %(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return mod(argumentA, (unsigned short) *((boolean*) argumentB.value)); case argumentB.char__type: return mod(argumentA, (short) *((char*) argumentB.value)); case argumentB.char8_t__type: return mod(argumentA, (short) *((char8_t*) argumentB.value)); case argumentB.char16_t__type: return mod(argumentA, (short) *((char16_t*) argumentB.value)); case argumentB.char32_t__type: return mod(argumentA, (int) *((char32_t*) argumentB.value)); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return mod(argumentA, *((int*) argumentB.value)); case argumentB.long__type: return mod(argumentA, *((long*) argumentB.value)); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return mod(argumentA, *((long long*) argumentB.value)); case argumentB.short__type: return mod(argumentA, *((short*) argumentB.value)); case argumentB.void__type: return mod(argumentA, (int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return mod(argumentA, (long) *((wchar_t*) argumentB.value)); } return mod(argumentA, *((long double*) argumentB.value)); }
            friend inline primitive operator %(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return mod(argumentA, (unsigned short) *((boolean*) argumentB.value)); case argumentB.char__type: return mod(argumentA, (short) *((char*) argumentB.value)); case argumentB.char8_t__type: return mod(argumentA, (short) *((char8_t*) argumentB.value)); case argumentB.char16_t__type: return mod(argumentA, (short) *((char16_t*) argumentB.value)); case argumentB.char32_t__type: return mod(argumentA, (int) *((char32_t*) argumentB.value)); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return mod(argumentA, *((int*) argumentB.value)); case argumentB.long__type: return mod(argumentA, *((long*) argumentB.value)); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return mod(argumentA, *((long long*) argumentB.value)); case argumentB.short__type: return mod(argumentA, *((short*) argumentB.value)); case argumentB.void__type: return mod(argumentA, (int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return mod(argumentA, (long) *((wchar_t*) argumentB.value)); } return mod(argumentA, *((long double*) argumentB.value)); }
            friend inline primitive operator %(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return mod(argumentA, (unsigned short) *((boolean*) argumentB.value)); case argumentB.char__type: return mod(argumentA, (short) *((char*) argumentB.value)); case argumentB.char8_t__type: return mod(argumentA, (short) *((char8_t*) argumentB.value)); case argumentB.char16_t__type: return mod(argumentA, (short) *((char16_t*) argumentB.value)); case argumentB.char32_t__type: return mod(argumentA, (int) *((char32_t*) argumentB.value)); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return mod(argumentA, *((int*) argumentB.value)); case argumentB.long__type: return mod(argumentA, *((long*) argumentB.value)); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return mod(argumentA, *((long long*) argumentB.value)); case argumentB.short__type: return mod(argumentA, *((short*) argumentB.value)); case argumentB.void__type: return mod(argumentA, (int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return mod(argumentA, (long) *((wchar_t*) argumentB.value)); } return mod(argumentA, *((long double*) argumentB.value)); }

            inline primitive operator %(const long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) % argument; case this -> char__type: return *((char*) this -> value) % argument; case this -> char8_t__type: return *((char8_t*) this -> value) % argument; case this -> char16_t__type: return *((char16_t*) this -> value) % argument; case this -> char32_t__type: return *((char32_t*) this -> value) % argument; case this -> double__type: return mod(*((double*) this -> value), argument); case this -> float__type: return mod(*((float*) this -> value), argument); case this -> int__type: return *((int*) this -> value) % argument; case this -> long__type: return *((long*) this -> value) % argument; case this -> long_double__type: return mod(*((long double*) this -> value), argument); case this -> long_long__type: return *((long long*) this -> value) % argument; case this -> short__type: return *((short*) this -> value) % argument; case this -> void__type: return ((int) *((void**) this -> value)) % argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) % argument; } return *((long long*) this -> value) % argument; }
            friend inline primitive operator %(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((long long*) argumentB.value); }
            friend inline primitive operator %(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((long long*) argumentB.value); }
            friend inline primitive operator %(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((long long*) argumentB.value); }
            friend inline primitive operator %(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((long long*) argumentB.value); }

            inline primitive operator %(const short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) % argument; case this -> char__type: return *((char*) this -> value) % argument; case this -> char8_t__type: return *((char8_t*) this -> value) % argument; case this -> char16_t__type: return *((char16_t*) this -> value) % argument; case this -> char32_t__type: return *((char32_t*) this -> value) % argument; case this -> double__type: return mod(*((double*) this -> value), argument); case this -> float__type: return mod(*((float*) this -> value), argument); case this -> int__type: return *((int*) this -> value) % argument; case this -> long__type: return *((long*) this -> value) % argument; case this -> long_double__type: return mod(*((long double*) this -> value), argument); case this -> long_long__type: return *((long long*) this -> value) % argument; case this -> short__type: return *((short*) this -> value) % argument; case this -> void__type: return ((int) *((void**) this -> value)) % argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) % argument; } return *((short*) this -> value) % argument; }
            friend inline primitive operator %(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((short*) argumentB.value); }
            friend inline primitive operator %(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((short*) argumentB.value); }
            friend inline primitive operator %(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((short*) argumentB.value); }
            friend inline primitive operator %(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((short*) argumentB.value); }

            inline primitive operator %(const signed char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) % argument; case this -> char__type: return *((char*) this -> value) % argument; case this -> char8_t__type: return *((char8_t*) this -> value) % argument; case this -> char16_t__type: return *((char16_t*) this -> value) % argument; case this -> char32_t__type: return *((char32_t*) this -> value) % argument; case this -> double__type: return mod(*((double*) this -> value), argument); case this -> float__type: return mod(*((float*) this -> value), argument); case this -> int__type: return *((int*) this -> value) % argument; case this -> long__type: return *((long*) this -> value) % argument; case this -> long_double__type: return mod(*((long double*) this -> value), argument); case this -> long_long__type: return *((long long*) this -> value) % argument; case this -> short__type: return *((short*) this -> value) % argument; case this -> void__type: return ((int) *((void**) this -> value)) % argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) % argument; } return *((signed char*) this -> value) % argument; }
            friend inline primitive operator %(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((signed char*) argumentB.value); }
            friend inline primitive operator %(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((signed char*) argumentB.value); }
            friend inline primitive operator %(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((signed char*) argumentB.value); }
            friend inline primitive operator %(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((signed char*) argumentB.value); }

            inline primitive operator %(const unsigned char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) % argument; case this -> char__type: return *((char*) this -> value) % argument; case this -> char8_t__type: return *((char8_t*) this -> value) % argument; case this -> char16_t__type: return *((char16_t*) this -> value) % argument; case this -> char32_t__type: return *((char32_t*) this -> value) % argument; case this -> double__type: return mod(*((double*) this -> value), argument); case this -> float__type: return mod(*((float*) this -> value), argument); case this -> int__type: return *((int*) this -> value) % argument; case this -> long__type: return *((long*) this -> value) % argument; case this -> long_double__type: return mod(*((long double*) this -> value), argument); case this -> long_long__type: return *((long long*) this -> value) % argument; case this -> short__type: return *((short*) this -> value) % argument; case this -> void__type: return ((int) *((void**) this -> value)) % argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) % argument; } return *((unsigned char*) this -> value) % argument; }
            friend inline primitive operator %(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((unsigned char*) argumentB.value); }
            friend inline primitive operator %(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((unsigned char*) argumentB.value); }
            friend inline primitive operator %(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((unsigned char*) argumentB.value); }
            friend inline primitive operator %(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((unsigned char*) argumentB.value); }

            inline primitive operator %(const unsigned int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) % argument; case this -> char__type: return *((char*) this -> value) % argument; case this -> char8_t__type: return *((char8_t*) this -> value) % argument; case this -> char16_t__type: return *((char16_t*) this -> value) % argument; case this -> char32_t__type: return *((char32_t*) this -> value) % argument; case this -> double__type: return mod(*((double*) this -> value), argument); case this -> float__type: return mod(*((float*) this -> value), argument); case this -> int__type: return *((int*) this -> value) % argument; case this -> long__type: return *((long*) this -> value) % argument; case this -> long_double__type: return mod(*((long double*) this -> value), argument); case this -> long_long__type: return *((long long*) this -> value) % argument; case this -> short__type: return *((short*) this -> value) % argument; case this -> void__type: return ((int) *((void**) this -> value)) % argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) % argument; } return *((unsigned int*) this -> value) % argument; }
            friend inline primitive operator %(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((unsigned int*) argumentB.value); }
            friend inline primitive operator %(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((unsigned int*) argumentB.value); }
            friend inline primitive operator %(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((unsigned int*) argumentB.value); }
            friend inline primitive operator %(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((unsigned int*) argumentB.value); }

            inline primitive operator %(const unsigned long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) % argument; case this -> char__type: return *((char*) this -> value) % argument; case this -> char8_t__type: return *((char8_t*) this -> value) % argument; case this -> char16_t__type: return *((char16_t*) this -> value) % argument; case this -> char32_t__type: return *((char32_t*) this -> value) % argument; case this -> double__type: return mod(*((double*) this -> value), argument); case this -> float__type: return mod(*((float*) this -> value), argument); case this -> int__type: return *((int*) this -> value) % argument; case this -> long__type: return *((long*) this -> value) % argument; case this -> long_double__type: return mod(*((long double*) this -> value), argument); case this -> long_long__type: return *((long long*) this -> value) % argument; case this -> short__type: return *((short*) this -> value) % argument; case this -> void__type: return ((int) *((void**) this -> value)) % argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) % argument; } return *((unsigned long*) this -> value) % argument; }
            friend inline primitive operator %(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((unsigned long*) argumentB.value); }
            friend inline primitive operator %(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((unsigned long*) argumentB.value); }
            friend inline primitive operator %(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((unsigned long*) argumentB.value); }
            friend inline primitive operator %(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((unsigned long*) argumentB.value); }

            inline primitive operator %(const unsigned long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) % argument; case this -> char__type: return *((char*) this -> value) % argument; case this -> char8_t__type: return *((char8_t*) this -> value) % argument; case this -> char16_t__type: return *((char16_t*) this -> value) % argument; case this -> char32_t__type: return *((char32_t*) this -> value) % argument; case this -> double__type: return mod(*((double*) this -> value), argument); case this -> float__type: return mod(*((float*) this -> value), argument); case this -> int__type: return *((int*) this -> value) % argument; case this -> long__type: return *((long*) this -> value) % argument; case this -> long_double__type: return mod(*((long double*) this -> value), argument); case this -> long_long__type: return *((long long*) this -> value) % argument; case this -> short__type: return *((short*) this -> value) % argument; case this -> void__type: return ((int) *((void**) this -> value)) % argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) % argument; } return *((unsigned long long*) this -> value) % argument; }
            friend inline primitive operator %(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((unsigned long long*) argumentB.value); }
            friend inline primitive operator %(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((unsigned long long*) argumentB.value); }
            friend inline primitive operator %(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((unsigned long long*) argumentB.value); }
            friend inline primitive operator %(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((unsigned long long*) argumentB.value); }

            inline primitive operator %(const unsigned short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) % argument; case this -> char__type: return *((char*) this -> value) % argument; case this -> char8_t__type: return *((char8_t*) this -> value) % argument; case this -> char16_t__type: return *((char16_t*) this -> value) % argument; case this -> char32_t__type: return *((char32_t*) this -> value) % argument; case this -> double__type: return mod(*((double*) this -> value), argument); case this -> float__type: return mod(*((float*) this -> value), argument); case this -> int__type: return *((int*) this -> value) % argument; case this -> long__type: return *((long*) this -> value) % argument; case this -> long_double__type: return mod(*((long double*) this -> value), argument); case this -> long_long__type: return *((long long*) this -> value) % argument; case this -> short__type: return *((short*) this -> value) % argument; case this -> void__type: return ((int) *((void**) this -> value)) % argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) % argument; } return *((unsigned short*) this -> value) % argument; }
            friend inline primitive operator %(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((unsigned short*) argumentB.value); }
            friend inline primitive operator %(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((unsigned short*) argumentB.value); }
            friend inline primitive operator %(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((unsigned short*) argumentB.value); }
            friend inline primitive operator %(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((unsigned short*) argumentB.value); }

            inline primitive operator %(void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) % (int) argument; case this -> char__type: return *((char*) this -> value) % (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) % (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) % (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) % (int) argument; case this -> double__type: return mod(*((double*) this -> value), (int) argument); case this -> float__type: return mod(*((float*) this -> value), (int) argument); case this -> int__type: return *((int*) this -> value) % (int) argument; case this -> long__type: return *((long*) this -> value) % (int) argument; case this -> long_double__type: return mod(*((long double*) this -> value), (int) argument); case this -> long_long__type: return *((long long*) this -> value) % (int) argument; case this -> short__type: return *((short*) this -> value) % (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) % (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) % (int) argument; } return *((int*) this -> value) % (int) argument; }
            friend inline primitive operator %(void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) % *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) % *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) % *((char32_t*) argumentB.value); case argumentB.double__type: return mod((int) argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod((int) argumentA, *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) % *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) % *((long*) argumentB.value); case argumentB.long_double__type: return mod((int) argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) % *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) % *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) % ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) % *((wchar_t*) argumentB.value); } return ((int) argumentA) % *((int*) argumentB.value); }
            friend inline primitive operator %(void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) % *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) % *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) % *((char32_t*) argumentB.value); case argumentB.double__type: return mod((int) argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod((int) argumentA, *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) % *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) % *((long*) argumentB.value); case argumentB.long_double__type: return mod((int) argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) % *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) % *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) % ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) % *((wchar_t*) argumentB.value); } return ((int) argumentA) % *((int*) argumentB.value); }
            friend inline primitive operator %(void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) % *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) % *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) % *((char32_t*) argumentB.value); case argumentB.double__type: return mod((int) argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod((int) argumentA, *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) % *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) % *((long*) argumentB.value); case argumentB.long_double__type: return mod((int) argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) % *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) % *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) % ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) % *((wchar_t*) argumentB.value); } return ((int) argumentA) % *((int*) argumentB.value); }
            friend inline primitive operator %(void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) % *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) % *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) % *((char32_t*) argumentB.value); case argumentB.double__type: return mod((int) argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod((int) argumentA, *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) % *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) % *((long*) argumentB.value); case argumentB.long_double__type: return mod((int) argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) % *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) % *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) % ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) % *((wchar_t*) argumentB.value); } return ((int) argumentA) % *((int*) argumentB.value); }

            inline primitive operator %(const void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) % (int) argument; case this -> char__type: return *((char*) this -> value) % (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) % (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) % (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) % (int) argument; case this -> double__type: return mod(*((double*) this -> value), (int) argument); case this -> float__type: return mod(*((float*) this -> value), (int) argument); case this -> int__type: return *((int*) this -> value) % (int) argument; case this -> long__type: return *((long*) this -> value) % (int) argument; case this -> long_double__type: return mod(*((long double*) this -> value), (int) argument); case this -> long_long__type: return *((long long*) this -> value) % (int) argument; case this -> short__type: return *((short*) this -> value) % (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) % (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) % (int) argument; } return *((int*) this -> value) % (int) argument; }
            friend inline primitive operator %(const void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) % *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) % *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) % *((char32_t*) argumentB.value); case argumentB.double__type: return mod((int) argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod((int) argumentA, *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) % *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) % *((long*) argumentB.value); case argumentB.long_double__type: return mod((int) argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) % *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) % *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) % ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) % *((wchar_t*) argumentB.value); } return ((int) argumentA) % *((int*) argumentB.value); }
            friend inline primitive operator %(const void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) % *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) % *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) % *((char32_t*) argumentB.value); case argumentB.double__type: return mod((int) argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod((int) argumentA, *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) % *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) % *((long*) argumentB.value); case argumentB.long_double__type: return mod((int) argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) % *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) % *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) % ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) % *((wchar_t*) argumentB.value); } return ((int) argumentA) % *((int*) argumentB.value); }
            friend inline primitive operator %(const void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) % *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) % *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) % *((char32_t*) argumentB.value); case argumentB.double__type: return mod((int) argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod((int) argumentA, *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) % *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) % *((long*) argumentB.value); case argumentB.long_double__type: return mod((int) argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) % *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) % *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) % ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) % *((wchar_t*) argumentB.value); } return ((int) argumentA) % *((int*) argumentB.value); }
            friend inline primitive operator %(const void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) % *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) % *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) % *((char32_t*) argumentB.value); case argumentB.double__type: return mod((int) argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod((int) argumentA, *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) % *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) % *((long*) argumentB.value); case argumentB.long_double__type: return mod((int) argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) % *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) % *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) % ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) % *((wchar_t*) argumentB.value); } return ((int) argumentA) % *((int*) argumentB.value); }

            inline primitive operator %(const wchar_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) % argument; case this -> char__type: return *((char*) this -> value) % argument; case this -> char8_t__type: return *((char8_t*) this -> value) % argument; case this -> char16_t__type: return *((char16_t*) this -> value) % argument; case this -> char32_t__type: return *((char32_t*) this -> value) % argument; case this -> double__type: return mod(*((double*) this -> value), argument); case this -> float__type: return mod(*((float*) this -> value), argument); case this -> int__type: return *((int*) this -> value) % argument; case this -> long__type: return *((long*) this -> value) % argument; case this -> long_double__type: return mod(*((long double*) this -> value), argument); case this -> long_long__type: return *((long long*) this -> value) % argument; case this -> short__type: return *((short*) this -> value) % argument; case this -> void__type: return ((int) *((void**) this -> value)) % argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) % argument; } return *((wchar_t*) this -> value) % argument; }
            friend inline primitive operator %(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((wchar_t*) argumentB.value); }
            friend inline primitive operator %(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((wchar_t*) argumentB.value); }
            friend inline primitive operator %(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((wchar_t*) argumentB.value); }
            friend inline primitive operator %(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA % *((boolean*) argumentB.value); case argumentB.char__type: return argumentA % *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA % *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA % *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA % *((char32_t*) argumentB.value); case argumentB.double__type: return mod(argumentA, *((double*) argumentB.value)); case argumentB.float__type: return mod(argumentA, *((float*) argumentB.value)); case argumentB.int__type: return argumentA % *((int*) argumentB.value); case argumentB.long__type: return argumentA % *((long*) argumentB.value); case argumentB.long_double__type: return mod(argumentA, *((long double*) argumentB.value)); case argumentB.long_long__type: return argumentA % *((long long*) argumentB.value); case argumentB.short__type: return argumentA % *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) % argumentA; case argumentB.wchar_t__type: return argumentA % *((wchar_t*) argumentB.value); } return argumentA % *((wchar_t*) argumentB.value); }

            // [^]
            inline primitive operator ^(const boolean argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) ^ argument; case this -> char__type: return *((char*) this -> value) ^ argument; case this -> char8_t__type: return *((char8_t*) this -> value) ^ argument; case this -> char16_t__type: return *((char16_t*) this -> value) ^ argument; case this -> char32_t__type: return *((char32_t*) this -> value) ^ argument; case this -> double__type: return ((long) *((double*) this -> value)) ^ argument; case this -> float__type: return ((int) *((float*) this -> value)) ^ argument; case this -> int__type: return *((int*) this -> value) ^ argument; case this -> long__type: return *((long*) this -> value) ^ argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) ^ argument; case this -> long_long__type: return *((long long*) this -> value) ^ argument; case this -> short__type: return *((short*) this -> value) ^ argument; case this -> void__type: return ((int) *((void**) this -> value)) ^ argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) ^ argument; } return *((boolean*) this -> value) ^ argument; }
            friend inline primitive operator ^(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((boolean*) argumentB.value); }
            friend inline primitive operator ^(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((boolean*) argumentB.value); }
            friend inline primitive operator ^(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((boolean*) argumentB.value); }
            friend inline primitive operator ^(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((boolean*) argumentB.value); }

            inline primitive operator ^(const char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) ^ argument; case this -> char__type: return *((char*) this -> value) ^ argument; case this -> char8_t__type: return *((char8_t*) this -> value) ^ argument; case this -> char16_t__type: return *((char16_t*) this -> value) ^ argument; case this -> char32_t__type: return *((char32_t*) this -> value) ^ argument; case this -> double__type: return ((long) *((double*) this -> value)) ^ argument; case this -> float__type: return ((int) *((float*) this -> value)) ^ argument; case this -> int__type: return *((int*) this -> value) ^ argument; case this -> long__type: return *((long*) this -> value) ^ argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) ^ argument; case this -> long_long__type: return *((long long*) this -> value) ^ argument; case this -> short__type: return *((short*) this -> value) ^ argument; case this -> void__type: return ((int) *((void**) this -> value)) ^ argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) ^ argument; } return *((char*) this -> value) ^ argument; }
            friend inline primitive operator ^(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((char*) argumentB.value); }
            friend inline primitive operator ^(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((char*) argumentB.value); }
            friend inline primitive operator ^(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((char*) argumentB.value); }
            friend inline primitive operator ^(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((char*) argumentB.value); }

            inline primitive operator ^(const char8_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) ^ argument; case this -> char__type: return *((char*) this -> value) ^ argument; case this -> char8_t__type: return *((char8_t*) this -> value) ^ argument; case this -> char16_t__type: return *((char16_t*) this -> value) ^ argument; case this -> char32_t__type: return *((char32_t*) this -> value) ^ argument; case this -> double__type: return ((long) *((double*) this -> value)) ^ argument; case this -> float__type: return ((int) *((float*) this -> value)) ^ argument; case this -> int__type: return *((int*) this -> value) ^ argument; case this -> long__type: return *((long*) this -> value) ^ argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) ^ argument; case this -> long_long__type: return *((long long*) this -> value) ^ argument; case this -> short__type: return *((short*) this -> value) ^ argument; case this -> void__type: return ((int) *((void**) this -> value)) ^ argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) ^ argument; } return *((char8_t*) this -> value) ^ argument; }
            friend inline primitive operator ^(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((char8_t*) argumentB.value); }
            friend inline primitive operator ^(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((char8_t*) argumentB.value); }
            friend inline primitive operator ^(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((char8_t*) argumentB.value); }
            friend inline primitive operator ^(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((char8_t*) argumentB.value); }

            inline primitive operator ^(const char16_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) ^ argument; case this -> char__type: return *((char*) this -> value) ^ argument; case this -> char8_t__type: return *((char8_t*) this -> value) ^ argument; case this -> char16_t__type: return *((char16_t*) this -> value) ^ argument; case this -> char32_t__type: return *((char32_t*) this -> value) ^ argument; case this -> double__type: return ((long) *((double*) this -> value)) ^ argument; case this -> float__type: return ((int) *((float*) this -> value)) ^ argument; case this -> int__type: return *((int*) this -> value) ^ argument; case this -> long__type: return *((long*) this -> value) ^ argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) ^ argument; case this -> long_long__type: return *((long long*) this -> value) ^ argument; case this -> short__type: return *((short*) this -> value) ^ argument; case this -> void__type: return ((int) *((void**) this -> value)) ^ argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) ^ argument; } return *((char16_t*) this -> value) ^ argument; }
            friend inline primitive operator ^(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((char16_t*) argumentB.value); }
            friend inline primitive operator ^(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((char16_t*) argumentB.value); }
            friend inline primitive operator ^(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((char16_t*) argumentB.value); }
            friend inline primitive operator ^(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((char16_t*) argumentB.value); }

            inline primitive operator ^(const char32_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) ^ argument; case this -> char__type: return *((char*) this -> value) ^ argument; case this -> char8_t__type: return *((char8_t*) this -> value) ^ argument; case this -> char16_t__type: return *((char16_t*) this -> value) ^ argument; case this -> char32_t__type: return *((char32_t*) this -> value) ^ argument; case this -> double__type: return ((long) *((double*) this -> value)) ^ argument; case this -> float__type: return ((int) *((float*) this -> value)) ^ argument; case this -> int__type: return *((int*) this -> value) ^ argument; case this -> long__type: return *((long*) this -> value) ^ argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) ^ argument; case this -> long_long__type: return *((long long*) this -> value) ^ argument; case this -> short__type: return *((short*) this -> value) ^ argument; case this -> void__type: return ((int) *((void**) this -> value)) ^ argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) ^ argument; } return *((char32_t*) this -> value) ^ argument; }
            friend inline primitive operator ^(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((char32_t*) argumentB.value); }
            friend inline primitive operator ^(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((char32_t*) argumentB.value); }
            friend inline primitive operator ^(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((char32_t*) argumentB.value); }
            friend inline primitive operator ^(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((char32_t*) argumentB.value); }

            inline primitive operator ^(const int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) ^ argument; case this -> char__type: return *((char*) this -> value) ^ argument; case this -> char8_t__type: return *((char8_t*) this -> value) ^ argument; case this -> char16_t__type: return *((char16_t*) this -> value) ^ argument; case this -> char32_t__type: return *((char32_t*) this -> value) ^ argument; case this -> double__type: return ((long) *((double*) this -> value)) ^ argument; case this -> float__type: return ((int) *((float*) this -> value)) ^ argument; case this -> int__type: return *((int*) this -> value) ^ argument; case this -> long__type: return *((long*) this -> value) ^ argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) ^ argument; case this -> long_long__type: return *((long long*) this -> value) ^ argument; case this -> short__type: return *((short*) this -> value) ^ argument; case this -> void__type: return ((int) *((void**) this -> value)) ^ argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) ^ argument; } return *((int*) this -> value) ^ argument; }
            friend inline primitive operator ^(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((int*) argumentB.value); }
            friend inline primitive operator ^(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((int*) argumentB.value); }
            friend inline primitive operator ^(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((int*) argumentB.value); }
            friend inline primitive operator ^(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((int*) argumentB.value); }

            inline primitive operator ^(const long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) ^ argument; case this -> char__type: return *((char*) this -> value) ^ argument; case this -> char8_t__type: return *((char8_t*) this -> value) ^ argument; case this -> char16_t__type: return *((char16_t*) this -> value) ^ argument; case this -> char32_t__type: return *((char32_t*) this -> value) ^ argument; case this -> double__type: return ((long) *((double*) this -> value)) ^ argument; case this -> float__type: return ((int) *((float*) this -> value)) ^ argument; case this -> int__type: return *((int*) this -> value) ^ argument; case this -> long__type: return *((long*) this -> value) ^ argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) ^ argument; case this -> long_long__type: return *((long long*) this -> value) ^ argument; case this -> short__type: return *((short*) this -> value) ^ argument; case this -> void__type: return ((int) *((void**) this -> value)) ^ argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) ^ argument; } return *((long*) this -> value) ^ argument; }
            friend inline primitive operator ^(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((long*) argumentB.value); }
            friend inline primitive operator ^(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((long*) argumentB.value); }
            friend inline primitive operator ^(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((long*) argumentB.value); }
            friend inline primitive operator ^(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((long*) argumentB.value); }

            inline primitive operator ^(const long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) ^ argument; case this -> char__type: return *((char*) this -> value) ^ argument; case this -> char8_t__type: return *((char8_t*) this -> value) ^ argument; case this -> char16_t__type: return *((char16_t*) this -> value) ^ argument; case this -> char32_t__type: return *((char32_t*) this -> value) ^ argument; case this -> double__type: return ((long) *((double*) this -> value)) ^ argument; case this -> float__type: return ((int) *((float*) this -> value)) ^ argument; case this -> int__type: return *((int*) this -> value) ^ argument; case this -> long__type: return *((long*) this -> value) ^ argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) ^ argument; case this -> long_long__type: return *((long long*) this -> value) ^ argument; case this -> short__type: return *((short*) this -> value) ^ argument; case this -> void__type: return ((int) *((void**) this -> value)) ^ argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) ^ argument; } return *((long long*) this -> value) ^ argument; }
            friend inline primitive operator ^(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((long long*) argumentB.value); }
            friend inline primitive operator ^(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((long long*) argumentB.value); }
            friend inline primitive operator ^(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((long long*) argumentB.value); }
            friend inline primitive operator ^(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((long long*) argumentB.value); }

            inline primitive operator ^(const short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) ^ argument; case this -> char__type: return *((char*) this -> value) ^ argument; case this -> char8_t__type: return *((char8_t*) this -> value) ^ argument; case this -> char16_t__type: return *((char16_t*) this -> value) ^ argument; case this -> char32_t__type: return *((char32_t*) this -> value) ^ argument; case this -> double__type: return ((long) *((double*) this -> value)) ^ argument; case this -> float__type: return ((int) *((float*) this -> value)) ^ argument; case this -> int__type: return *((int*) this -> value) ^ argument; case this -> long__type: return *((long*) this -> value) ^ argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) ^ argument; case this -> long_long__type: return *((long long*) this -> value) ^ argument; case this -> short__type: return *((short*) this -> value) ^ argument; case this -> void__type: return ((int) *((void**) this -> value)) ^ argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) ^ argument; } return *((short*) this -> value) ^ argument; }
            friend inline primitive operator ^(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((short*) argumentB.value); }
            friend inline primitive operator ^(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((short*) argumentB.value); }
            friend inline primitive operator ^(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((short*) argumentB.value); }
            friend inline primitive operator ^(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((short*) argumentB.value); }

            inline primitive operator ^(const signed char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) ^ argument; case this -> char__type: return *((char*) this -> value) ^ argument; case this -> char8_t__type: return *((char8_t*) this -> value) ^ argument; case this -> char16_t__type: return *((char16_t*) this -> value) ^ argument; case this -> char32_t__type: return *((char32_t*) this -> value) ^ argument; case this -> double__type: return ((long) *((double*) this -> value)) ^ argument; case this -> float__type: return ((int) *((float*) this -> value)) ^ argument; case this -> int__type: return *((int*) this -> value) ^ argument; case this -> long__type: return *((long*) this -> value) ^ argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) ^ argument; case this -> long_long__type: return *((long long*) this -> value) ^ argument; case this -> short__type: return *((short*) this -> value) ^ argument; case this -> void__type: return ((int) *((void**) this -> value)) ^ argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) ^ argument; } return *((signed char*) this -> value) ^ argument; }
            friend inline primitive operator ^(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((signed char*) argumentB.value); }
            friend inline primitive operator ^(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((signed char*) argumentB.value); }
            friend inline primitive operator ^(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((signed char*) argumentB.value); }
            friend inline primitive operator ^(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((signed char*) argumentB.value); }

            inline primitive operator ^(const unsigned char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) ^ argument; case this -> char__type: return *((char*) this -> value) ^ argument; case this -> char8_t__type: return *((char8_t*) this -> value) ^ argument; case this -> char16_t__type: return *((char16_t*) this -> value) ^ argument; case this -> char32_t__type: return *((char32_t*) this -> value) ^ argument; case this -> double__type: return ((long) *((double*) this -> value)) ^ argument; case this -> float__type: return ((int) *((float*) this -> value)) ^ argument; case this -> int__type: return *((int*) this -> value) ^ argument; case this -> long__type: return *((long*) this -> value) ^ argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) ^ argument; case this -> long_long__type: return *((long long*) this -> value) ^ argument; case this -> short__type: return *((short*) this -> value) ^ argument; case this -> void__type: return ((int) *((void**) this -> value)) ^ argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) ^ argument; } return *((unsigned char*) this -> value) ^ argument; }
            friend inline primitive operator ^(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((unsigned char*) argumentB.value); }
            friend inline primitive operator ^(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((unsigned char*) argumentB.value); }
            friend inline primitive operator ^(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((unsigned char*) argumentB.value); }
            friend inline primitive operator ^(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((unsigned char*) argumentB.value); }

            inline primitive operator ^(const unsigned int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) ^ argument; case this -> char__type: return *((char*) this -> value) ^ argument; case this -> char8_t__type: return *((char8_t*) this -> value) ^ argument; case this -> char16_t__type: return *((char16_t*) this -> value) ^ argument; case this -> char32_t__type: return *((char32_t*) this -> value) ^ argument; case this -> double__type: return ((long) *((double*) this -> value)) ^ argument; case this -> float__type: return ((int) *((float*) this -> value)) ^ argument; case this -> int__type: return *((int*) this -> value) ^ argument; case this -> long__type: return *((long*) this -> value) ^ argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) ^ argument; case this -> long_long__type: return *((long long*) this -> value) ^ argument; case this -> short__type: return *((short*) this -> value) ^ argument; case this -> void__type: return ((int) *((void**) this -> value)) ^ argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) ^ argument; } return *((unsigned int*) this -> value) ^ argument; }
            friend inline primitive operator ^(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((unsigned int*) argumentB.value); }
            friend inline primitive operator ^(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((unsigned int*) argumentB.value); }
            friend inline primitive operator ^(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((unsigned int*) argumentB.value); }
            friend inline primitive operator ^(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((unsigned int*) argumentB.value); }

            inline primitive operator ^(const unsigned long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) ^ argument; case this -> char__type: return *((char*) this -> value) ^ argument; case this -> char8_t__type: return *((char8_t*) this -> value) ^ argument; case this -> char16_t__type: return *((char16_t*) this -> value) ^ argument; case this -> char32_t__type: return *((char32_t*) this -> value) ^ argument; case this -> double__type: return ((long) *((double*) this -> value)) ^ argument; case this -> float__type: return ((int) *((float*) this -> value)) ^ argument; case this -> int__type: return *((int*) this -> value) ^ argument; case this -> long__type: return *((long*) this -> value) ^ argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) ^ argument; case this -> long_long__type: return *((long long*) this -> value) ^ argument; case this -> short__type: return *((short*) this -> value) ^ argument; case this -> void__type: return ((int) *((void**) this -> value)) ^ argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) ^ argument; } return *((unsigned long*) this -> value) ^ argument; }
            friend inline primitive operator ^(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((unsigned long*) argumentB.value); }
            friend inline primitive operator ^(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((unsigned long*) argumentB.value); }
            friend inline primitive operator ^(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((unsigned long*) argumentB.value); }
            friend inline primitive operator ^(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((unsigned long*) argumentB.value); }

            inline primitive operator ^(const unsigned long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) ^ argument; case this -> char__type: return *((char*) this -> value) ^ argument; case this -> char8_t__type: return *((char8_t*) this -> value) ^ argument; case this -> char16_t__type: return *((char16_t*) this -> value) ^ argument; case this -> char32_t__type: return *((char32_t*) this -> value) ^ argument; case this -> double__type: return ((long) *((double*) this -> value)) ^ argument; case this -> float__type: return ((int) *((float*) this -> value)) ^ argument; case this -> int__type: return *((int*) this -> value) ^ argument; case this -> long__type: return *((long*) this -> value) ^ argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) ^ argument; case this -> long_long__type: return *((long long*) this -> value) ^ argument; case this -> short__type: return *((short*) this -> value) ^ argument; case this -> void__type: return ((int) *((void**) this -> value)) ^ argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) ^ argument; } return *((unsigned long long*) this -> value) ^ argument; }
            friend inline primitive operator ^(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((unsigned long long*) argumentB.value); }
            friend inline primitive operator ^(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((unsigned long long*) argumentB.value); }
            friend inline primitive operator ^(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((unsigned long long*) argumentB.value); }
            friend inline primitive operator ^(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((unsigned long long*) argumentB.value); }

            inline primitive operator ^(const unsigned short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) ^ argument; case this -> char__type: return *((char*) this -> value) ^ argument; case this -> char8_t__type: return *((char8_t*) this -> value) ^ argument; case this -> char16_t__type: return *((char16_t*) this -> value) ^ argument; case this -> char32_t__type: return *((char32_t*) this -> value) ^ argument; case this -> double__type: return ((long) *((double*) this -> value)) ^ argument; case this -> float__type: return ((int) *((float*) this -> value)) ^ argument; case this -> int__type: return *((int*) this -> value) ^ argument; case this -> long__type: return *((long*) this -> value) ^ argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) ^ argument; case this -> long_long__type: return *((long long*) this -> value) ^ argument; case this -> short__type: return *((short*) this -> value) ^ argument; case this -> void__type: return ((int) *((void**) this -> value)) ^ argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) ^ argument; } return *((unsigned short*) this -> value) ^ argument; }
            friend inline primitive operator ^(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((unsigned short*) argumentB.value); }
            friend inline primitive operator ^(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((unsigned short*) argumentB.value); }
            friend inline primitive operator ^(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((unsigned short*) argumentB.value); }
            friend inline primitive operator ^(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((unsigned short*) argumentB.value); }

            inline primitive operator ^(void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) ^ (int) argument; case this -> char__type: return *((char*) this -> value) ^ (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) ^ (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) ^ (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) ^ (int) argument; case this -> double__type: return ((long) *((double*) this -> value)) ^ (int) argument; case this -> float__type: return ((int) *((float*) this -> value)) ^ (int) argument; case this -> int__type: return *((int*) this -> value) ^ (int) argument; case this -> long__type: return *((long*) this -> value) ^ (int) argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) ^ (int) argument; case this -> long_long__type: return *((long long*) this -> value) ^ (int) argument; case this -> short__type: return *((short*) this -> value) ^ (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) ^ (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) ^ (int) argument; } return *((int*) this -> value) ^ (int) argument; }
            friend inline primitive operator ^(void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) ^ *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) ^ *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) ^ *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) ^ ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) ^ ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) ^ *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) ^ *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) ^ ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) ^ *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) ^ ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) ^ *((wchar_t*) argumentB.value); } return ((int) argumentA) ^ *((int*) argumentB.value); }
            friend inline primitive operator ^(void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) ^ *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) ^ *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) ^ *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) ^ ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) ^ ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) ^ *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) ^ *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) ^ ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) ^ *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) ^ ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) ^ *((wchar_t*) argumentB.value); } return ((int) argumentA) ^ *((int*) argumentB.value); }
            friend inline primitive operator ^(void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) ^ *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) ^ *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) ^ *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) ^ ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) ^ ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) ^ *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) ^ *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) ^ ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) ^ *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) ^ ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) ^ *((wchar_t*) argumentB.value); } return ((int) argumentA) ^ *((int*) argumentB.value); }
            friend inline primitive operator ^(void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) ^ *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) ^ *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) ^ *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) ^ ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) ^ ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) ^ *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) ^ *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) ^ ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) ^ *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) ^ ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) ^ *((wchar_t*) argumentB.value); } return ((int) argumentA) ^ *((int*) argumentB.value); }

            inline primitive operator ^(const void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) ^ (int) argument; case this -> char__type: return *((char*) this -> value) ^ (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) ^ (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) ^ (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) ^ (int) argument; case this -> double__type: return ((long) *((double*) this -> value)) ^ (int) argument; case this -> float__type: return ((int) *((float*) this -> value)) ^ (int) argument; case this -> int__type: return *((int*) this -> value) ^ (int) argument; case this -> long__type: return *((long*) this -> value) ^ (int) argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) ^ (int) argument; case this -> long_long__type: return *((long long*) this -> value) ^ (int) argument; case this -> short__type: return *((short*) this -> value) ^ (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) ^ (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) ^ (int) argument; } return *((int*) this -> value) ^ (int) argument; }
            friend inline primitive operator ^(const void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) ^ *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) ^ *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) ^ *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) ^ ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) ^ ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) ^ *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) ^ *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) ^ ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) ^ *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) ^ ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) ^ *((wchar_t*) argumentB.value); } return ((int) argumentA) ^ *((int*) argumentB.value); }
            friend inline primitive operator ^(const void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) ^ *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) ^ *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) ^ *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) ^ ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) ^ ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) ^ *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) ^ *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) ^ ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) ^ *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) ^ ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) ^ *((wchar_t*) argumentB.value); } return ((int) argumentA) ^ *((int*) argumentB.value); }
            friend inline primitive operator ^(const void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) ^ *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) ^ *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) ^ *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) ^ ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) ^ ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) ^ *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) ^ *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) ^ ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) ^ *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) ^ ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) ^ *((wchar_t*) argumentB.value); } return ((int) argumentA) ^ *((int*) argumentB.value); }
            friend inline primitive operator ^(const void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) ^ *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) ^ *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) ^ *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) ^ ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) ^ ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) ^ *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) ^ *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) ^ ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) ^ *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) ^ ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) ^ *((wchar_t*) argumentB.value); } return ((int) argumentA) ^ *((int*) argumentB.value); }

            inline primitive operator ^(const wchar_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) ^ argument; case this -> char__type: return *((char*) this -> value) ^ argument; case this -> char8_t__type: return *((char8_t*) this -> value) ^ argument; case this -> char16_t__type: return *((char16_t*) this -> value) ^ argument; case this -> char32_t__type: return *((char32_t*) this -> value) ^ argument; case this -> double__type: return ((long) *((double*) this -> value)) ^ argument; case this -> float__type: return ((int) *((float*) this -> value)) ^ argument; case this -> int__type: return *((int*) this -> value) ^ argument; case this -> long__type: return *((long*) this -> value) ^ argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) ^ argument; case this -> long_long__type: return *((long long*) this -> value) ^ argument; case this -> short__type: return *((short*) this -> value) ^ argument; case this -> void__type: return ((int) *((void**) this -> value)) ^ argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) ^ argument; } return *((wchar_t*) this -> value) ^ argument; }
            friend inline primitive operator ^(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((wchar_t*) argumentB.value); }
            friend inline primitive operator ^(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((wchar_t*) argumentB.value); }
            friend inline primitive operator ^(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((wchar_t*) argumentB.value); }
            friend inline primitive operator ^(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA ^ *((boolean*) argumentB.value); case argumentB.char__type: return argumentA ^ *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA ^ *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA ^ *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA ^ *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA ^ (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA ^ (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA ^ *((int*) argumentB.value); case argumentB.long__type: return argumentA ^ *((long*) argumentB.value); case argumentB.long_double__type: return argumentA ^ (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA ^ *((long long*) argumentB.value); case argumentB.short__type: return argumentA ^ *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) ^ argumentA; case argumentB.wchar_t__type: return argumentA ^ *((wchar_t*) argumentB.value); } return argumentA ^ *((wchar_t*) argumentB.value); }

            // [&]
            inline primitive operator &(const boolean argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) & argument; case this -> char__type: return *((char*) this -> value) & argument; case this -> char8_t__type: return *((char8_t*) this -> value) & argument; case this -> char16_t__type: return *((char16_t*) this -> value) & argument; case this -> char32_t__type: return *((char32_t*) this -> value) & argument; case this -> double__type: return ((long) *((double*) this -> value)) & argument; case this -> float__type: return ((int) *((float*) this -> value)) & argument; case this -> int__type: return *((int*) this -> value) & argument; case this -> long__type: return *((long*) this -> value) & argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) & argument; case this -> long_long__type: return *((long long*) this -> value) & argument; case this -> short__type: return *((short*) this -> value) & argument; case this -> void__type: return ((int) *((void**) this -> value)) & argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) & argument; } return *((boolean*) this -> value) & argument; }
            friend inline primitive operator &(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((boolean*) argumentB.value); }
            friend inline primitive operator &(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((boolean*) argumentB.value); }
            friend inline primitive operator &(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((boolean*) argumentB.value); }
            friend inline primitive operator &(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((boolean*) argumentB.value); }

            inline primitive operator &(const char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) & argument; case this -> char__type: return *((char*) this -> value) & argument; case this -> char8_t__type: return *((char8_t*) this -> value) & argument; case this -> char16_t__type: return *((char16_t*) this -> value) & argument; case this -> char32_t__type: return *((char32_t*) this -> value) & argument; case this -> double__type: return ((long) *((double*) this -> value)) & argument; case this -> float__type: return ((int) *((float*) this -> value)) & argument; case this -> int__type: return *((int*) this -> value) & argument; case this -> long__type: return *((long*) this -> value) & argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) & argument; case this -> long_long__type: return *((long long*) this -> value) & argument; case this -> short__type: return *((short*) this -> value) & argument; case this -> void__type: return ((int) *((void**) this -> value)) & argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) & argument; } return *((char*) this -> value) & argument; }
            friend inline primitive operator &(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((char*) argumentB.value); }
            friend inline primitive operator &(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((char*) argumentB.value); }
            friend inline primitive operator &(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((char*) argumentB.value); }
            friend inline primitive operator &(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((char*) argumentB.value); }

            inline primitive operator &(const char8_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) & argument; case this -> char__type: return *((char*) this -> value) & argument; case this -> char8_t__type: return *((char8_t*) this -> value) & argument; case this -> char16_t__type: return *((char16_t*) this -> value) & argument; case this -> char32_t__type: return *((char32_t*) this -> value) & argument; case this -> double__type: return ((long) *((double*) this -> value)) & argument; case this -> float__type: return ((int) *((float*) this -> value)) & argument; case this -> int__type: return *((int*) this -> value) & argument; case this -> long__type: return *((long*) this -> value) & argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) & argument; case this -> long_long__type: return *((long long*) this -> value) & argument; case this -> short__type: return *((short*) this -> value) & argument; case this -> void__type: return ((int) *((void**) this -> value)) & argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) & argument; } return *((char8_t*) this -> value) & argument; }
            friend inline primitive operator &(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((char8_t*) argumentB.value); }
            friend inline primitive operator &(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((char8_t*) argumentB.value); }
            friend inline primitive operator &(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((char8_t*) argumentB.value); }
            friend inline primitive operator &(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((char8_t*) argumentB.value); }

            inline primitive operator &(const char16_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) & argument; case this -> char__type: return *((char*) this -> value) & argument; case this -> char8_t__type: return *((char8_t*) this -> value) & argument; case this -> char16_t__type: return *((char16_t*) this -> value) & argument; case this -> char32_t__type: return *((char32_t*) this -> value) & argument; case this -> double__type: return ((long) *((double*) this -> value)) & argument; case this -> float__type: return ((int) *((float*) this -> value)) & argument; case this -> int__type: return *((int*) this -> value) & argument; case this -> long__type: return *((long*) this -> value) & argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) & argument; case this -> long_long__type: return *((long long*) this -> value) & argument; case this -> short__type: return *((short*) this -> value) & argument; case this -> void__type: return ((int) *((void**) this -> value)) & argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) & argument; } return *((char16_t*) this -> value) & argument; }
            friend inline primitive operator &(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((char16_t*) argumentB.value); }
            friend inline primitive operator &(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((char16_t*) argumentB.value); }
            friend inline primitive operator &(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((char16_t*) argumentB.value); }
            friend inline primitive operator &(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((char16_t*) argumentB.value); }

            inline primitive operator &(const char32_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) & argument; case this -> char__type: return *((char*) this -> value) & argument; case this -> char8_t__type: return *((char8_t*) this -> value) & argument; case this -> char16_t__type: return *((char16_t*) this -> value) & argument; case this -> char32_t__type: return *((char32_t*) this -> value) & argument; case this -> double__type: return ((long) *((double*) this -> value)) & argument; case this -> float__type: return ((int) *((float*) this -> value)) & argument; case this -> int__type: return *((int*) this -> value) & argument; case this -> long__type: return *((long*) this -> value) & argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) & argument; case this -> long_long__type: return *((long long*) this -> value) & argument; case this -> short__type: return *((short*) this -> value) & argument; case this -> void__type: return ((int) *((void**) this -> value)) & argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) & argument; } return *((char32_t*) this -> value) & argument; }
            friend inline primitive operator &(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((char32_t*) argumentB.value); }
            friend inline primitive operator &(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((char32_t*) argumentB.value); }
            friend inline primitive operator &(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((char32_t*) argumentB.value); }
            friend inline primitive operator &(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((char32_t*) argumentB.value); }

            inline primitive operator &(const int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) & argument; case this -> char__type: return *((char*) this -> value) & argument; case this -> char8_t__type: return *((char8_t*) this -> value) & argument; case this -> char16_t__type: return *((char16_t*) this -> value) & argument; case this -> char32_t__type: return *((char32_t*) this -> value) & argument; case this -> double__type: return ((long) *((double*) this -> value)) & argument; case this -> float__type: return ((int) *((float*) this -> value)) & argument; case this -> int__type: return *((int*) this -> value) & argument; case this -> long__type: return *((long*) this -> value) & argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) & argument; case this -> long_long__type: return *((long long*) this -> value) & argument; case this -> short__type: return *((short*) this -> value) & argument; case this -> void__type: return ((int) *((void**) this -> value)) & argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) & argument; } return *((int*) this -> value) & argument; }
            friend inline primitive operator &(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((int*) argumentB.value); }
            friend inline primitive operator &(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((int*) argumentB.value); }
            friend inline primitive operator &(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((int*) argumentB.value); }
            friend inline primitive operator &(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((int*) argumentB.value); }

            inline primitive operator &(const long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) & argument; case this -> char__type: return *((char*) this -> value) & argument; case this -> char8_t__type: return *((char8_t*) this -> value) & argument; case this -> char16_t__type: return *((char16_t*) this -> value) & argument; case this -> char32_t__type: return *((char32_t*) this -> value) & argument; case this -> double__type: return ((long) *((double*) this -> value)) & argument; case this -> float__type: return ((int) *((float*) this -> value)) & argument; case this -> int__type: return *((int*) this -> value) & argument; case this -> long__type: return *((long*) this -> value) & argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) & argument; case this -> long_long__type: return *((long long*) this -> value) & argument; case this -> short__type: return *((short*) this -> value) & argument; case this -> void__type: return ((int) *((void**) this -> value)) & argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) & argument; } return *((long*) this -> value) & argument; }
            friend inline primitive operator &(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((long*) argumentB.value); }
            friend inline primitive operator &(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((long*) argumentB.value); }
            friend inline primitive operator &(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((long*) argumentB.value); }
            friend inline primitive operator &(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((long*) argumentB.value); }

            inline primitive operator &(const long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) & argument; case this -> char__type: return *((char*) this -> value) & argument; case this -> char8_t__type: return *((char8_t*) this -> value) & argument; case this -> char16_t__type: return *((char16_t*) this -> value) & argument; case this -> char32_t__type: return *((char32_t*) this -> value) & argument; case this -> double__type: return ((long) *((double*) this -> value)) & argument; case this -> float__type: return ((int) *((float*) this -> value)) & argument; case this -> int__type: return *((int*) this -> value) & argument; case this -> long__type: return *((long*) this -> value) & argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) & argument; case this -> long_long__type: return *((long long*) this -> value) & argument; case this -> short__type: return *((short*) this -> value) & argument; case this -> void__type: return ((int) *((void**) this -> value)) & argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) & argument; } return *((long long*) this -> value) & argument; }
            friend inline primitive operator &(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((long long*) argumentB.value); }
            friend inline primitive operator &(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((long long*) argumentB.value); }
            friend inline primitive operator &(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((long long*) argumentB.value); }
            friend inline primitive operator &(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((long long*) argumentB.value); }

            inline primitive operator &(const short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) & argument; case this -> char__type: return *((char*) this -> value) & argument; case this -> char8_t__type: return *((char8_t*) this -> value) & argument; case this -> char16_t__type: return *((char16_t*) this -> value) & argument; case this -> char32_t__type: return *((char32_t*) this -> value) & argument; case this -> double__type: return ((long) *((double*) this -> value)) & argument; case this -> float__type: return ((int) *((float*) this -> value)) & argument; case this -> int__type: return *((int*) this -> value) & argument; case this -> long__type: return *((long*) this -> value) & argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) & argument; case this -> long_long__type: return *((long long*) this -> value) & argument; case this -> short__type: return *((short*) this -> value) & argument; case this -> void__type: return ((int) *((void**) this -> value)) & argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) & argument; } return *((short*) this -> value) & argument; }
            friend inline primitive operator &(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((short*) argumentB.value); }
            friend inline primitive operator &(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((short*) argumentB.value); }
            friend inline primitive operator &(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((short*) argumentB.value); }
            friend inline primitive operator &(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((short*) argumentB.value); }

            inline primitive operator &(const signed char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) & argument; case this -> char__type: return *((char*) this -> value) & argument; case this -> char8_t__type: return *((char8_t*) this -> value) & argument; case this -> char16_t__type: return *((char16_t*) this -> value) & argument; case this -> char32_t__type: return *((char32_t*) this -> value) & argument; case this -> double__type: return ((long) *((double*) this -> value)) & argument; case this -> float__type: return ((int) *((float*) this -> value)) & argument; case this -> int__type: return *((int*) this -> value) & argument; case this -> long__type: return *((long*) this -> value) & argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) & argument; case this -> long_long__type: return *((long long*) this -> value) & argument; case this -> short__type: return *((short*) this -> value) & argument; case this -> void__type: return ((int) *((void**) this -> value)) & argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) & argument; } return *((signed char*) this -> value) & argument; }
            friend inline primitive operator &(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((signed char*) argumentB.value); }
            friend inline primitive operator &(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((signed char*) argumentB.value); }
            friend inline primitive operator &(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((signed char*) argumentB.value); }
            friend inline primitive operator &(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((signed char*) argumentB.value); }

            inline primitive operator &(const unsigned char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) & argument; case this -> char__type: return *((char*) this -> value) & argument; case this -> char8_t__type: return *((char8_t*) this -> value) & argument; case this -> char16_t__type: return *((char16_t*) this -> value) & argument; case this -> char32_t__type: return *((char32_t*) this -> value) & argument; case this -> double__type: return ((long) *((double*) this -> value)) & argument; case this -> float__type: return ((int) *((float*) this -> value)) & argument; case this -> int__type: return *((int*) this -> value) & argument; case this -> long__type: return *((long*) this -> value) & argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) & argument; case this -> long_long__type: return *((long long*) this -> value) & argument; case this -> short__type: return *((short*) this -> value) & argument; case this -> void__type: return ((int) *((void**) this -> value)) & argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) & argument; } return *((unsigned char*) this -> value) & argument; }
            friend inline primitive operator &(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((unsigned char*) argumentB.value); }
            friend inline primitive operator &(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((unsigned char*) argumentB.value); }
            friend inline primitive operator &(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((unsigned char*) argumentB.value); }
            friend inline primitive operator &(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((unsigned char*) argumentB.value); }

            inline primitive operator &(const unsigned int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) & argument; case this -> char__type: return *((char*) this -> value) & argument; case this -> char8_t__type: return *((char8_t*) this -> value) & argument; case this -> char16_t__type: return *((char16_t*) this -> value) & argument; case this -> char32_t__type: return *((char32_t*) this -> value) & argument; case this -> double__type: return ((long) *((double*) this -> value)) & argument; case this -> float__type: return ((int) *((float*) this -> value)) & argument; case this -> int__type: return *((int*) this -> value) & argument; case this -> long__type: return *((long*) this -> value) & argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) & argument; case this -> long_long__type: return *((long long*) this -> value) & argument; case this -> short__type: return *((short*) this -> value) & argument; case this -> void__type: return ((int) *((void**) this -> value)) & argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) & argument; } return *((unsigned int*) this -> value) & argument; }
            friend inline primitive operator &(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((unsigned int*) argumentB.value); }
            friend inline primitive operator &(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((unsigned int*) argumentB.value); }
            friend inline primitive operator &(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((unsigned int*) argumentB.value); }
            friend inline primitive operator &(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((unsigned int*) argumentB.value); }

            inline primitive operator &(const unsigned long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) & argument; case this -> char__type: return *((char*) this -> value) & argument; case this -> char8_t__type: return *((char8_t*) this -> value) & argument; case this -> char16_t__type: return *((char16_t*) this -> value) & argument; case this -> char32_t__type: return *((char32_t*) this -> value) & argument; case this -> double__type: return ((long) *((double*) this -> value)) & argument; case this -> float__type: return ((int) *((float*) this -> value)) & argument; case this -> int__type: return *((int*) this -> value) & argument; case this -> long__type: return *((long*) this -> value) & argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) & argument; case this -> long_long__type: return *((long long*) this -> value) & argument; case this -> short__type: return *((short*) this -> value) & argument; case this -> void__type: return ((int) *((void**) this -> value)) & argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) & argument; } return *((unsigned long*) this -> value) & argument; }
            friend inline primitive operator &(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((unsigned long*) argumentB.value); }
            friend inline primitive operator &(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((unsigned long*) argumentB.value); }
            friend inline primitive operator &(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((unsigned long*) argumentB.value); }
            friend inline primitive operator &(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((unsigned long*) argumentB.value); }

            inline primitive operator &(const unsigned long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) & argument; case this -> char__type: return *((char*) this -> value) & argument; case this -> char8_t__type: return *((char8_t*) this -> value) & argument; case this -> char16_t__type: return *((char16_t*) this -> value) & argument; case this -> char32_t__type: return *((char32_t*) this -> value) & argument; case this -> double__type: return ((long) *((double*) this -> value)) & argument; case this -> float__type: return ((int) *((float*) this -> value)) & argument; case this -> int__type: return *((int*) this -> value) & argument; case this -> long__type: return *((long*) this -> value) & argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) & argument; case this -> long_long__type: return *((long long*) this -> value) & argument; case this -> short__type: return *((short*) this -> value) & argument; case this -> void__type: return ((int) *((void**) this -> value)) & argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) & argument; } return *((unsigned long long*) this -> value) & argument; }
            friend inline primitive operator &(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((unsigned long long*) argumentB.value); }
            friend inline primitive operator &(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((unsigned long long*) argumentB.value); }
            friend inline primitive operator &(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((unsigned long long*) argumentB.value); }
            friend inline primitive operator &(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((unsigned long long*) argumentB.value); }

            inline primitive operator &(const unsigned short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) & argument; case this -> char__type: return *((char*) this -> value) & argument; case this -> char8_t__type: return *((char8_t*) this -> value) & argument; case this -> char16_t__type: return *((char16_t*) this -> value) & argument; case this -> char32_t__type: return *((char32_t*) this -> value) & argument; case this -> double__type: return ((long) *((double*) this -> value)) & argument; case this -> float__type: return ((int) *((float*) this -> value)) & argument; case this -> int__type: return *((int*) this -> value) & argument; case this -> long__type: return *((long*) this -> value) & argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) & argument; case this -> long_long__type: return *((long long*) this -> value) & argument; case this -> short__type: return *((short*) this -> value) & argument; case this -> void__type: return ((int) *((void**) this -> value)) & argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) & argument; } return *((unsigned short*) this -> value) & argument; }
            friend inline primitive operator &(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((unsigned short*) argumentB.value); }
            friend inline primitive operator &(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((unsigned short*) argumentB.value); }
            friend inline primitive operator &(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((unsigned short*) argumentB.value); }
            friend inline primitive operator &(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((unsigned short*) argumentB.value); }

            inline primitive operator &(void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) & (int) argument; case this -> char__type: return *((char*) this -> value) & (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) & (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) & (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) & (int) argument; case this -> double__type: return ((long) *((double*) this -> value)) & (int) argument; case this -> float__type: return ((int) *((float*) this -> value)) & (int) argument; case this -> int__type: return *((int*) this -> value) & (int) argument; case this -> long__type: return *((long*) this -> value) & (int) argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) & (int) argument; case this -> long_long__type: return *((long long*) this -> value) & (int) argument; case this -> short__type: return *((short*) this -> value) & (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) & (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) & (int) argument; } return *((int*) this -> value) & (int) argument; }
            friend inline primitive operator &(void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) & *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) & *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) & *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) & ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) & ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) & *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) & *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) & ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) & *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) & *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) & ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) & *((wchar_t*) argumentB.value); } return ((int) argumentA) & *((int*) argumentB.value); }
            friend inline primitive operator &(void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) & *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) & *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) & *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) & ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) & ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) & *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) & *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) & ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) & *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) & *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) & ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) & *((wchar_t*) argumentB.value); } return ((int) argumentA) & *((int*) argumentB.value); }
            friend inline primitive operator &(void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) & *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) & *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) & *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) & ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) & ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) & *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) & *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) & ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) & *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) & *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) & ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) & *((wchar_t*) argumentB.value); } return ((int) argumentA) & *((int*) argumentB.value); }
            friend inline primitive operator &(void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) & *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) & *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) & *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) & ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) & ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) & *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) & *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) & ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) & *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) & *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) & ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) & *((wchar_t*) argumentB.value); } return ((int) argumentA) & *((int*) argumentB.value); }

            inline primitive operator &(const void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) & (int) argument; case this -> char__type: return *((char*) this -> value) & (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) & (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) & (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) & (int) argument; case this -> double__type: return ((long) *((double*) this -> value)) & (int) argument; case this -> float__type: return ((int) *((float*) this -> value)) & (int) argument; case this -> int__type: return *((int*) this -> value) & (int) argument; case this -> long__type: return *((long*) this -> value) & (int) argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) & (int) argument; case this -> long_long__type: return *((long long*) this -> value) & (int) argument; case this -> short__type: return *((short*) this -> value) & (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) & (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) & (int) argument; } return *((int*) this -> value) & (int) argument; }
            friend inline primitive operator &(const void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) & *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) & *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) & *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) & ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) & ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) & *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) & *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) & ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) & *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) & *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) & ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) & *((wchar_t*) argumentB.value); } return ((int) argumentA) & *((int*) argumentB.value); }
            friend inline primitive operator &(const void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) & *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) & *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) & *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) & ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) & ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) & *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) & *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) & ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) & *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) & *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) & ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) & *((wchar_t*) argumentB.value); } return ((int) argumentA) & *((int*) argumentB.value); }
            friend inline primitive operator &(const void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) & *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) & *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) & *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) & ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) & ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) & *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) & *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) & ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) & *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) & *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) & ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) & *((wchar_t*) argumentB.value); } return ((int) argumentA) & *((int*) argumentB.value); }
            friend inline primitive operator &(const void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) & *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) & *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) & *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) & ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) & ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) & *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) & *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) & ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) & *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) & *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) & ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) & *((wchar_t*) argumentB.value); } return ((int) argumentA) & *((int*) argumentB.value); }

            inline primitive operator &(const wchar_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) & argument; case this -> char__type: return *((char*) this -> value) & argument; case this -> char8_t__type: return *((char8_t*) this -> value) & argument; case this -> char16_t__type: return *((char16_t*) this -> value) & argument; case this -> char32_t__type: return *((char32_t*) this -> value) & argument; case this -> double__type: return ((long) *((double*) this -> value)) & argument; case this -> float__type: return ((int) *((float*) this -> value)) & argument; case this -> int__type: return *((int*) this -> value) & argument; case this -> long__type: return *((long*) this -> value) & argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) & argument; case this -> long_long__type: return *((long long*) this -> value) & argument; case this -> short__type: return *((short*) this -> value) & argument; case this -> void__type: return ((int) *((void**) this -> value)) & argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) & argument; } return *((wchar_t*) this -> value) & argument; }
            friend inline primitive operator &(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((wchar_t*) argumentB.value); }
            friend inline primitive operator &(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((wchar_t*) argumentB.value); }
            friend inline primitive operator &(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((wchar_t*) argumentB.value); }
            friend inline primitive operator &(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA & *((boolean*) argumentB.value); case argumentB.char__type: return argumentA & *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA & *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA & *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA & *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA & (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA & (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA & *((int*) argumentB.value); case argumentB.long__type: return argumentA & *((long*) argumentB.value); case argumentB.long_double__type: return argumentA & (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA & *((long long*) argumentB.value); case argumentB.short__type: return argumentA & *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) & argumentA; case argumentB.wchar_t__type: return argumentA & *((wchar_t*) argumentB.value); } return argumentA & *((wchar_t*) argumentB.value); }

            // [|]
            inline primitive operator |(const boolean argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) | argument; case this -> char__type: return *((char*) this -> value) | argument; case this -> char8_t__type: return *((char8_t*) this -> value) | argument; case this -> char16_t__type: return *((char16_t*) this -> value) | argument; case this -> char32_t__type: return *((char32_t*) this -> value) | argument; case this -> double__type: return ((long) *((double*) this -> value)) | argument; case this -> float__type: return ((int) *((float*) this -> value)) | argument; case this -> int__type: return *((int*) this -> value) | argument; case this -> long__type: return *((long*) this -> value) | argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) | argument; case this -> long_long__type: return *((long long*) this -> value) | argument; case this -> short__type: return *((short*) this -> value) | argument; case this -> void__type: return ((int) *((void**) this -> value)) | argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) | argument; } return *((boolean*) this -> value) | argument; }
            friend inline primitive operator |(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((boolean*) argumentB.value); }
            friend inline primitive operator |(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((boolean*) argumentB.value); }
            friend inline primitive operator |(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((boolean*) argumentB.value); }
            friend inline primitive operator |(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((boolean*) argumentB.value); }

            inline primitive operator |(const char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) | argument; case this -> char__type: return *((char*) this -> value) | argument; case this -> char8_t__type: return *((char8_t*) this -> value) | argument; case this -> char16_t__type: return *((char16_t*) this -> value) | argument; case this -> char32_t__type: return *((char32_t*) this -> value) | argument; case this -> double__type: return ((long) *((double*) this -> value)) | argument; case this -> float__type: return ((int) *((float*) this -> value)) | argument; case this -> int__type: return *((int*) this -> value) | argument; case this -> long__type: return *((long*) this -> value) | argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) | argument; case this -> long_long__type: return *((long long*) this -> value) | argument; case this -> short__type: return *((short*) this -> value) | argument; case this -> void__type: return ((int) *((void**) this -> value)) | argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) | argument; } return *((char*) this -> value) | argument; }
            friend inline primitive operator |(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((char*) argumentB.value); }
            friend inline primitive operator |(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((char*) argumentB.value); }
            friend inline primitive operator |(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((char*) argumentB.value); }
            friend inline primitive operator |(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((char*) argumentB.value); }

            inline primitive operator |(const char8_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) | argument; case this -> char__type: return *((char*) this -> value) | argument; case this -> char8_t__type: return *((char8_t*) this -> value) | argument; case this -> char16_t__type: return *((char16_t*) this -> value) | argument; case this -> char32_t__type: return *((char32_t*) this -> value) | argument; case this -> double__type: return ((long) *((double*) this -> value)) | argument; case this -> float__type: return ((int) *((float*) this -> value)) | argument; case this -> int__type: return *((int*) this -> value) | argument; case this -> long__type: return *((long*) this -> value) | argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) | argument; case this -> long_long__type: return *((long long*) this -> value) | argument; case this -> short__type: return *((short*) this -> value) | argument; case this -> void__type: return ((int) *((void**) this -> value)) | argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) | argument; } return *((char8_t*) this -> value) | argument; }
            friend inline primitive operator |(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((char8_t*) argumentB.value); }
            friend inline primitive operator |(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((char8_t*) argumentB.value); }
            friend inline primitive operator |(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((char8_t*) argumentB.value); }
            friend inline primitive operator |(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((char8_t*) argumentB.value); }

            inline primitive operator |(const char16_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) | argument; case this -> char__type: return *((char*) this -> value) | argument; case this -> char8_t__type: return *((char8_t*) this -> value) | argument; case this -> char16_t__type: return *((char16_t*) this -> value) | argument; case this -> char32_t__type: return *((char32_t*) this -> value) | argument; case this -> double__type: return ((long) *((double*) this -> value)) | argument; case this -> float__type: return ((int) *((float*) this -> value)) | argument; case this -> int__type: return *((int*) this -> value) | argument; case this -> long__type: return *((long*) this -> value) | argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) | argument; case this -> long_long__type: return *((long long*) this -> value) | argument; case this -> short__type: return *((short*) this -> value) | argument; case this -> void__type: return ((int) *((void**) this -> value)) | argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) | argument; } return *((char16_t*) this -> value) | argument; }
            friend inline primitive operator |(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((char16_t*) argumentB.value); }
            friend inline primitive operator |(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((char16_t*) argumentB.value); }
            friend inline primitive operator |(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((char16_t*) argumentB.value); }
            friend inline primitive operator |(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((char16_t*) argumentB.value); }

            inline primitive operator |(const char32_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) | argument; case this -> char__type: return *((char*) this -> value) | argument; case this -> char8_t__type: return *((char8_t*) this -> value) | argument; case this -> char16_t__type: return *((char16_t*) this -> value) | argument; case this -> char32_t__type: return *((char32_t*) this -> value) | argument; case this -> double__type: return ((long) *((double*) this -> value)) | argument; case this -> float__type: return ((int) *((float*) this -> value)) | argument; case this -> int__type: return *((int*) this -> value) | argument; case this -> long__type: return *((long*) this -> value) | argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) | argument; case this -> long_long__type: return *((long long*) this -> value) | argument; case this -> short__type: return *((short*) this -> value) | argument; case this -> void__type: return ((int) *((void**) this -> value)) | argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) | argument; } return *((char32_t*) this -> value) | argument; }
            friend inline primitive operator |(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((char32_t*) argumentB.value); }
            friend inline primitive operator |(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((char32_t*) argumentB.value); }
            friend inline primitive operator |(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((char32_t*) argumentB.value); }
            friend inline primitive operator |(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((char32_t*) argumentB.value); }

            inline primitive operator |(const int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) | argument; case this -> char__type: return *((char*) this -> value) | argument; case this -> char8_t__type: return *((char8_t*) this -> value) | argument; case this -> char16_t__type: return *((char16_t*) this -> value) | argument; case this -> char32_t__type: return *((char32_t*) this -> value) | argument; case this -> double__type: return ((long) *((double*) this -> value)) | argument; case this -> float__type: return ((int) *((float*) this -> value)) | argument; case this -> int__type: return *((int*) this -> value) | argument; case this -> long__type: return *((long*) this -> value) | argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) | argument; case this -> long_long__type: return *((long long*) this -> value) | argument; case this -> short__type: return *((short*) this -> value) | argument; case this -> void__type: return ((int) *((void**) this -> value)) | argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) | argument; } return *((int*) this -> value) | argument; }
            friend inline primitive operator |(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((int*) argumentB.value); }
            friend inline primitive operator |(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((int*) argumentB.value); }
            friend inline primitive operator |(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((int*) argumentB.value); }
            friend inline primitive operator |(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((int*) argumentB.value); }

            inline primitive operator |(const long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) | argument; case this -> char__type: return *((char*) this -> value) | argument; case this -> char8_t__type: return *((char8_t*) this -> value) | argument; case this -> char16_t__type: return *((char16_t*) this -> value) | argument; case this -> char32_t__type: return *((char32_t*) this -> value) | argument; case this -> double__type: return ((long) *((double*) this -> value)) | argument; case this -> float__type: return ((int) *((float*) this -> value)) | argument; case this -> int__type: return *((int*) this -> value) | argument; case this -> long__type: return *((long*) this -> value) | argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) | argument; case this -> long_long__type: return *((long long*) this -> value) | argument; case this -> short__type: return *((short*) this -> value) | argument; case this -> void__type: return ((int) *((void**) this -> value)) | argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) | argument; } return *((long*) this -> value) | argument; }
            friend inline primitive operator |(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((long*) argumentB.value); }
            friend inline primitive operator |(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((long*) argumentB.value); }
            friend inline primitive operator |(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((long*) argumentB.value); }
            friend inline primitive operator |(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((long*) argumentB.value); }

            inline primitive operator |(const long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) | argument; case this -> char__type: return *((char*) this -> value) | argument; case this -> char8_t__type: return *((char8_t*) this -> value) | argument; case this -> char16_t__type: return *((char16_t*) this -> value) | argument; case this -> char32_t__type: return *((char32_t*) this -> value) | argument; case this -> double__type: return ((long) *((double*) this -> value)) | argument; case this -> float__type: return ((int) *((float*) this -> value)) | argument; case this -> int__type: return *((int*) this -> value) | argument; case this -> long__type: return *((long*) this -> value) | argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) | argument; case this -> long_long__type: return *((long long*) this -> value) | argument; case this -> short__type: return *((short*) this -> value) | argument; case this -> void__type: return ((int) *((void**) this -> value)) | argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) | argument; } return *((long long*) this -> value) | argument; }
            friend inline primitive operator |(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((long long*) argumentB.value); }
            friend inline primitive operator |(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((long long*) argumentB.value); }
            friend inline primitive operator |(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((long long*) argumentB.value); }
            friend inline primitive operator |(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((long long*) argumentB.value); }

            inline primitive operator |(const short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) | argument; case this -> char__type: return *((char*) this -> value) | argument; case this -> char8_t__type: return *((char8_t*) this -> value) | argument; case this -> char16_t__type: return *((char16_t*) this -> value) | argument; case this -> char32_t__type: return *((char32_t*) this -> value) | argument; case this -> double__type: return ((long) *((double*) this -> value)) | argument; case this -> float__type: return ((int) *((float*) this -> value)) | argument; case this -> int__type: return *((int*) this -> value) | argument; case this -> long__type: return *((long*) this -> value) | argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) | argument; case this -> long_long__type: return *((long long*) this -> value) | argument; case this -> short__type: return *((short*) this -> value) | argument; case this -> void__type: return ((int) *((void**) this -> value)) | argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) | argument; } return *((short*) this -> value) | argument; }
            friend inline primitive operator |(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((short*) argumentB.value); }
            friend inline primitive operator |(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((short*) argumentB.value); }
            friend inline primitive operator |(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((short*) argumentB.value); }
            friend inline primitive operator |(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((short*) argumentB.value); }

            inline primitive operator |(const signed char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) | argument; case this -> char__type: return *((char*) this -> value) | argument; case this -> char8_t__type: return *((char8_t*) this -> value) | argument; case this -> char16_t__type: return *((char16_t*) this -> value) | argument; case this -> char32_t__type: return *((char32_t*) this -> value) | argument; case this -> double__type: return ((long) *((double*) this -> value)) | argument; case this -> float__type: return ((int) *((float*) this -> value)) | argument; case this -> int__type: return *((int*) this -> value) | argument; case this -> long__type: return *((long*) this -> value) | argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) | argument; case this -> long_long__type: return *((long long*) this -> value) | argument; case this -> short__type: return *((short*) this -> value) | argument; case this -> void__type: return ((int) *((void**) this -> value)) | argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) | argument; } return *((signed char*) this -> value) | argument; }
            friend inline primitive operator |(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((signed char*) argumentB.value); }
            friend inline primitive operator |(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((signed char*) argumentB.value); }
            friend inline primitive operator |(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((signed char*) argumentB.value); }
            friend inline primitive operator |(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((signed char*) argumentB.value); }

            inline primitive operator |(const unsigned char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) | argument; case this -> char__type: return *((char*) this -> value) | argument; case this -> char8_t__type: return *((char8_t*) this -> value) | argument; case this -> char16_t__type: return *((char16_t*) this -> value) | argument; case this -> char32_t__type: return *((char32_t*) this -> value) | argument; case this -> double__type: return ((long) *((double*) this -> value)) | argument; case this -> float__type: return ((int) *((float*) this -> value)) | argument; case this -> int__type: return *((int*) this -> value) | argument; case this -> long__type: return *((long*) this -> value) | argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) | argument; case this -> long_long__type: return *((long long*) this -> value) | argument; case this -> short__type: return *((short*) this -> value) | argument; case this -> void__type: return ((int) *((void**) this -> value)) | argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) | argument; } return *((unsigned char*) this -> value) | argument; }
            friend inline primitive operator |(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((unsigned char*) argumentB.value); }
            friend inline primitive operator |(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((unsigned char*) argumentB.value); }
            friend inline primitive operator |(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((unsigned char*) argumentB.value); }
            friend inline primitive operator |(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((unsigned char*) argumentB.value); }

            inline primitive operator |(const unsigned int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) | argument; case this -> char__type: return *((char*) this -> value) | argument; case this -> char8_t__type: return *((char8_t*) this -> value) | argument; case this -> char16_t__type: return *((char16_t*) this -> value) | argument; case this -> char32_t__type: return *((char32_t*) this -> value) | argument; case this -> double__type: return ((long) *((double*) this -> value)) | argument; case this -> float__type: return ((int) *((float*) this -> value)) | argument; case this -> int__type: return *((int*) this -> value) | argument; case this -> long__type: return *((long*) this -> value) | argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) | argument; case this -> long_long__type: return *((long long*) this -> value) | argument; case this -> short__type: return *((short*) this -> value) | argument; case this -> void__type: return ((int) *((void**) this -> value)) | argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) | argument; } return *((unsigned int*) this -> value) | argument; }
            friend inline primitive operator |(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((unsigned int*) argumentB.value); }
            friend inline primitive operator |(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((unsigned int*) argumentB.value); }
            friend inline primitive operator |(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((unsigned int*) argumentB.value); }
            friend inline primitive operator |(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((unsigned int*) argumentB.value); }

            inline primitive operator |(const unsigned long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) | argument; case this -> char__type: return *((char*) this -> value) | argument; case this -> char8_t__type: return *((char8_t*) this -> value) | argument; case this -> char16_t__type: return *((char16_t*) this -> value) | argument; case this -> char32_t__type: return *((char32_t*) this -> value) | argument; case this -> double__type: return ((long) *((double*) this -> value)) | argument; case this -> float__type: return ((int) *((float*) this -> value)) | argument; case this -> int__type: return *((int*) this -> value) | argument; case this -> long__type: return *((long*) this -> value) | argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) | argument; case this -> long_long__type: return *((long long*) this -> value) | argument; case this -> short__type: return *((short*) this -> value) | argument; case this -> void__type: return ((int) *((void**) this -> value)) | argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) | argument; } return *((unsigned long*) this -> value) | argument; }
            friend inline primitive operator |(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((unsigned long*) argumentB.value); }
            friend inline primitive operator |(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((unsigned long*) argumentB.value); }
            friend inline primitive operator |(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((unsigned long*) argumentB.value); }
            friend inline primitive operator |(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((unsigned long*) argumentB.value); }

            inline primitive operator |(const unsigned long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) | argument; case this -> char__type: return *((char*) this -> value) | argument; case this -> char8_t__type: return *((char8_t*) this -> value) | argument; case this -> char16_t__type: return *((char16_t*) this -> value) | argument; case this -> char32_t__type: return *((char32_t*) this -> value) | argument; case this -> double__type: return ((long) *((double*) this -> value)) | argument; case this -> float__type: return ((int) *((float*) this -> value)) | argument; case this -> int__type: return *((int*) this -> value) | argument; case this -> long__type: return *((long*) this -> value) | argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) | argument; case this -> long_long__type: return *((long long*) this -> value) | argument; case this -> short__type: return *((short*) this -> value) | argument; case this -> void__type: return ((int) *((void**) this -> value)) | argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) | argument; } return *((unsigned long long*) this -> value) | argument; }
            friend inline primitive operator |(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((unsigned long long*) argumentB.value); }
            friend inline primitive operator |(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((unsigned long long*) argumentB.value); }
            friend inline primitive operator |(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((unsigned long long*) argumentB.value); }
            friend inline primitive operator |(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((unsigned long long*) argumentB.value); }

            inline primitive operator |(const unsigned short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) | argument; case this -> char__type: return *((char*) this -> value) | argument; case this -> char8_t__type: return *((char8_t*) this -> value) | argument; case this -> char16_t__type: return *((char16_t*) this -> value) | argument; case this -> char32_t__type: return *((char32_t*) this -> value) | argument; case this -> double__type: return ((long) *((double*) this -> value)) | argument; case this -> float__type: return ((int) *((float*) this -> value)) | argument; case this -> int__type: return *((int*) this -> value) | argument; case this -> long__type: return *((long*) this -> value) | argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) | argument; case this -> long_long__type: return *((long long*) this -> value) | argument; case this -> short__type: return *((short*) this -> value) | argument; case this -> void__type: return ((int) *((void**) this -> value)) | argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) | argument; } return *((unsigned short*) this -> value) | argument; }
            friend inline primitive operator |(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((unsigned short*) argumentB.value); }
            friend inline primitive operator |(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((unsigned short*) argumentB.value); }
            friend inline primitive operator |(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((unsigned short*) argumentB.value); }
            friend inline primitive operator |(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((unsigned short*) argumentB.value); }

            inline primitive operator |(void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) | (int) argument; case this -> char__type: return *((char*) this -> value) | (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) | (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) | (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) | (int) argument; case this -> double__type: return ((long) *((double*) this -> value)) | (int) argument; case this -> float__type: return ((int) *((float*) this -> value)) | (int) argument; case this -> int__type: return *((int*) this -> value) | (int) argument; case this -> long__type: return *((long*) this -> value) | (int) argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) | (int) argument; case this -> long_long__type: return *((long long*) this -> value) | (int) argument; case this -> short__type: return *((short*) this -> value) | (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) | (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) | (int) argument; } return *((int*) this -> value) | (int) argument; }
            friend inline primitive operator |(void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) | *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) | *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) | *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) | ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) | ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) | *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) | *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) | ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) | *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) | *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) | ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) | *((wchar_t*) argumentB.value); } return ((int) argumentA) | *((int*) argumentB.value); }
            friend inline primitive operator |(void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) | *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) | *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) | *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) | ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) | ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) | *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) | *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) | ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) | *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) | *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) | ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) | *((wchar_t*) argumentB.value); } return ((int) argumentA) | *((int*) argumentB.value); }
            friend inline primitive operator |(void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) | *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) | *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) | *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) | ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) | ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) | *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) | *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) | ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) | *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) | *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) | ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) | *((wchar_t*) argumentB.value); } return ((int) argumentA) | *((int*) argumentB.value); }
            friend inline primitive operator |(void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) | *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) | *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) | *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) | ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) | ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) | *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) | *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) | ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) | *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) | *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) | ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) | *((wchar_t*) argumentB.value); } return ((int) argumentA) | *((int*) argumentB.value); }

            inline primitive operator |(const void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) | (int) argument; case this -> char__type: return *((char*) this -> value) | (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) | (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) | (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) | (int) argument; case this -> double__type: return ((long) *((double*) this -> value)) | (int) argument; case this -> float__type: return ((int) *((float*) this -> value)) | (int) argument; case this -> int__type: return *((int*) this -> value) | (int) argument; case this -> long__type: return *((long*) this -> value) | (int) argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) | (int) argument; case this -> long_long__type: return *((long long*) this -> value) | (int) argument; case this -> short__type: return *((short*) this -> value) | (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) | (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) | (int) argument; } return *((int*) this -> value) | (int) argument; }
            friend inline primitive operator |(const void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) | *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) | *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) | *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) | ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) | ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) | *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) | *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) | ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) | *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) | *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) | ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) | *((wchar_t*) argumentB.value); } return ((int) argumentA) | *((int*) argumentB.value); }
            friend inline primitive operator |(const void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) | *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) | *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) | *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) | ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) | ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) | *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) | *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) | ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) | *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) | *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) | ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) | *((wchar_t*) argumentB.value); } return ((int) argumentA) | *((int*) argumentB.value); }
            friend inline primitive operator |(const void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) | *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) | *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) | *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) | ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) | ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) | *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) | *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) | ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) | *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) | *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) | ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) | *((wchar_t*) argumentB.value); } return ((int) argumentA) | *((int*) argumentB.value); }
            friend inline primitive operator |(const void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) | *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) | *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) | *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) | ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) | ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) | *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) | *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) | ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) | *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) | *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) | ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) | *((wchar_t*) argumentB.value); } return ((int) argumentA) | *((int*) argumentB.value); }

            inline primitive operator |(const wchar_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) | argument; case this -> char__type: return *((char*) this -> value) | argument; case this -> char8_t__type: return *((char8_t*) this -> value) | argument; case this -> char16_t__type: return *((char16_t*) this -> value) | argument; case this -> char32_t__type: return *((char32_t*) this -> value) | argument; case this -> double__type: return ((long) *((double*) this -> value)) | argument; case this -> float__type: return ((int) *((float*) this -> value)) | argument; case this -> int__type: return *((int*) this -> value) | argument; case this -> long__type: return *((long*) this -> value) | argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) | argument; case this -> long_long__type: return *((long long*) this -> value) | argument; case this -> short__type: return *((short*) this -> value) | argument; case this -> void__type: return ((int) *((void**) this -> value)) | argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) | argument; } return *((wchar_t*) this -> value) | argument; }
            friend inline primitive operator |(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((wchar_t*) argumentB.value); }
            friend inline primitive operator |(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((wchar_t*) argumentB.value); }
            friend inline primitive operator |(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((wchar_t*) argumentB.value); }
            friend inline primitive operator |(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA | *((boolean*) argumentB.value); case argumentB.char__type: return argumentA | *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA | *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA | *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA | *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA | (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA | (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA | *((int*) argumentB.value); case argumentB.long__type: return argumentA | *((long*) argumentB.value); case argumentB.long_double__type: return argumentA | (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA | *((long long*) argumentB.value); case argumentB.short__type: return argumentA | *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) | argumentA; case argumentB.wchar_t__type: return argumentA | *((wchar_t*) argumentB.value); } return argumentA | *((wchar_t*) argumentB.value); }

            // [~]
            inline primitive operator ~(void) const { switch (this -> type) { case this -> boolean__type: return ~*((boolean*) this -> value); case this -> char__type: return ~*((char*) this -> value); case this -> char8_t__type: return ~*((char8_t*) this -> value); case this -> char16_t__type: return ~*((char16_t*) this -> value); case this -> char32_t__type: return ~*((char32_t*) this -> value); case this -> double__type: return ~((long) *((double*) this -> value)); case this -> float__type: return ~((int) *((float*) this -> value)); case this -> int__type: return ~*((int*) this -> value); case this -> long__type: return ~*((long*) this -> value); case this -> long_double__type: return ~((long long) *((long double*) this -> value)); case this -> long_long__type: return ~*((long long*) this -> value); case this -> short__type: return ~*((short*) this -> value); case this -> void__type: return ~((int) *((void**) this -> value)); case this -> wchar_t__type: return ~*((wchar_t*) this -> value); } return *this; }

            // [!]
            inline boolean operator !(void) const { switch (this -> type) { case this -> boolean__type: return !*((boolean*) this -> value); case this -> char__type: return !*((char*) this -> value); case this -> char8_t__type: return !*((char8_t*) this -> value); case this -> char16_t__type: return !*((char16_t*) this -> value); case this -> char32_t__type: return !*((char32_t*) this -> value); case this -> double__type: return !*((double*) this -> value); case this -> float__type: return !*((float*) this -> value); case this -> int__type: return !*((int*) this -> value); case this -> long__type: return !*((long*) this -> value); case this -> long_double__type: return !*((long double*) this -> value); case this -> long_long__type: return !*((long long*) this -> value); case this -> short__type: return !*((short*) this -> value); case this -> void__type: return !*((void**) this -> value); case this -> wchar_t__type: return !*((wchar_t*) this -> value); } return false; }

            // [=]
            inline boolean operator =(const boolean argument) { this -> type = this -> boolean__type; this -> value = pointerReallocateMemory(this -> value, sizeof(boolean)); *((boolean*) this -> value) = argument; return argument; }
            inline char operator =(const char argument) { this -> type = this -> char__type; this -> value = pointerReallocateMemory(this -> value, sizeof(char)); *((char*) this -> value) = argument; return argument; }
            inline char8_t operator =(const char8_t argument) { this -> type = this -> char8_t__type; this -> value = pointerReallocateMemory(this -> value, sizeof(char8_t)); *((char8_t*) this -> value) = argument; return argument; }
            inline char16_t operator =(const char16_t argument) { this -> type = this -> char16_t__type; this -> value = pointerReallocateMemory(this -> value, sizeof(char16_t)); *((char16_t*) this -> value) = argument; return argument; }
            inline char32_t operator =(const char32_t argument) { this -> type = this -> char32_t__type; this -> value = pointerReallocateMemory(this -> value, sizeof(char32_t)); *((char32_t*) this -> value) = argument; return argument; }
            inline double operator =(const double argument) { this -> type = this -> double__type; this -> value = pointerReallocateMemory(this -> value, sizeof(double)); *((double*) this -> value) = argument; return argument; }
            inline float operator =(const float argument) { this -> type = this -> float__type; this -> value = pointerReallocateMemory(this -> value, sizeof(float)); *((float*) this -> value) = argument; return argument; }
            inline int operator =(const int argument) { this -> type = this -> int__type; this -> value = pointerReallocateMemory(this -> value, sizeof(int)); *((int*) this -> value) = argument; return argument; }
            inline long operator =(const long argument) { this -> type = this -> long__type; this -> value = pointerReallocateMemory(this -> value, sizeof(long)); *((long*) this -> value) = argument; return argument; }
            inline long double operator =(const long double argument) { this -> type = this -> long_double__type; this -> value = pointerReallocateMemory(this -> value, sizeof(long double)); *((long double*) this -> value) = argument; return argument; }
            inline long long operator =(const long long argument) { this -> type = this -> long_long__type; this -> value = pointerReallocateMemory(this -> value, sizeof(long long)); *((long long*) this -> value) = argument; return argument; }
            inline short operator =(const short argument) { this -> type = this -> short__type; this -> value = pointerReallocateMemory(this -> value, sizeof(short)); *((short*) this -> value) = argument; return argument; }
            inline signed char operator =(const signed char argument) { this -> type = this -> char__type; this -> value = pointerReallocateMemory(this -> value, sizeof(signed char)); *((signed char*) this -> value) = argument; return argument; }
            inline unsigned char operator =(const unsigned char argument) { this -> type = this -> char__type; this -> value = pointerReallocateMemory(this -> value, sizeof(unsigned char)); *((unsigned char*) this -> value) = argument; return argument; }
            inline unsigned int operator =(const unsigned int argument) { this -> type = this -> int__type; this -> value = pointerReallocateMemory(this -> value, sizeof(unsigned int)); *((unsigned int*) this -> value) = argument; return argument; }
            inline unsigned long operator =(const unsigned long argument) { this -> type = this -> long__type; this -> value = pointerReallocateMemory(this -> value, sizeof(unsigned long)); *((unsigned long*) this -> value) = argument; return argument; }
            inline unsigned long long operator =(const unsigned long long argument) { this -> type = this -> long_long__type; this -> value = pointerReallocateMemory(this -> value, sizeof(unsigned long long)); *((unsigned long long*) this -> value) = argument; return argument; }
            inline unsigned short operator =(const unsigned short argument) { this -> type = this -> short__type; this -> value = pointerReallocateMemory(this -> value, sizeof(unsigned short)); *((unsigned short*) this -> value) = argument; return argument; }
            inline void* operator =(void* argument) { this -> type = this -> void__type; this -> value = pointerReallocateMemory(this -> value, sizeof(void*)); *((void**) this -> value) = argument; return argument; }
            inline const void* operator =(const void* argument) { this -> type = this -> void__type; this -> value = pointerReallocateMemory(this -> value, sizeof(const void*)); *((const void**) this -> value) = argument; return argument; }
            inline wchar_t operator =(const wchar_t argument) { this -> type = this -> wchar_t__type; this -> value = pointerReallocateMemory(this -> value, sizeof(wchar_t)); *((wchar_t*) this -> value) = argument; return argument; }

            inline primitive& operator =(primitive& argument) { switch (this -> type = argument.type) { case this -> boolean__type: this -> value = pointerAllocateMemory(this -> value, sizeof(boolean)); *((boolean*) this -> value) = *((boolean*) argument.value); break; case this -> char__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char)); *((char*) this -> value) = *((char*) argument.value); break; case this -> char8_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char8_t)); *((char8_t*) this -> value) = *((char8_t*) argument.value); break; case this -> char16_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char16_t)); *((char16_t*) this -> value) = *((char16_t*) argument.value); break; case this -> char32_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char32_t)); *((char32_t*) this -> value) = *((char32_t*) argument.value); break; case this -> double__type: this -> value = pointerAllocateMemory(this -> value, sizeof(double)); *((double*) this -> value) = *((double*) argument.value); break; case this -> float__type: this -> value = pointerAllocateMemory(this -> value, sizeof(float)); *((float*) this -> value) = *((float*) argument.value); break; case this -> int__type: this -> value = pointerAllocateMemory(this -> value, sizeof(int)); *((int*) this -> value) = *((int*) argument.value); break; case this -> long__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long)); *((long*) this -> value) = *((long*) argument.value); break; case this -> long_double__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long double)); *((long double*) this -> value) = *((long double*) argument.value); break; case this -> long_long__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long long)); *((long long*) this -> value) = *((long long*) argument.value); break; case this -> short__type: this -> value = pointerAllocateMemory(this -> value, sizeof(short)); *((short*) this -> value) = *((short*) argument.value); break; case this -> void__type: this -> value = pointerAllocateMemory(this -> value, sizeof(void*)); *((void**) this -> value) = *((void**) argument.value); break; case this -> wchar_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(wchar_t)); *((wchar_t*) this -> value) = *((wchar_t*) argument.value); break; } return argument; }
            inline primitive& operator =(primitive&& argument) { switch (this -> type = argument.type) { case this -> boolean__type: this -> value = pointerAllocateMemory(this -> value, sizeof(boolean)); *((boolean*) this -> value) = *((boolean*) argument.value); break; case this -> char__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char)); *((char*) this -> value) = *((char*) argument.value); break; case this -> char8_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char8_t)); *((char8_t*) this -> value) = *((char8_t*) argument.value); break; case this -> char16_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char16_t)); *((char16_t*) this -> value) = *((char16_t*) argument.value); break; case this -> char32_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char32_t)); *((char32_t*) this -> value) = *((char32_t*) argument.value); break; case this -> double__type: this -> value = pointerAllocateMemory(this -> value, sizeof(double)); *((double*) this -> value) = *((double*) argument.value); break; case this -> float__type: this -> value = pointerAllocateMemory(this -> value, sizeof(float)); *((float*) this -> value) = *((float*) argument.value); break; case this -> int__type: this -> value = pointerAllocateMemory(this -> value, sizeof(int)); *((int*) this -> value) = *((int*) argument.value); break; case this -> long__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long)); *((long*) this -> value) = *((long*) argument.value); break; case this -> long_double__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long double)); *((long double*) this -> value) = *((long double*) argument.value); break; case this -> long_long__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long long)); *((long long*) this -> value) = *((long long*) argument.value); break; case this -> short__type: this -> value = pointerAllocateMemory(this -> value, sizeof(short)); *((short*) this -> value) = *((short*) argument.value); break; case this -> void__type: this -> value = pointerAllocateMemory(this -> value, sizeof(void*)); *((void**) this -> value) = *((void**) argument.value); break; case this -> wchar_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(wchar_t)); *((wchar_t*) this -> value) = *((wchar_t*) argument.value); break; } return argument; }
            inline const primitive& operator =(const primitive& argument) { switch (this -> type = argument.type) { case this -> boolean__type: this -> value = pointerAllocateMemory(this -> value, sizeof(boolean)); *((boolean*) this -> value) = *((boolean*) argument.value); break; case this -> char__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char)); *((char*) this -> value) = *((char*) argument.value); break; case this -> char8_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char8_t)); *((char8_t*) this -> value) = *((char8_t*) argument.value); break; case this -> char16_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char16_t)); *((char16_t*) this -> value) = *((char16_t*) argument.value); break; case this -> char32_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char32_t)); *((char32_t*) this -> value) = *((char32_t*) argument.value); break; case this -> double__type: this -> value = pointerAllocateMemory(this -> value, sizeof(double)); *((double*) this -> value) = *((double*) argument.value); break; case this -> float__type: this -> value = pointerAllocateMemory(this -> value, sizeof(float)); *((float*) this -> value) = *((float*) argument.value); break; case this -> int__type: this -> value = pointerAllocateMemory(this -> value, sizeof(int)); *((int*) this -> value) = *((int*) argument.value); break; case this -> long__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long)); *((long*) this -> value) = *((long*) argument.value); break; case this -> long_double__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long double)); *((long double*) this -> value) = *((long double*) argument.value); break; case this -> long_long__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long long)); *((long long*) this -> value) = *((long long*) argument.value); break; case this -> short__type: this -> value = pointerAllocateMemory(this -> value, sizeof(short)); *((short*) this -> value) = *((short*) argument.value); break; case this -> void__type: this -> value = pointerAllocateMemory(this -> value, sizeof(void*)); *((void**) this -> value) = *((void**) argument.value); break; case this -> wchar_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(wchar_t)); *((wchar_t*) this -> value) = *((wchar_t*) argument.value); break; } return argument; }
            inline const primitive& operator =(const primitive&& argument) { switch (this -> type = argument.type) { case this -> boolean__type: this -> value = pointerAllocateMemory(this -> value, sizeof(boolean)); *((boolean*) this -> value) = *((boolean*) argument.value); break; case this -> char__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char)); *((char*) this -> value) = *((char*) argument.value); break; case this -> char8_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char8_t)); *((char8_t*) this -> value) = *((char8_t*) argument.value); break; case this -> char16_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char16_t)); *((char16_t*) this -> value) = *((char16_t*) argument.value); break; case this -> char32_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(char32_t)); *((char32_t*) this -> value) = *((char32_t*) argument.value); break; case this -> double__type: this -> value = pointerAllocateMemory(this -> value, sizeof(double)); *((double*) this -> value) = *((double*) argument.value); break; case this -> float__type: this -> value = pointerAllocateMemory(this -> value, sizeof(float)); *((float*) this -> value) = *((float*) argument.value); break; case this -> int__type: this -> value = pointerAllocateMemory(this -> value, sizeof(int)); *((int*) this -> value) = *((int*) argument.value); break; case this -> long__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long)); *((long*) this -> value) = *((long*) argument.value); break; case this -> long_double__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long double)); *((long double*) this -> value) = *((long double*) argument.value); break; case this -> long_long__type: this -> value = pointerAllocateMemory(this -> value, sizeof(long long)); *((long long*) this -> value) = *((long long*) argument.value); break; case this -> short__type: this -> value = pointerAllocateMemory(this -> value, sizeof(short)); *((short*) this -> value) = *((short*) argument.value); break; case this -> void__type: this -> value = pointerAllocateMemory(this -> value, sizeof(void*)); *((void**) this -> value) = *((void**) argument.value); break; case this -> wchar_t__type: this -> value = pointerAllocateMemory(this -> value, sizeof(wchar_t)); *((wchar_t*) this -> value) = *((wchar_t*) argument.value); break; } return argument; }

            // [<]
            inline boolean operator <(const boolean argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < argument; case this -> char__type: return *((char*) this -> value) < argument; case this -> char8_t__type: return *((char8_t*) this -> value) < argument; case this -> char16_t__type: return *((char16_t*) this -> value) < argument; case this -> char32_t__type: return *((char32_t*) this -> value) < argument; case this -> double__type: return *((double*) this -> value) < argument; case this -> float__type: return *((float*) this -> value) < argument; case this -> int__type: return *((int*) this -> value) < argument; case this -> long__type: return *((long*) this -> value) < argument; case this -> long_double__type: return *((long double*) this -> value) < argument; case this -> long_long__type: return *((long long*) this -> value) < argument; case this -> short__type: return *((short*) this -> value) < argument; case this -> void__type: return ((int) *((void**) this -> value)) < argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < argument; } return false; }
            friend inline boolean operator <(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <(const char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < argument; case this -> char__type: return *((char*) this -> value) < argument; case this -> char8_t__type: return *((char8_t*) this -> value) < argument; case this -> char16_t__type: return *((char16_t*) this -> value) < argument; case this -> char32_t__type: return *((char32_t*) this -> value) < (char32_t) argument; case this -> double__type: return *((double*) this -> value) < argument; case this -> float__type: return *((float*) this -> value) < argument; case this -> int__type: return *((int*) this -> value) < argument; case this -> long__type: return *((long*) this -> value) < argument; case this -> long_double__type: return *((long double*) this -> value) < argument; case this -> long_long__type: return *((long long*) this -> value) < argument; case this -> short__type: return *((short*) this -> value) < argument; case this -> void__type: return ((int) *((void**) this -> value)) < argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < (wchar_t) argument; } return false; }
            friend inline boolean operator <(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) < *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <(const char8_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < argument; case this -> char__type: return *((char*) this -> value) < argument; case this -> char8_t__type: return *((char8_t*) this -> value) < argument; case this -> char16_t__type: return *((char16_t*) this -> value) < argument; case this -> char32_t__type: return *((char32_t*) this -> value) < argument; case this -> double__type: return *((double*) this -> value) < argument; case this -> float__type: return *((float*) this -> value) < argument; case this -> int__type: return *((int*) this -> value) < argument; case this -> long__type: return *((long*) this -> value) < argument; case this -> long_double__type: return *((long double*) this -> value) < argument; case this -> long_long__type: return *((long long*) this -> value) < argument; case this -> short__type: return *((short*) this -> value) < argument; case this -> void__type: return ((int) *((void**) this -> value)) < argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < argument; } return false; }
            friend inline boolean operator <(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <(const char16_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < argument; case this -> char__type: return *((char*) this -> value) < argument; case this -> char8_t__type: return *((char8_t*) this -> value) < argument; case this -> char16_t__type: return *((char16_t*) this -> value) < argument; case this -> char32_t__type: return *((char32_t*) this -> value) < (char32_t) argument; case this -> double__type: return *((double*) this -> value) < argument; case this -> float__type: return *((float*) this -> value) < argument; case this -> int__type: return *((int*) this -> value) < argument; case this -> long__type: return *((long*) this -> value) < argument; case this -> long_double__type: return *((long double*) this -> value) < argument; case this -> long_long__type: return *((long long*) this -> value) < argument; case this -> short__type: return *((short*) this -> value) < argument; case this -> void__type: return ((int) *((void**) this -> value)) < argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < (wchar_t) argument; } return false; }
            friend inline boolean operator <(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) < *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <(const char32_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < argument; case this -> char__type: return ((char32_t) *((char*) this -> value)) < argument; case this -> char8_t__type: return *((char8_t*) this -> value) < argument; case this -> char16_t__type: return *((char16_t*) this -> value) < argument; case this -> char32_t__type: return *((char32_t*) this -> value) < argument; case this -> double__type: return *((double*) this -> value) < argument; case this -> float__type: return *((float*) this -> value) < argument; case this -> int__type: return ((char32_t) *((int*) this -> value)) < argument; case this -> long__type: return ((char32_t) *((long*) this -> value)) < argument; case this -> long_double__type: return *((long double*) this -> value) < argument; case this -> long_long__type: return *((long long*) this -> value) < argument; case this -> short__type: return ((char32_t) *((short*) this -> value)) < argument; case this -> void__type: return ((char32_t) (int) *((void**) this -> value)) < argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < (wchar_t) argument; } return false; }
            friend inline boolean operator <(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA < (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA < (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA < (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA < (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA < (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA < (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA < (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA < (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) < *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <(const double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < argument; case this -> char__type: return *((char*) this -> value) < argument; case this -> char8_t__type: return *((char8_t*) this -> value) < argument; case this -> char16_t__type: return *((char16_t*) this -> value) < argument; case this -> char32_t__type: return *((char32_t*) this -> value) < argument; case this -> double__type: return *((double*) this -> value) < argument; case this -> float__type: return *((float*) this -> value) < argument; case this -> int__type: return *((int*) this -> value) < argument; case this -> long__type: return *((long*) this -> value) < argument; case this -> long_double__type: return *((long double*) this -> value) < argument; case this -> long_long__type: return *((long long*) this -> value) < argument; case this -> short__type: return *((short*) this -> value) < argument; case this -> void__type: return ((int) *((void**) this -> value)) < argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < argument; } return false; }
            friend inline boolean operator <(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <(const float argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < argument; case this -> char__type: return *((char*) this -> value) < argument; case this -> char8_t__type: return *((char8_t*) this -> value) < argument; case this -> char16_t__type: return *((char16_t*) this -> value) < argument; case this -> char32_t__type: return *((char32_t*) this -> value) < argument; case this -> double__type: return *((double*) this -> value) < argument; case this -> float__type: return *((float*) this -> value) < argument; case this -> int__type: return *((int*) this -> value) < argument; case this -> long__type: return *((long*) this -> value) < argument; case this -> long_double__type: return *((long double*) this -> value) < argument; case this -> long_long__type: return *((long long*) this -> value) < argument; case this -> short__type: return *((short*) this -> value) < argument; case this -> void__type: return ((int) *((void**) this -> value)) < argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < argument; } return false; }
            friend inline boolean operator <(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <(const int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < argument; case this -> char__type: return *((char*) this -> value) < argument; case this -> char8_t__type: return *((char8_t*) this -> value) < argument; case this -> char16_t__type: return *((char16_t*) this -> value) < argument; case this -> char32_t__type: return *((char32_t*) this -> value) < (char32_t) argument; case this -> double__type: return *((double*) this -> value) < argument; case this -> float__type: return *((float*) this -> value) < argument; case this -> int__type: return *((int*) this -> value) < argument; case this -> long__type: return *((long*) this -> value) < argument; case this -> long_double__type: return *((long double*) this -> value) < argument; case this -> long_long__type: return *((long long*) this -> value) < argument; case this -> short__type: return *((short*) this -> value) < argument; case this -> void__type: return ((int) *((void**) this -> value)) < argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < argument; } return false; }
            friend inline boolean operator <(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <(const long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < argument; case this -> char__type: return *((char*) this -> value) < argument; case this -> char8_t__type: return *((char8_t*) this -> value) < argument; case this -> char16_t__type: return *((char16_t*) this -> value) < argument; case this -> char32_t__type: return *((char32_t*) this -> value) < (char32_t) argument; case this -> double__type: return *((double*) this -> value) < argument; case this -> float__type: return *((float*) this -> value) < argument; case this -> int__type: return *((int*) this -> value) < argument; case this -> long__type: return *((long*) this -> value) < argument; case this -> long_double__type: return *((long double*) this -> value) < argument; case this -> long_long__type: return *((long long*) this -> value) < argument; case this -> short__type: return *((short*) this -> value) < argument; case this -> void__type: return ((int) *((void**) this -> value)) < argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < argument; } return false; }
            friend inline boolean operator <(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <(const long double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < argument; case this -> char__type: return *((char*) this -> value) < argument; case this -> char8_t__type: return *((char8_t*) this -> value) < argument; case this -> char16_t__type: return *((char16_t*) this -> value) < argument; case this -> char32_t__type: return *((char32_t*) this -> value) < argument; case this -> double__type: return *((double*) this -> value) < argument; case this -> float__type: return *((float*) this -> value) < argument; case this -> int__type: return *((int*) this -> value) < argument; case this -> long__type: return *((long*) this -> value) < argument; case this -> long_double__type: return *((long double*) this -> value) < argument; case this -> long_long__type: return *((long long*) this -> value) < argument; case this -> short__type: return *((short*) this -> value) < argument; case this -> void__type: return ((int) *((void**) this -> value)) < argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < argument; } return false; }
            friend inline boolean operator <(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <(const long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < argument; case this -> char__type: return *((char*) this -> value) < argument; case this -> char8_t__type: return *((char8_t*) this -> value) < argument; case this -> char16_t__type: return *((char16_t*) this -> value) < argument; case this -> char32_t__type: return *((char32_t*) this -> value) < argument; case this -> double__type: return *((double*) this -> value) < argument; case this -> float__type: return *((float*) this -> value) < argument; case this -> int__type: return *((int*) this -> value) < argument; case this -> long__type: return *((long*) this -> value) < argument; case this -> long_double__type: return *((long double*) this -> value) < argument; case this -> long_long__type: return *((long long*) this -> value) < argument; case this -> short__type: return *((short*) this -> value) < argument; case this -> void__type: return ((int) *((void**) this -> value)) < argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < argument; } return false; }
            friend inline boolean operator <(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <(const short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < argument; case this -> char__type: return *((char*) this -> value) < argument; case this -> char8_t__type: return *((char8_t*) this -> value) < argument; case this -> char16_t__type: return *((char16_t*) this -> value) < argument; case this -> char32_t__type: return *((char32_t*) this -> value) < (char32_t) argument; case this -> double__type: return *((double*) this -> value) < argument; case this -> float__type: return *((float*) this -> value) < argument; case this -> int__type: return *((int*) this -> value) < argument; case this -> long__type: return *((long*) this -> value) < argument; case this -> long_double__type: return *((long double*) this -> value) < argument; case this -> long_long__type: return *((long long*) this -> value) < argument; case this -> short__type: return *((short*) this -> value) < argument; case this -> void__type: return ((int) *((void**) this -> value)) < argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < argument; } return false; }
            friend inline boolean operator <(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <(const signed char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < argument; case this -> char__type: return *((char*) this -> value) < argument; case this -> char8_t__type: return *((char8_t*) this -> value) < argument; case this -> char16_t__type: return *((char16_t*) this -> value) < argument; case this -> char32_t__type: return *((char32_t*) this -> value) < (char32_t) argument; case this -> double__type: return *((double*) this -> value) < argument; case this -> float__type: return *((float*) this -> value) < argument; case this -> int__type: return *((int*) this -> value) < argument; case this -> long__type: return *((long*) this -> value) < argument; case this -> long_double__type: return *((long double*) this -> value) < argument; case this -> long_long__type: return *((long long*) this -> value) < argument; case this -> short__type: return *((short*) this -> value) < argument; case this -> void__type: return ((int) *((void**) this -> value)) < argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < argument; } return false; }
            friend inline boolean operator <(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <(const unsigned char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < argument; case this -> char__type: return *((char*) this -> value) < argument; case this -> char8_t__type: return *((char8_t*) this -> value) < argument; case this -> char16_t__type: return *((char16_t*) this -> value) < argument; case this -> char32_t__type: return *((char32_t*) this -> value) < argument; case this -> double__type: return *((double*) this -> value) < argument; case this -> float__type: return *((float*) this -> value) < argument; case this -> int__type: return *((int*) this -> value) < argument; case this -> long__type: return *((long*) this -> value) < argument; case this -> long_double__type: return *((long double*) this -> value) < argument; case this -> long_long__type: return *((long long*) this -> value) < argument; case this -> short__type: return *((short*) this -> value) < argument; case this -> void__type: return ((int) *((void**) this -> value)) < argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < argument; } return false; }
            friend inline boolean operator <(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <(const unsigned int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < argument; case this -> char__type: return ((unsigned int) *((char*) this -> value)) < argument; case this -> char8_t__type: return *((char8_t*) this -> value) < argument; case this -> char16_t__type: return *((char16_t*) this -> value) < argument; case this -> char32_t__type: return *((char32_t*) this -> value) < argument; case this -> double__type: return *((double*) this -> value) < argument; case this -> float__type: return *((float*) this -> value) < argument; case this -> int__type: return *((int*) this -> value) < (int) argument; case this -> long__type: return *((long*) this -> value) < (long) argument; case this -> long_double__type: return *((long double*) this -> value) < argument; case this -> long_long__type: return *((long long*) this -> value) < argument; case this -> short__type: return ((unsigned int) *((short*) this -> value)) < argument; case this -> void__type: return ((int) *((void**) this -> value)) < (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < argument; } return false; }
            friend inline boolean operator <(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) < *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) < *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) < *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) < *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <(const unsigned long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < argument; case this -> char__type: return ((unsigned long) *((char*) this -> value)) < argument; case this -> char8_t__type: return *((char8_t*) this -> value) < argument; case this -> char16_t__type: return *((char16_t*) this -> value) < argument; case this -> char32_t__type: return *((char32_t*) this -> value) < argument; case this -> double__type: return *((double*) this -> value) < argument; case this -> float__type: return *((float*) this -> value) < argument; case this -> int__type: return ((unsigned long) *((int*) this -> value)) < argument; case this -> long__type: return *((long*) this -> value) < (long) argument; case this -> long_double__type: return *((long double*) this -> value) < argument; case this -> long_long__type: return *((long long*) this -> value) < argument; case this -> short__type: return ((unsigned long) *((short*) this -> value)) < argument; case this -> void__type: return ((unsigned long) (int) *((void**) this -> value)) < argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < argument; } return false; }
            friend inline boolean operator <(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA < (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA < (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA < (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA < (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <(const unsigned long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < argument; case this -> char__type: return ((unsigned long long) *((char*) this -> value)) < argument; case this -> char8_t__type: return *((char8_t*) this -> value) < argument; case this -> char16_t__type: return *((char16_t*) this -> value) < argument; case this -> char32_t__type: return *((char32_t*) this -> value) < argument; case this -> double__type: return *((double*) this -> value) < argument; case this -> float__type: return *((float*) this -> value) < argument; case this -> int__type: return ((unsigned long long) *((int*) this -> value)) < argument; case this -> long__type: return ((unsigned long long) *((long*) this -> value)) < argument; case this -> long_double__type: return *((long double*) this -> value) < argument; case this -> long_long__type: return *((long long*) this -> value) < (long long) argument; case this -> short__type: return ((unsigned long long) *((short*) this -> value)) < argument; case this -> void__type: return ((unsigned long long) (int) *((void**) this -> value)) < argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < argument; } return false; }
            friend inline boolean operator <(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA < (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA < (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA < (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA < (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA < (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA < (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA < (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA < (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <(const unsigned short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < argument; case this -> char__type: return *((char*) this -> value) < argument; case this -> char8_t__type: return *((char8_t*) this -> value) < argument; case this -> char16_t__type: return *((char16_t*) this -> value) < argument; case this -> char32_t__type: return *((char32_t*) this -> value) < argument; case this -> double__type: return *((double*) this -> value) < argument; case this -> float__type: return *((float*) this -> value) < argument; case this -> int__type: return *((int*) this -> value) < argument; case this -> long__type: return *((long*) this -> value) < argument; case this -> long_double__type: return *((long double*) this -> value) < argument; case this -> long_long__type: return *((long long*) this -> value) < argument; case this -> short__type: return *((short*) this -> value) < argument; case this -> void__type: return ((int) *((void**) this -> value)) < argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < argument; } return false; }
            friend inline boolean operator <(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <(void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < (int) argument; case this -> char__type: return *((char*) this -> value) < (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) < (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) < (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) < (char32_t) (int) argument; case this -> double__type: return *((double*) this -> value) < (int) argument; case this -> float__type: return *((float*) this -> value) < (int) argument; case this -> int__type: return *((int*) this -> value) < (int) argument; case this -> long__type: return *((long*) this -> value) < (int) argument; case this -> long_double__type: return *((long double*) this -> value) < (int) argument; case this -> long_long__type: return *((long long*) this -> value) < (int) argument; case this -> short__type: return *((short*) this -> value) < (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) < (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < (int) argument; } return false; }
            friend inline boolean operator <(void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) < *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) < *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) < *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) < *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) < *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) < *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) < *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) < *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) < *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) < *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) < *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) < *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) < *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) < *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) < *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) < *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) < *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) < *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) < *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) < *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) < *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) < *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) < *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) < *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) < *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) < *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) < *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) < *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) < *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) < *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) < *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) < *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) < *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) < *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) < *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) < *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) < *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <(const void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < (int) argument; case this -> char__type: return *((char*) this -> value) < (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) < (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) < (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) < (char32_t) (int) argument; case this -> double__type: return *((double*) this -> value) < (int) argument; case this -> float__type: return *((float*) this -> value) < (int) argument; case this -> int__type: return *((int*) this -> value) < (int) argument; case this -> long__type: return *((long*) this -> value) < (int) argument; case this -> long_double__type: return *((long double*) this -> value) < (int) argument; case this -> long_long__type: return *((long long*) this -> value) < (int) argument; case this -> short__type: return *((short*) this -> value) < (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) < (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < (int) argument; } return false; }
            friend inline boolean operator <(const void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) < *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) < *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) < *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) < *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) < *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) < *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) < *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) < *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) < *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) < *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) < *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) < *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) < *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) < *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) < *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) < *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) < *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) < *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) < *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) < *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) < *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) < *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) < *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) < *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) < *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) < *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) < *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) < *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) < *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) < *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) < *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) < *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) < *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) < *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) < *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) < *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) < *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) < *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <(const wchar_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) < argument; case this -> char__type: return *((char*) this -> value) < argument; case this -> char8_t__type: return *((char8_t*) this -> value) < argument; case this -> char16_t__type: return *((char16_t*) this -> value) < argument; case this -> char32_t__type: return *((char32_t*) this -> value) < argument; case this -> double__type: return *((double*) this -> value) < argument; case this -> float__type: return *((float*) this -> value) < argument; case this -> int__type: return *((int*) this -> value) < argument; case this -> long__type: return *((long*) this -> value) < argument; case this -> long_double__type: return *((long double*) this -> value) < argument; case this -> long_long__type: return *((long long*) this -> value) < argument; case this -> short__type: return *((short*) this -> value) < argument; case this -> void__type: return ((int) *((void**) this -> value)) < argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) < argument; } return false; }
            friend inline boolean operator <(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA < *((boolean*) argumentB.value); case argumentB.char__type: return argumentA < *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA < *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA < *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA < *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA < *((double*) argumentB.value); case argumentB.float__type: return argumentA < *((float*) argumentB.value); case argumentB.int__type: return argumentA < *((int*) argumentB.value); case argumentB.long__type: return argumentA < *((long*) argumentB.value); case argumentB.long_double__type: return argumentA < *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA < *((long long*) argumentB.value); case argumentB.short__type: return argumentA < *((short*) argumentB.value); case argumentB.void__type: return argumentA < (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA < *((wchar_t*) argumentB.value); } return false; }

            // [>]
            inline boolean operator >(const boolean argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > argument; case this -> char__type: return *((char*) this -> value) > argument; case this -> char8_t__type: return *((char8_t*) this -> value) > argument; case this -> char16_t__type: return *((char16_t*) this -> value) > argument; case this -> char32_t__type: return *((char32_t*) this -> value) > argument; case this -> double__type: return *((double*) this -> value) > argument; case this -> float__type: return *((float*) this -> value) > argument; case this -> int__type: return *((int*) this -> value) > argument; case this -> long__type: return *((long*) this -> value) > argument; case this -> long_double__type: return *((long double*) this -> value) > argument; case this -> long_long__type: return *((long long*) this -> value) > argument; case this -> short__type: return *((short*) this -> value) > argument; case this -> void__type: return ((int) *((void**) this -> value)) > argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > argument; } return false; }
            friend inline boolean operator >(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >(const char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > argument; case this -> char__type: return *((char*) this -> value) > argument; case this -> char8_t__type: return *((char8_t*) this -> value) > argument; case this -> char16_t__type: return *((char16_t*) this -> value) > argument; case this -> char32_t__type: return *((char32_t*) this -> value) > (char32_t) argument; case this -> double__type: return *((double*) this -> value) > argument; case this -> float__type: return *((float*) this -> value) > argument; case this -> int__type: return *((int*) this -> value) > argument; case this -> long__type: return *((long*) this -> value) > argument; case this -> long_double__type: return *((long double*) this -> value) > argument; case this -> long_long__type: return *((long long*) this -> value) > argument; case this -> short__type: return *((short*) this -> value) > argument; case this -> void__type: return ((int) *((void**) this -> value)) > argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > (wchar_t) argument; } return false; }
            friend inline boolean operator >(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) > *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >(const char8_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > argument; case this -> char__type: return *((char*) this -> value) > argument; case this -> char8_t__type: return *((char8_t*) this -> value) > argument; case this -> char16_t__type: return *((char16_t*) this -> value) > argument; case this -> char32_t__type: return *((char32_t*) this -> value) > argument; case this -> double__type: return *((double*) this -> value) > argument; case this -> float__type: return *((float*) this -> value) > argument; case this -> int__type: return *((int*) this -> value) > argument; case this -> long__type: return *((long*) this -> value) > argument; case this -> long_double__type: return *((long double*) this -> value) > argument; case this -> long_long__type: return *((long long*) this -> value) > argument; case this -> short__type: return *((short*) this -> value) > argument; case this -> void__type: return ((int) *((void**) this -> value)) > argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > argument; } return false; }
            friend inline boolean operator >(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >(const char16_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > argument; case this -> char__type: return *((char*) this -> value) > argument; case this -> char8_t__type: return *((char8_t*) this -> value) > argument; case this -> char16_t__type: return *((char16_t*) this -> value) > argument; case this -> char32_t__type: return *((char32_t*) this -> value) > (char32_t) argument; case this -> double__type: return *((double*) this -> value) > argument; case this -> float__type: return *((float*) this -> value) > argument; case this -> int__type: return *((int*) this -> value) > argument; case this -> long__type: return *((long*) this -> value) > argument; case this -> long_double__type: return *((long double*) this -> value) > argument; case this -> long_long__type: return *((long long*) this -> value) > argument; case this -> short__type: return *((short*) this -> value) > argument; case this -> void__type: return ((int) *((void**) this -> value)) > argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > (wchar_t) argument; } return false; }
            friend inline boolean operator >(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) > *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >(const char32_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > argument; case this -> char__type: return ((char32_t) *((char*) this -> value)) > argument; case this -> char8_t__type: return *((char8_t*) this -> value) > argument; case this -> char16_t__type: return *((char16_t*) this -> value) > argument; case this -> char32_t__type: return *((char32_t*) this -> value) > argument; case this -> double__type: return *((double*) this -> value) > argument; case this -> float__type: return *((float*) this -> value) > argument; case this -> int__type: return ((char32_t) *((int*) this -> value)) > argument; case this -> long__type: return ((char32_t) *((long*) this -> value)) > argument; case this -> long_double__type: return *((long double*) this -> value) > argument; case this -> long_long__type: return *((long long*) this -> value) > argument; case this -> short__type: return ((char32_t) *((short*) this -> value)) > argument; case this -> void__type: return ((char32_t) (int) *((void**) this -> value)) > argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > (wchar_t) argument; } return false; }
            friend inline boolean operator >(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA > (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA > (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA > (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA > (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA > (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA > (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA > (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA > (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) > *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >(const double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > argument; case this -> char__type: return *((char*) this -> value) > argument; case this -> char8_t__type: return *((char8_t*) this -> value) > argument; case this -> char16_t__type: return *((char16_t*) this -> value) > argument; case this -> char32_t__type: return *((char32_t*) this -> value) > argument; case this -> double__type: return *((double*) this -> value) > argument; case this -> float__type: return *((float*) this -> value) > argument; case this -> int__type: return *((int*) this -> value) > argument; case this -> long__type: return *((long*) this -> value) > argument; case this -> long_double__type: return *((long double*) this -> value) > argument; case this -> long_long__type: return *((long long*) this -> value) > argument; case this -> short__type: return *((short*) this -> value) > argument; case this -> void__type: return ((int) *((void**) this -> value)) > argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > argument; } return false; }
            friend inline boolean operator >(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >(const float argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > argument; case this -> char__type: return *((char*) this -> value) > argument; case this -> char8_t__type: return *((char8_t*) this -> value) > argument; case this -> char16_t__type: return *((char16_t*) this -> value) > argument; case this -> char32_t__type: return *((char32_t*) this -> value) > argument; case this -> double__type: return *((double*) this -> value) > argument; case this -> float__type: return *((float*) this -> value) > argument; case this -> int__type: return *((int*) this -> value) > argument; case this -> long__type: return *((long*) this -> value) > argument; case this -> long_double__type: return *((long double*) this -> value) > argument; case this -> long_long__type: return *((long long*) this -> value) > argument; case this -> short__type: return *((short*) this -> value) > argument; case this -> void__type: return ((int) *((void**) this -> value)) > argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > argument; } return false; }
            friend inline boolean operator >(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >(const int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > argument; case this -> char__type: return *((char*) this -> value) > argument; case this -> char8_t__type: return *((char8_t*) this -> value) > argument; case this -> char16_t__type: return *((char16_t*) this -> value) > argument; case this -> char32_t__type: return *((char32_t*) this -> value) > (char32_t) argument; case this -> double__type: return *((double*) this -> value) > argument; case this -> float__type: return *((float*) this -> value) > argument; case this -> int__type: return *((int*) this -> value) > argument; case this -> long__type: return *((long*) this -> value) > argument; case this -> long_double__type: return *((long double*) this -> value) > argument; case this -> long_long__type: return *((long long*) this -> value) > argument; case this -> short__type: return *((short*) this -> value) > argument; case this -> void__type: return ((int) *((void**) this -> value)) > argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > argument; } return false; }
            friend inline boolean operator >(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >(const long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > argument; case this -> char__type: return *((char*) this -> value) > argument; case this -> char8_t__type: return *((char8_t*) this -> value) > argument; case this -> char16_t__type: return *((char16_t*) this -> value) > argument; case this -> char32_t__type: return *((char32_t*) this -> value) > (char32_t) argument; case this -> double__type: return *((double*) this -> value) > argument; case this -> float__type: return *((float*) this -> value) > argument; case this -> int__type: return *((int*) this -> value) > argument; case this -> long__type: return *((long*) this -> value) > argument; case this -> long_double__type: return *((long double*) this -> value) > argument; case this -> long_long__type: return *((long long*) this -> value) > argument; case this -> short__type: return *((short*) this -> value) > argument; case this -> void__type: return ((int) *((void**) this -> value)) > argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > argument; } return false; }
            friend inline boolean operator >(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >(const long double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > argument; case this -> char__type: return *((char*) this -> value) > argument; case this -> char8_t__type: return *((char8_t*) this -> value) > argument; case this -> char16_t__type: return *((char16_t*) this -> value) > argument; case this -> char32_t__type: return *((char32_t*) this -> value) > argument; case this -> double__type: return *((double*) this -> value) > argument; case this -> float__type: return *((float*) this -> value) > argument; case this -> int__type: return *((int*) this -> value) > argument; case this -> long__type: return *((long*) this -> value) > argument; case this -> long_double__type: return *((long double*) this -> value) > argument; case this -> long_long__type: return *((long long*) this -> value) > argument; case this -> short__type: return *((short*) this -> value) > argument; case this -> void__type: return ((int) *((void**) this -> value)) > argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > argument; } return false; }
            friend inline boolean operator >(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >(const long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > argument; case this -> char__type: return *((char*) this -> value) > argument; case this -> char8_t__type: return *((char8_t*) this -> value) > argument; case this -> char16_t__type: return *((char16_t*) this -> value) > argument; case this -> char32_t__type: return *((char32_t*) this -> value) > argument; case this -> double__type: return *((double*) this -> value) > argument; case this -> float__type: return *((float*) this -> value) > argument; case this -> int__type: return *((int*) this -> value) > argument; case this -> long__type: return *((long*) this -> value) > argument; case this -> long_double__type: return *((long double*) this -> value) > argument; case this -> long_long__type: return *((long long*) this -> value) > argument; case this -> short__type: return *((short*) this -> value) > argument; case this -> void__type: return ((int) *((void**) this -> value)) > argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > argument; } return false; }
            friend inline boolean operator >(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >(const short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > argument; case this -> char__type: return *((char*) this -> value) > argument; case this -> char8_t__type: return *((char8_t*) this -> value) > argument; case this -> char16_t__type: return *((char16_t*) this -> value) > argument; case this -> char32_t__type: return *((char32_t*) this -> value) > (char32_t) argument; case this -> double__type: return *((double*) this -> value) > argument; case this -> float__type: return *((float*) this -> value) > argument; case this -> int__type: return *((int*) this -> value) > argument; case this -> long__type: return *((long*) this -> value) > argument; case this -> long_double__type: return *((long double*) this -> value) > argument; case this -> long_long__type: return *((long long*) this -> value) > argument; case this -> short__type: return *((short*) this -> value) > argument; case this -> void__type: return ((int) *((void**) this -> value)) > argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > argument; } return false; }
            friend inline boolean operator >(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >(const signed char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > argument; case this -> char__type: return *((char*) this -> value) > argument; case this -> char8_t__type: return *((char8_t*) this -> value) > argument; case this -> char16_t__type: return *((char16_t*) this -> value) > argument; case this -> char32_t__type: return *((char32_t*) this -> value) > (char32_t) argument; case this -> double__type: return *((double*) this -> value) > argument; case this -> float__type: return *((float*) this -> value) > argument; case this -> int__type: return *((int*) this -> value) > argument; case this -> long__type: return *((long*) this -> value) > argument; case this -> long_double__type: return *((long double*) this -> value) > argument; case this -> long_long__type: return *((long long*) this -> value) > argument; case this -> short__type: return *((short*) this -> value) > argument; case this -> void__type: return ((int) *((void**) this -> value)) > argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > argument; } return false; }
            friend inline boolean operator >(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >(const unsigned char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > argument; case this -> char__type: return *((char*) this -> value) > argument; case this -> char8_t__type: return *((char8_t*) this -> value) > argument; case this -> char16_t__type: return *((char16_t*) this -> value) > argument; case this -> char32_t__type: return *((char32_t*) this -> value) > argument; case this -> double__type: return *((double*) this -> value) > argument; case this -> float__type: return *((float*) this -> value) > argument; case this -> int__type: return *((int*) this -> value) > argument; case this -> long__type: return *((long*) this -> value) > argument; case this -> long_double__type: return *((long double*) this -> value) > argument; case this -> long_long__type: return *((long long*) this -> value) > argument; case this -> short__type: return *((short*) this -> value) > argument; case this -> void__type: return ((int) *((void**) this -> value)) > argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > argument; } return false; }
            friend inline boolean operator >(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >(const unsigned int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > argument; case this -> char__type: return ((unsigned int) *((char*) this -> value)) > argument; case this -> char8_t__type: return *((char8_t*) this -> value) > argument; case this -> char16_t__type: return *((char16_t*) this -> value) > argument; case this -> char32_t__type: return *((char32_t*) this -> value) > argument; case this -> double__type: return *((double*) this -> value) > argument; case this -> float__type: return *((float*) this -> value) > argument; case this -> int__type: return *((int*) this -> value) > (int) argument; case this -> long__type: return *((long*) this -> value) > (long) argument; case this -> long_double__type: return *((long double*) this -> value) > argument; case this -> long_long__type: return *((long long*) this -> value) > argument; case this -> short__type: return ((unsigned int) *((short*) this -> value)) > argument; case this -> void__type: return ((int) *((void**) this -> value)) > (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > argument; } return false; }
            friend inline boolean operator >(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) > *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) > *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) > *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) > *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >(const unsigned long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > argument; case this -> char__type: return ((unsigned long) *((char*) this -> value)) > argument; case this -> char8_t__type: return *((char8_t*) this -> value) > argument; case this -> char16_t__type: return *((char16_t*) this -> value) > argument; case this -> char32_t__type: return *((char32_t*) this -> value) > argument; case this -> double__type: return *((double*) this -> value) > argument; case this -> float__type: return *((float*) this -> value) > argument; case this -> int__type: return ((unsigned long) *((int*) this -> value)) > argument; case this -> long__type: return *((long*) this -> value) > (long) argument; case this -> long_double__type: return *((long double*) this -> value) > argument; case this -> long_long__type: return *((long long*) this -> value) > argument; case this -> short__type: return ((unsigned long) *((short*) this -> value)) > argument; case this -> void__type: return ((unsigned long) (int) *((void**) this -> value)) > argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > argument; } return false; }
            friend inline boolean operator >(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA > (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA > (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA > (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA > (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >(const unsigned long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > argument; case this -> char__type: return ((unsigned long long) *((char*) this -> value)) > argument; case this -> char8_t__type: return *((char8_t*) this -> value) > argument; case this -> char16_t__type: return *((char16_t*) this -> value) > argument; case this -> char32_t__type: return *((char32_t*) this -> value) > argument; case this -> double__type: return *((double*) this -> value) > argument; case this -> float__type: return *((float*) this -> value) > argument; case this -> int__type: return ((unsigned long long) *((int*) this -> value)) > argument; case this -> long__type: return ((unsigned long long) *((long*) this -> value)) > argument; case this -> long_double__type: return *((long double*) this -> value) > argument; case this -> long_long__type: return *((long long*) this -> value) > (long long) argument; case this -> short__type: return ((unsigned long long) *((short*) this -> value)) > argument; case this -> void__type: return ((unsigned long long) (int) *((void**) this -> value)) > argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > argument; } return false; }
            friend inline boolean operator >(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA > (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA > (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA > (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA > (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA > (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA > (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA > (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA > (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >(const unsigned short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > argument; case this -> char__type: return *((char*) this -> value) > argument; case this -> char8_t__type: return *((char8_t*) this -> value) > argument; case this -> char16_t__type: return *((char16_t*) this -> value) > argument; case this -> char32_t__type: return *((char32_t*) this -> value) > argument; case this -> double__type: return *((double*) this -> value) > argument; case this -> float__type: return *((float*) this -> value) > argument; case this -> int__type: return *((int*) this -> value) > argument; case this -> long__type: return *((long*) this -> value) > argument; case this -> long_double__type: return *((long double*) this -> value) > argument; case this -> long_long__type: return *((long long*) this -> value) > argument; case this -> short__type: return *((short*) this -> value) > argument; case this -> void__type: return ((int) *((void**) this -> value)) > argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > argument; } return false; }
            friend inline boolean operator >(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >(void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > (int) argument; case this -> char__type: return *((char*) this -> value) > (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) > (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) > (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) > (char32_t) (int) argument; case this -> double__type: return *((double*) this -> value) > (int) argument; case this -> float__type: return *((float*) this -> value) > (int) argument; case this -> int__type: return *((int*) this -> value) > (int) argument; case this -> long__type: return *((long*) this -> value) > (int) argument; case this -> long_double__type: return *((long double*) this -> value) > (int) argument; case this -> long_long__type: return *((long long*) this -> value) > (int) argument; case this -> short__type: return *((short*) this -> value) > (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) > (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > (int) argument; } return false; }
            friend inline boolean operator >(void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) > *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) > *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) > *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) > *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) > *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) > *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) > *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) > *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) > *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) > *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) > *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) > *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) > *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) > *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) > *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) > *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) > *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) > *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) > *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) > *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) > *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) > *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) > *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) > *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) > *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) > *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) > *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) > *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) > *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) > *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) > *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) > *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) > *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) > *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) > *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) > *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) > *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >(const void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > (int) argument; case this -> char__type: return *((char*) this -> value) > (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) > (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) > (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) > (char32_t) (int) argument; case this -> double__type: return *((double*) this -> value) > (int) argument; case this -> float__type: return *((float*) this -> value) > (int) argument; case this -> int__type: return *((int*) this -> value) > (int) argument; case this -> long__type: return *((long*) this -> value) > (int) argument; case this -> long_double__type: return *((long double*) this -> value) > (int) argument; case this -> long_long__type: return *((long long*) this -> value) > (int) argument; case this -> short__type: return *((short*) this -> value) > (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) > (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > (int) argument; } return false; }
            friend inline boolean operator >(const void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) > *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) > *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) > *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) > *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) > *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) > *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) > *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) > *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) > *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) > *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) > *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) > *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) > *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) > *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) > *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) > *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) > *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) > *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) > *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) > *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) > *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) > *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) > *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) > *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) > *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) > *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) > *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) > *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) > *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) > *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) > *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) > *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) > *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) > *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) > *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) > *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) > *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) > *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >(const wchar_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) > argument; case this -> char__type: return *((char*) this -> value) > argument; case this -> char8_t__type: return *((char8_t*) this -> value) > argument; case this -> char16_t__type: return *((char16_t*) this -> value) > argument; case this -> char32_t__type: return *((char32_t*) this -> value) > argument; case this -> double__type: return *((double*) this -> value) > argument; case this -> float__type: return *((float*) this -> value) > argument; case this -> int__type: return *((int*) this -> value) > argument; case this -> long__type: return *((long*) this -> value) > argument; case this -> long_double__type: return *((long double*) this -> value) > argument; case this -> long_long__type: return *((long long*) this -> value) > argument; case this -> short__type: return *((short*) this -> value) > argument; case this -> void__type: return ((int) *((void**) this -> value)) > argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) > argument; } return false; }
            friend inline boolean operator >(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA > *((boolean*) argumentB.value); case argumentB.char__type: return argumentA > *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA > *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA > *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA > *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA > *((double*) argumentB.value); case argumentB.float__type: return argumentA > *((float*) argumentB.value); case argumentB.int__type: return argumentA > *((int*) argumentB.value); case argumentB.long__type: return argumentA > *((long*) argumentB.value); case argumentB.long_double__type: return argumentA > *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA > *((long long*) argumentB.value); case argumentB.short__type: return argumentA > *((short*) argumentB.value); case argumentB.void__type: return argumentA > (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA > *((wchar_t*) argumentB.value); } return false; }

            // [+=]
            inline boolean operator +=(const boolean argument) { *this = *this + argument; return argument; }
            friend inline primitive& operator +=(boolean& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += (unsigned char) *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += (unsigned char) *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += (unsigned char) *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += (unsigned char) *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += (unsigned char) *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += (unsigned char) *((double*) argumentB.value); break; case argumentB.float__type: argumentA += (unsigned char) *((float*) argumentB.value); break; case argumentB.int__type: argumentA += (unsigned char) *((int*) argumentB.value); break; case argumentB.long__type: argumentA += (unsigned char) *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += (unsigned char) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += (unsigned char) *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += (unsigned char) *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (unsigned char) (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += (unsigned char) *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator +=(boolean& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += (unsigned char) *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += (unsigned char) *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += (unsigned char) *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += (unsigned char) *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += (unsigned char) *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += (unsigned char) *((double*) argumentB.value); break; case argumentB.float__type: argumentA += (unsigned char) *((float*) argumentB.value); break; case argumentB.int__type: argumentA += (unsigned char) *((int*) argumentB.value); break; case argumentB.long__type: argumentA += (unsigned char) *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += (unsigned char) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += (unsigned char) *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += (unsigned char) *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (unsigned char) (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += (unsigned char) *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(boolean& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += (unsigned char) *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += (unsigned char) *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += (unsigned char) *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += (unsigned char) *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += (unsigned char) *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += (unsigned char) *((double*) argumentB.value); break; case argumentB.float__type: argumentA += (unsigned char) *((float*) argumentB.value); break; case argumentB.int__type: argumentA += (unsigned char) *((int*) argumentB.value); break; case argumentB.long__type: argumentA += (unsigned char) *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += (unsigned char) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += (unsigned char) *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += (unsigned char) *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (unsigned char) (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += (unsigned char) *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(boolean& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += (unsigned char) *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += (unsigned char) *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += (unsigned char) *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += (unsigned char) *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += (unsigned char) *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += (unsigned char) *((double*) argumentB.value); break; case argumentB.float__type: argumentA += (unsigned char) *((float*) argumentB.value); break; case argumentB.int__type: argumentA += (unsigned char) *((int*) argumentB.value); break; case argumentB.long__type: argumentA += (unsigned char) *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += (unsigned char) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += (unsigned char) *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += (unsigned char) *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (unsigned char) (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += (unsigned char) *((wchar_t*) argumentB.value); } return argumentB; }

            inline char operator +=(const char argument) { *this = *this + argument; return argument; }
            friend inline primitive& operator +=(char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator +=(char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }

            inline char8_t operator +=(const char8_t argument) { *this = *this + argument; return argument; }
            friend inline primitive& operator +=(char8_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator +=(char8_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(char8_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(char8_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }

            inline char16_t operator +=(const char16_t argument) { *this = *this + argument; return argument; }
            friend inline primitive& operator +=(char16_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator +=(char16_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(char16_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(char16_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }

            inline char32_t operator +=(const char32_t argument) { *this = *this + argument; return argument; }
            friend inline primitive& operator +=(char32_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator +=(char32_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(char32_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(char32_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }

            inline double operator +=(const double argument) { *this = *this + argument; return argument; }
            friend inline primitive& operator +=(double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator +=(double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }

            inline float operator +=(const float argument) { *this = *this + argument; return argument; }
            friend inline primitive& operator +=(float& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator +=(float& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(float& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(float& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }

            inline int operator +=(const int argument) { *this = *this + argument; return argument; }
            friend inline primitive& operator +=(int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator +=(int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }

            inline long operator +=(const long argument) { *this = *this + argument; return argument; }
            friend inline primitive& operator +=(long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator +=(long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }

            inline long double operator +=(const long double argument) { *this = *this + argument; return argument; }
            friend inline primitive& operator +=(long double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator +=(long double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(long double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(long double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }

            inline long long operator +=(const long long argument) { *this = *this + argument; return argument; }
            friend inline primitive& operator +=(long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator +=(long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }

            inline short operator +=(const short argument) { *this = *this + argument; return argument; }
            friend inline primitive& operator +=(short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator +=(short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }

            inline signed char operator +=(const signed char argument) { *this = *this + argument; return argument; }
            friend inline primitive& operator +=(signed char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator +=(signed char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(signed char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(signed char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned char operator +=(const unsigned char argument) { *this = *this + argument; return argument; }
            friend inline primitive& operator +=(unsigned char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator +=(unsigned char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(unsigned char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(unsigned char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned int operator +=(const unsigned int argument) { *this = *this + argument; return argument; }
            friend inline primitive& operator +=(unsigned int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator +=(unsigned int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(unsigned int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(unsigned int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned long operator +=(const unsigned long argument) { *this = *this + argument; return argument; }
            friend inline primitive& operator +=(unsigned long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator +=(unsigned long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(unsigned long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(unsigned long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned long long operator +=(const unsigned long long argument) { *this = *this + argument; return argument; }
            friend inline primitive& operator +=(unsigned long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator +=(unsigned long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(unsigned long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(unsigned long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned short operator +=(const unsigned short argument) { *this = *this + argument; return argument; }
            friend inline primitive& operator +=(unsigned short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator +=(unsigned short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(unsigned short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(unsigned short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }

            inline void* operator +=(void* argument) { *this = *this + argument; return argument; }
            inline const void* operator +=(const void* argument) { *this = *this + argument; return argument; }

            inline wchar_t operator +=(const wchar_t argument) { *this = *this + argument; return argument; }
            friend inline primitive& operator +=(wchar_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator +=(wchar_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(wchar_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator +=(wchar_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA += *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA += *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA += *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA += *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA += *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA += *((double*) argumentB.value); break; case argumentB.float__type: argumentA += *((float*) argumentB.value); break; case argumentB.int__type: argumentA += *((int*) argumentB.value); break; case argumentB.long__type: argumentA += *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA += *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA += *((long long*) argumentB.value); break; case argumentB.short__type: argumentA += *((short*) argumentB.value); break; case argumentB.void__type: argumentA += (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA += *((wchar_t*) argumentB.value); } return argumentB; }

            // [-=]
            inline boolean operator -=(const boolean argument) { *this = *this - argument; return argument; }
            friend inline primitive& operator -=(boolean& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= (unsigned char) *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= (unsigned char) *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= (unsigned char) *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= (unsigned char) *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= (unsigned char) *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= (unsigned char) *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= (unsigned char) *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= (unsigned char) *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= (unsigned char) *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= (unsigned char) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= (unsigned char) *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= (unsigned char) *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (unsigned char) (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= (unsigned char) *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator -=(boolean& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= (unsigned char) *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= (unsigned char) *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= (unsigned char) *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= (unsigned char) *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= (unsigned char) *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= (unsigned char) *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= (unsigned char) *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= (unsigned char) *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= (unsigned char) *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= (unsigned char) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= (unsigned char) *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= (unsigned char) *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (unsigned char) (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= (unsigned char) *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(boolean& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= (unsigned char) *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= (unsigned char) *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= (unsigned char) *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= (unsigned char) *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= (unsigned char) *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= (unsigned char) *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= (unsigned char) *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= (unsigned char) *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= (unsigned char) *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= (unsigned char) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= (unsigned char) *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= (unsigned char) *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (unsigned char) (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= (unsigned char) *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(boolean& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= (unsigned char) *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= (unsigned char) *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= (unsigned char) *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= (unsigned char) *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= (unsigned char) *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= (unsigned char) *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= (unsigned char) *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= (unsigned char) *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= (unsigned char) *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= (unsigned char) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= (unsigned char) *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= (unsigned char) *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (unsigned char) (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= (unsigned char) *((wchar_t*) argumentB.value); } return argumentB; }

            inline char operator -=(const char argument) { *this = *this - argument; return argument; }
            friend inline primitive& operator -=(char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator -=(char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char8_t operator -=(const char8_t argument) { *this = *this - argument; return argument; }
            friend inline primitive& operator -=(char8_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator -=(char8_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(char8_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(char8_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char16_t operator -=(const char16_t argument) { *this = *this - argument; return argument; }
            friend inline primitive& operator -=(char16_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator -=(char16_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(char16_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(char16_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char32_t operator -=(const char32_t argument) { *this = *this - argument; return argument; }
            friend inline primitive& operator -=(char32_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator -=(char32_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(char32_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(char32_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }

            inline double operator -=(const double argument) { *this = *this - argument; return argument; }
            friend inline primitive& operator -=(double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator -=(double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }

            inline float operator -=(const float argument) { *this = *this - argument; return argument; }
            friend inline primitive& operator -=(float& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator -=(float& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(float& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(float& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }

            inline int operator -=(const int argument) { *this = *this - argument; return argument; }
            friend inline primitive& operator -=(int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator -=(int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long operator -=(const long argument) { *this = *this - argument; return argument; }
            friend inline primitive& operator -=(long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator -=(long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long double operator -=(const long double argument) { *this = *this - argument; return argument; }
            friend inline primitive& operator -=(long double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator -=(long double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(long double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(long double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long long operator -=(const long long argument) { *this = *this - argument; return argument; }
            friend inline primitive& operator -=(long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator -=(long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }

            inline short operator -=(const short argument) { *this = *this - argument; return argument; }
            friend inline primitive& operator -=(short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator -=(short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }

            inline signed char operator -=(const signed char argument) { *this = *this - argument; return argument; }
            friend inline primitive& operator -=(signed char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator -=(signed char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(signed char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(signed char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned char operator -=(const unsigned char argument) { *this = *this - argument; return argument; }
            friend inline primitive& operator -=(unsigned char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator -=(unsigned char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(unsigned char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(unsigned char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned int operator -=(const unsigned int argument) { *this = *this - argument; return argument; }
            friend inline primitive& operator -=(unsigned int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator -=(unsigned int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(unsigned int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(unsigned int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned long operator -=(const unsigned long argument) { *this = *this - argument; return argument; }
            friend inline primitive& operator -=(unsigned long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator -=(unsigned long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(unsigned long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(unsigned long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned long long operator -=(const unsigned long long argument) { *this = *this - argument; return argument; }
            friend inline primitive& operator -=(unsigned long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator -=(unsigned long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(unsigned long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(unsigned long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned short operator -=(const unsigned short argument) { *this = *this - argument; return argument; }
            friend inline primitive& operator -=(unsigned short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator -=(unsigned short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(unsigned short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(unsigned short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }

            inline void* operator -=(void* argument) { *this = *this - argument; return argument; }
            inline const void* operator -=(const void* argument) { *this = *this - argument; return argument; }

            inline wchar_t operator -=(const wchar_t argument) { *this = *this - argument; return argument; }
            friend inline primitive& operator -=(wchar_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator -=(wchar_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(wchar_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator -=(wchar_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA -= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA -= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA -= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA -= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA -= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA -= *((double*) argumentB.value); break; case argumentB.float__type: argumentA -= *((float*) argumentB.value); break; case argumentB.int__type: argumentA -= *((int*) argumentB.value); break; case argumentB.long__type: argumentA -= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA -= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA -= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA -= *((short*) argumentB.value); break; case argumentB.void__type: argumentA -= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA -= *((wchar_t*) argumentB.value); } return argumentB; }

            // [*=]
            inline boolean operator *=(const boolean argument) { *this = *this * argument; return argument; }
            friend inline primitive& operator *=(boolean& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= (unsigned char) *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= (unsigned char) *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= (unsigned char) *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= (unsigned char) *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= (unsigned char) *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= (unsigned char) *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= (unsigned char) *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= (unsigned char) *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= (unsigned char) *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= (unsigned char) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= (unsigned char) *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= (unsigned char) *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (unsigned char) (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= (unsigned char) *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator *=(boolean& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= (unsigned char) *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= (unsigned char) *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= (unsigned char) *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= (unsigned char) *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= (unsigned char) *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= (unsigned char) *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= (unsigned char) *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= (unsigned char) *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= (unsigned char) *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= (unsigned char) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= (unsigned char) *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= (unsigned char) *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (unsigned char) (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= (unsigned char) *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(boolean& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= (unsigned char) *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= (unsigned char) *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= (unsigned char) *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= (unsigned char) *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= (unsigned char) *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= (unsigned char) *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= (unsigned char) *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= (unsigned char) *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= (unsigned char) *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= (unsigned char) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= (unsigned char) *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= (unsigned char) *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (unsigned char) (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= (unsigned char) *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(boolean& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= (unsigned char) *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= (unsigned char) *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= (unsigned char) *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= (unsigned char) *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= (unsigned char) *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= (unsigned char) *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= (unsigned char) *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= (unsigned char) *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= (unsigned char) *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= (unsigned char) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= (unsigned char) *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= (unsigned char) *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (unsigned char) (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= (unsigned char) *((wchar_t*) argumentB.value); } return argumentB; }

            inline char operator *=(const char argument) { *this = *this * argument; return argument; }
            friend inline primitive& operator *=(char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator *=(char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char8_t operator *=(const char8_t argument) { switch (this -> type) { case this -> boolean__type: *((boolean*) this -> value) *= argument; break; case this -> char__type: *((char*) this -> value) *= argument; break; case this -> char8_t__type: *((char8_t*) this -> value) *= argument; break; case this -> char16_t__type: *((char16_t*) this -> value) *= argument; break; case this -> char32_t__type: *((char32_t*) this -> value) *= argument; break; case this -> double__type: *((double*) this -> value) *= argument; break; case this -> float__type: *((float*) this -> value) *= argument; break; case this -> int__type: *((int*) this -> value) *= argument; break; case this -> long__type: *((long*) this -> value) *= argument; break; case this -> long_double__type: *((long double*) this -> value) *= argument; break; case this -> long_long__type: *((long long*) this -> value) *= argument; break; case this -> short__type: *((short*) this -> value) *= argument; break; case this -> void__type:break; case this -> wchar_t__type: *((wchar_t*) this -> value) *= argument; } return argument; }
            friend inline primitive& operator *=(char8_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator *=(char8_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(char8_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(char8_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char16_t operator *=(const char16_t argument) { *this = *this * argument; return argument; }
            friend inline primitive& operator *=(char16_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator *=(char16_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(char16_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(char16_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char32_t operator *=(const char32_t argument) { *this = *this * argument; return argument; }
            friend inline primitive& operator *=(char32_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator *=(char32_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(char32_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(char32_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }

            inline double operator *=(const double argument) { *this = *this * argument; return argument; }
            friend inline primitive& operator *=(double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator *=(double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }

            inline float operator *=(const float argument) { *this = *this * argument; return argument; }
            friend inline primitive& operator *=(float& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator *=(float& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(float& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(float& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }

            inline int operator *=(const int argument) { *this = *this * argument; return argument; }
            friend inline primitive& operator *=(int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator *=(int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long operator *=(const long argument) { *this = *this * argument; return argument; }
            friend inline primitive& operator *=(long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator *=(long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long double operator *=(const long double argument) { *this = *this * argument; return argument; }
            friend inline primitive& operator *=(long double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator *=(long double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(long double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(long double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long long operator *=(const long long argument) { *this = *this * argument; return argument; }
            friend inline primitive& operator *=(long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator *=(long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }

            inline short operator *=(const short argument) { *this = *this * argument; return argument; }
            friend inline primitive& operator *=(short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator *=(short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }

            inline signed char operator *=(const signed char argument) { *this = *this * argument; return argument; }
            friend inline primitive& operator *=(signed char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator *=(signed char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(signed char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(signed char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned char operator *=(const unsigned char argument) { *this = *this * argument; return argument; }
            friend inline primitive& operator *=(unsigned char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator *=(unsigned char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(unsigned char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(unsigned char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned int operator *=(const unsigned int argument) { *this = *this * argument; return argument; }
            friend inline primitive& operator *=(unsigned int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator *=(unsigned int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(unsigned int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(unsigned int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned long operator *=(const unsigned long argument) { *this = *this * argument; return argument; }
            friend inline primitive& operator *=(unsigned long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator *=(unsigned long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(unsigned long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(unsigned long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned long long operator *=(const unsigned long long argument) { *this = *this * argument; return argument; }
            friend inline primitive& operator *=(unsigned long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator *=(unsigned long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(unsigned long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(unsigned long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned short operator *=(const unsigned short argument) { *this = *this * argument; return argument; }
            friend inline primitive& operator *=(unsigned short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator *=(unsigned short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(unsigned short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(unsigned short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }

            inline void* operator *=(void* argument) { *this = *this * argument; return argument; }
            inline const void* operator *=(const void* argument) { *this = *this * argument; return argument; }

            inline wchar_t operator *=(const wchar_t argument) { *this = *this * argument; return argument; }
            friend inline primitive& operator *=(wchar_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator *=(wchar_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(wchar_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator *=(wchar_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA *= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA *= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA *= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA *= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA *= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA *= *((double*) argumentB.value); break; case argumentB.float__type: argumentA *= *((float*) argumentB.value); break; case argumentB.int__type: argumentA *= *((int*) argumentB.value); break; case argumentB.long__type: argumentA *= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA *= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA *= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA *= *((short*) argumentB.value); break; case argumentB.void__type: argumentA *= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA *= *((wchar_t*) argumentB.value); } return argumentB; }

            // [/=]
            inline boolean operator /=(const boolean argument) { *this = *this / argument; return argument; }
            friend inline primitive& operator /=(boolean& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= (unsigned char) *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= (unsigned char) *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= (unsigned char) *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= (unsigned char) *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= (unsigned char) *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= (unsigned char) *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= (unsigned char) *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= (unsigned char) *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= (unsigned char) *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= (unsigned char) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= (unsigned char) *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= (unsigned char) *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (unsigned char) (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= (unsigned char) *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator /=(boolean& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= (unsigned char) *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= (unsigned char) *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= (unsigned char) *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= (unsigned char) *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= (unsigned char) *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= (unsigned char) *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= (unsigned char) *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= (unsigned char) *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= (unsigned char) *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= (unsigned char) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= (unsigned char) *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= (unsigned char) *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (unsigned char) (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= (unsigned char) *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(boolean& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= (unsigned char) *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= (unsigned char) *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= (unsigned char) *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= (unsigned char) *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= (unsigned char) *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= (unsigned char) *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= (unsigned char) *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= (unsigned char) *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= (unsigned char) *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= (unsigned char) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= (unsigned char) *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= (unsigned char) *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (unsigned char) (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= (unsigned char) *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(boolean& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= (unsigned char) *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= (unsigned char) *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= (unsigned char) *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= (unsigned char) *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= (unsigned char) *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= (unsigned char) *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= (unsigned char) *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= (unsigned char) *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= (unsigned char) *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= (unsigned char) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= (unsigned char) *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= (unsigned char) *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (unsigned char) (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= (unsigned char) *((wchar_t*) argumentB.value); } return argumentB; }

            inline char operator /=(const char argument) { *this = *this / argument; return argument; }
            friend inline primitive& operator /=(char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator /=(char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char8_t operator /=(const char8_t argument) { *this = *this / argument; return argument; }
            friend inline primitive& operator /=(char8_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator /=(char8_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(char8_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(char8_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char16_t operator /=(const char16_t argument) { *this = *this / argument; return argument; }
            friend inline primitive& operator /=(char16_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator /=(char16_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(char16_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(char16_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char32_t operator /=(const char32_t argument) { *this = *this / argument; return argument; }
            friend inline primitive& operator /=(char32_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator /=(char32_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(char32_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(char32_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }

            inline double operator /=(const double argument) { *this = *this / argument; return argument; }
            friend inline primitive& operator /=(double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator /=(double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }

            inline float operator /=(const float argument) { *this = *this / argument; return argument; }
            friend inline primitive& operator /=(float& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator /=(float& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(float& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(float& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }

            inline int operator /=(const int argument) { *this = *this / argument; return argument; }
            friend inline primitive& operator /=(int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator /=(int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long operator /=(const long argument) { *this = *this / argument; return argument; }
            friend inline primitive& operator /=(long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator /=(long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long double operator /=(const long double argument) { *this = *this / argument; return argument; }
            friend inline primitive& operator /=(long double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator /=(long double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(long double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(long double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long long operator /=(const long long argument) { *this = *this / argument; return argument; }
            friend inline primitive& operator /=(long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator /=(long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }

            inline short operator /=(const short argument) { *this = *this / argument; return argument; }
            friend inline primitive& operator /=(short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator /=(short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }

            inline signed char operator /=(const signed char argument) { *this = *this / argument; return argument; }
            friend inline primitive& operator /=(signed char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator /=(signed char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(signed char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(signed char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned char operator /=(const unsigned char argument) { *this = *this / argument; return argument; }
            friend inline primitive& operator /=(unsigned char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator /=(unsigned char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(unsigned char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(unsigned char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned int operator /=(const unsigned int argument) { *this = *this / argument; return argument; }
            friend inline primitive& operator /=(unsigned int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator /=(unsigned int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(unsigned int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(unsigned int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned long operator /=(const unsigned long argument) { *this = *this / argument; return argument; }
            friend inline primitive& operator /=(unsigned long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator /=(unsigned long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(unsigned long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(unsigned long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned long long operator /=(const unsigned long long argument) { *this = *this / argument; return argument; }
            friend inline primitive& operator /=(unsigned long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator /=(unsigned long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(unsigned long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(unsigned long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned short operator /=(const unsigned short argument) { *this = *this / argument; return argument; }
            friend inline primitive& operator /=(unsigned short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator /=(unsigned short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(unsigned short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(unsigned short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }

            inline void* operator /=(void* argument) { *this = *this / argument; return argument; }
            inline const void* operator /=(const void* argument) { *this = *this / argument; return argument; }

            inline wchar_t operator /=(const wchar_t argument) { *this = *this / argument; return argument; }
            friend inline primitive& operator /=(wchar_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator /=(wchar_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(wchar_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator /=(wchar_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA /= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA /= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA /= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA /= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA /= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA /= *((double*) argumentB.value); break; case argumentB.float__type: argumentA /= *((float*) argumentB.value); break; case argumentB.int__type: argumentA /= *((int*) argumentB.value); break; case argumentB.long__type: argumentA /= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA /= *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA /= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA /= *((short*) argumentB.value); break; case argumentB.void__type: argumentA /= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA /= *((wchar_t*) argumentB.value); } return argumentB; }

            // [%=]
            inline boolean operator %=(const boolean argument) { *this = *this % argument; return argument; }
            friend inline primitive& operator %=(boolean& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= (unsigned char) *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= (unsigned char) *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= (unsigned char) *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= (unsigned char) *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= (unsigned char) *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA %= (unsigned char) *((double*) argumentB.value); break; case argumentB.float__type: argumentA %= (unsigned char) *((float*) argumentB.value); break; case argumentB.int__type: argumentA %= (unsigned char) *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= (unsigned char) *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA %= (unsigned char) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA %= (unsigned char) *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= (unsigned char) *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA %= (unsigned char) *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator %=(boolean& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= (unsigned char) *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= (unsigned char) *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= (unsigned char) *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= (unsigned char) *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= (unsigned char) *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA %= (unsigned char) *((double*) argumentB.value); break; case argumentB.float__type: argumentA %= (unsigned char) *((float*) argumentB.value); break; case argumentB.int__type: argumentA %= (unsigned char) *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= (unsigned char) *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA %= (unsigned char) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA %= (unsigned char) *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= (unsigned char) *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA %= (unsigned char) *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(boolean& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= (unsigned char) *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= (unsigned char) *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= (unsigned char) *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= (unsigned char) *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= (unsigned char) *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA %= (unsigned char) *((double*) argumentB.value); break; case argumentB.float__type: argumentA %= (unsigned char) *((float*) argumentB.value); break; case argumentB.int__type: argumentA %= (unsigned char) *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= (unsigned char) *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA %= (unsigned char) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA %= (unsigned char) *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= (unsigned char) *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA %= (unsigned char) *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(boolean& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= (unsigned char) *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= (unsigned char) *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= (unsigned char) *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= (unsigned char) *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= (unsigned char) *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA %= (unsigned char) *((double*) argumentB.value); break; case argumentB.float__type: argumentA %= (unsigned char) *((float*) argumentB.value); break; case argumentB.int__type: argumentA %= (unsigned char) *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= (unsigned char) *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA %= (unsigned char) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA %= (unsigned char) *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= (unsigned char) *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA %= (unsigned char) *((wchar_t*) argumentB.value); } return argumentB; }

            inline char operator %=(const char argument) { *this = *this % argument; return argument; }
            friend inline primitive& operator %=(char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator %=(char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char8_t operator %=(const char8_t argument) { *this = *this % argument; return argument; }
            friend inline primitive& operator %=(char8_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator %=(char8_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(char8_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(char8_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char16_t operator %=(const char16_t argument) { *this = *this % argument; return argument; }
            friend inline primitive& operator %=(char16_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator %=(char16_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(char16_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(char16_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char32_t operator %=(const char32_t argument) { *this = *this % argument; return argument; }
            friend inline primitive& operator %=(char32_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator %=(char32_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(char32_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(char32_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }

            inline double operator %=(const double argument) { *this = *this % argument; return argument; }
            friend inline primitive& operator %=(double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA = mod(argumentA, *((boolean*) argumentB.value)); break; case argumentB.char__type: argumentA = mod(argumentA, *((char*) argumentB.value)); break; case argumentB.char8_t__type: argumentA = mod(argumentA, *((char8_t*) argumentB.value)); break; case argumentB.char16_t__type: argumentA = mod(argumentA, *((char16_t*) argumentB.value)); break; case argumentB.char32_t__type: argumentA = mod(argumentA, *((char32_t*) argumentB.value)); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA = mod(argumentA, *((int*) argumentB.value)); break; case argumentB.long__type: argumentA = mod(argumentA, *((long*) argumentB.value)); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA = mod(argumentA, *((long long*) argumentB.value)); break; case argumentB.short__type: argumentA = mod(argumentA, *((short*) argumentB.value)); break; case argumentB.void__type: argumentA = mod(argumentA, (int) *((void**) argumentB.value)); break; case argumentB.wchar_t__type: argumentA = mod(argumentA, *((wchar_t*) argumentB.value)); } return argumentB; }
            friend inline primitive& operator %=(double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA = mod(argumentA, *((boolean*) argumentB.value)); break; case argumentB.char__type: argumentA = mod(argumentA, *((char*) argumentB.value)); break; case argumentB.char8_t__type: argumentA = mod(argumentA, *((char8_t*) argumentB.value)); break; case argumentB.char16_t__type: argumentA = mod(argumentA, *((char16_t*) argumentB.value)); break; case argumentB.char32_t__type: argumentA = mod(argumentA, *((char32_t*) argumentB.value)); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA = mod(argumentA, *((int*) argumentB.value)); break; case argumentB.long__type: argumentA = mod(argumentA, *((long*) argumentB.value)); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA = mod(argumentA, *((long long*) argumentB.value)); break; case argumentB.short__type: argumentA = mod(argumentA, *((short*) argumentB.value)); break; case argumentB.void__type: argumentA = mod(argumentA, (int) *((void**) argumentB.value)); break; case argumentB.wchar_t__type: argumentA = mod(argumentA, *((wchar_t*) argumentB.value)); } return argumentB; }
            friend inline const primitive& operator %=(double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA = mod(argumentA, *((boolean*) argumentB.value)); break; case argumentB.char__type: argumentA = mod(argumentA, *((char*) argumentB.value)); break; case argumentB.char8_t__type: argumentA = mod(argumentA, *((char8_t*) argumentB.value)); break; case argumentB.char16_t__type: argumentA = mod(argumentA, *((char16_t*) argumentB.value)); break; case argumentB.char32_t__type: argumentA = mod(argumentA, *((char32_t*) argumentB.value)); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA = mod(argumentA, *((int*) argumentB.value)); break; case argumentB.long__type: argumentA = mod(argumentA, *((long*) argumentB.value)); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA = mod(argumentA, *((long long*) argumentB.value)); break; case argumentB.short__type: argumentA = mod(argumentA, *((short*) argumentB.value)); break; case argumentB.void__type: argumentA = mod(argumentA, (int) *((void**) argumentB.value)); break; case argumentB.wchar_t__type: argumentA = mod(argumentA, *((wchar_t*) argumentB.value)); } return argumentB; }
            friend inline const primitive& operator %=(double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA = mod(argumentA, *((boolean*) argumentB.value)); break; case argumentB.char__type: argumentA = mod(argumentA, *((char*) argumentB.value)); break; case argumentB.char8_t__type: argumentA = mod(argumentA, *((char8_t*) argumentB.value)); break; case argumentB.char16_t__type: argumentA = mod(argumentA, *((char16_t*) argumentB.value)); break; case argumentB.char32_t__type: argumentA = mod(argumentA, *((char32_t*) argumentB.value)); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA = mod(argumentA, *((int*) argumentB.value)); break; case argumentB.long__type: argumentA = mod(argumentA, *((long*) argumentB.value)); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA = mod(argumentA, *((long long*) argumentB.value)); break; case argumentB.short__type: argumentA = mod(argumentA, *((short*) argumentB.value)); break; case argumentB.void__type: argumentA = mod(argumentA, (int) *((void**) argumentB.value)); break; case argumentB.wchar_t__type: argumentA = mod(argumentA, *((wchar_t*) argumentB.value)); } return argumentB; }

            inline float operator %=(const float argument) { *this = *this % argument; return argument; }
            friend inline primitive& operator %=(float& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA = mod(argumentA, *((boolean*) argumentB.value)); break; case argumentB.char__type: argumentA = mod(argumentA, *((char*) argumentB.value)); break; case argumentB.char8_t__type: argumentA = mod(argumentA, *((char8_t*) argumentB.value)); break; case argumentB.char16_t__type: argumentA = mod(argumentA, *((char16_t*) argumentB.value)); break; case argumentB.char32_t__type: argumentA = mod(argumentA, *((char32_t*) argumentB.value)); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA = mod(argumentA, *((int*) argumentB.value)); break; case argumentB.long__type: argumentA = mod(argumentA, *((long*) argumentB.value)); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA = mod(argumentA, *((long long*) argumentB.value)); break; case argumentB.short__type: argumentA = mod(argumentA, *((short*) argumentB.value)); break; case argumentB.void__type: argumentA = mod(argumentA, (int) *((void**) argumentB.value)); break; case argumentB.wchar_t__type: argumentA = mod(argumentA, *((wchar_t*) argumentB.value)); } return argumentB; }
            friend inline primitive& operator %=(float& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA = mod(argumentA, *((boolean*) argumentB.value)); break; case argumentB.char__type: argumentA = mod(argumentA, *((char*) argumentB.value)); break; case argumentB.char8_t__type: argumentA = mod(argumentA, *((char8_t*) argumentB.value)); break; case argumentB.char16_t__type: argumentA = mod(argumentA, *((char16_t*) argumentB.value)); break; case argumentB.char32_t__type: argumentA = mod(argumentA, *((char32_t*) argumentB.value)); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA = mod(argumentA, *((int*) argumentB.value)); break; case argumentB.long__type: argumentA = mod(argumentA, *((long*) argumentB.value)); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA = mod(argumentA, *((long long*) argumentB.value)); break; case argumentB.short__type: argumentA = mod(argumentA, *((short*) argumentB.value)); break; case argumentB.void__type: argumentA = mod(argumentA, (int) *((void**) argumentB.value)); break; case argumentB.wchar_t__type: argumentA = mod(argumentA, *((wchar_t*) argumentB.value)); } return argumentB; }
            friend inline const primitive& operator %=(float& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA = mod(argumentA, *((boolean*) argumentB.value)); break; case argumentB.char__type: argumentA = mod(argumentA, *((char*) argumentB.value)); break; case argumentB.char8_t__type: argumentA = mod(argumentA, *((char8_t*) argumentB.value)); break; case argumentB.char16_t__type: argumentA = mod(argumentA, *((char16_t*) argumentB.value)); break; case argumentB.char32_t__type: argumentA = mod(argumentA, *((char32_t*) argumentB.value)); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA = mod(argumentA, *((int*) argumentB.value)); break; case argumentB.long__type: argumentA = mod(argumentA, *((long*) argumentB.value)); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA = mod(argumentA, *((long long*) argumentB.value)); break; case argumentB.short__type: argumentA = mod(argumentA, *((short*) argumentB.value)); break; case argumentB.void__type: argumentA = mod(argumentA, (int) *((void**) argumentB.value)); break; case argumentB.wchar_t__type: argumentA = mod(argumentA, *((wchar_t*) argumentB.value)); } return argumentB; }
            friend inline const primitive& operator %=(float& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA = mod(argumentA, *((boolean*) argumentB.value)); break; case argumentB.char__type: argumentA = mod(argumentA, *((char*) argumentB.value)); break; case argumentB.char8_t__type: argumentA = mod(argumentA, *((char8_t*) argumentB.value)); break; case argumentB.char16_t__type: argumentA = mod(argumentA, *((char16_t*) argumentB.value)); break; case argumentB.char32_t__type: argumentA = mod(argumentA, *((char32_t*) argumentB.value)); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA = mod(argumentA, *((int*) argumentB.value)); break; case argumentB.long__type: argumentA = mod(argumentA, *((long*) argumentB.value)); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA = mod(argumentA, *((long long*) argumentB.value)); break; case argumentB.short__type: argumentA = mod(argumentA, *((short*) argumentB.value)); break; case argumentB.void__type: argumentA = mod(argumentA, (int) *((void**) argumentB.value)); break; case argumentB.wchar_t__type: argumentA = mod(argumentA, *((wchar_t*) argumentB.value)); } return argumentB; }

            inline int operator %=(const int argument) { *this = *this % argument; return argument; }
            friend inline primitive& operator %=(int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator %=(int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long operator %=(const long argument) { *this = *this % argument; return argument; }
            friend inline primitive& operator %=(long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator %=(long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long double operator %=(const long double argument) { *this = *this % argument; return argument; }
            friend inline primitive& operator %=(long double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA = mod(argumentA, *((boolean*) argumentB.value)); break; case argumentB.char__type: argumentA = mod(argumentA, *((char*) argumentB.value)); break; case argumentB.char8_t__type: argumentA = mod(argumentA, *((char8_t*) argumentB.value)); break; case argumentB.char16_t__type: argumentA = mod(argumentA, *((char16_t*) argumentB.value)); break; case argumentB.char32_t__type: argumentA = mod(argumentA, *((char32_t*) argumentB.value)); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA = mod(argumentA, *((int*) argumentB.value)); break; case argumentB.long__type: argumentA = mod(argumentA, *((long*) argumentB.value)); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA = mod(argumentA, *((long long*) argumentB.value)); break; case argumentB.short__type: argumentA = mod(argumentA, *((short*) argumentB.value)); break; case argumentB.void__type: argumentA = mod(argumentA, (int) *((void**) argumentB.value)); break; case argumentB.wchar_t__type: argumentA = mod(argumentA, *((wchar_t*) argumentB.value)); } return argumentB; }
            friend inline primitive& operator %=(long double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA = mod(argumentA, *((boolean*) argumentB.value)); break; case argumentB.char__type: argumentA = mod(argumentA, *((char*) argumentB.value)); break; case argumentB.char8_t__type: argumentA = mod(argumentA, *((char8_t*) argumentB.value)); break; case argumentB.char16_t__type: argumentA = mod(argumentA, *((char16_t*) argumentB.value)); break; case argumentB.char32_t__type: argumentA = mod(argumentA, *((char32_t*) argumentB.value)); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA = mod(argumentA, *((int*) argumentB.value)); break; case argumentB.long__type: argumentA = mod(argumentA, *((long*) argumentB.value)); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA = mod(argumentA, *((long long*) argumentB.value)); break; case argumentB.short__type: argumentA = mod(argumentA, *((short*) argumentB.value)); break; case argumentB.void__type: argumentA = mod(argumentA, (int) *((void**) argumentB.value)); break; case argumentB.wchar_t__type: argumentA = mod(argumentA, *((wchar_t*) argumentB.value)); } return argumentB; }
            friend inline const primitive& operator %=(long double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA = mod(argumentA, *((boolean*) argumentB.value)); break; case argumentB.char__type: argumentA = mod(argumentA, *((char*) argumentB.value)); break; case argumentB.char8_t__type: argumentA = mod(argumentA, *((char8_t*) argumentB.value)); break; case argumentB.char16_t__type: argumentA = mod(argumentA, *((char16_t*) argumentB.value)); break; case argumentB.char32_t__type: argumentA = mod(argumentA, *((char32_t*) argumentB.value)); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA = mod(argumentA, *((int*) argumentB.value)); break; case argumentB.long__type: argumentA = mod(argumentA, *((long*) argumentB.value)); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA = mod(argumentA, *((long long*) argumentB.value)); break; case argumentB.short__type: argumentA = mod(argumentA, *((short*) argumentB.value)); break; case argumentB.void__type: argumentA = mod(argumentA, (int) *((void**) argumentB.value)); break; case argumentB.wchar_t__type: argumentA = mod(argumentA, *((wchar_t*) argumentB.value)); } return argumentB; }
            friend inline const primitive& operator %=(long double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA = mod(argumentA, *((boolean*) argumentB.value)); break; case argumentB.char__type: argumentA = mod(argumentA, *((char*) argumentB.value)); break; case argumentB.char8_t__type: argumentA = mod(argumentA, *((char8_t*) argumentB.value)); break; case argumentB.char16_t__type: argumentA = mod(argumentA, *((char16_t*) argumentB.value)); break; case argumentB.char32_t__type: argumentA = mod(argumentA, *((char32_t*) argumentB.value)); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA = mod(argumentA, *((int*) argumentB.value)); break; case argumentB.long__type: argumentA = mod(argumentA, *((long*) argumentB.value)); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA = mod(argumentA, *((long long*) argumentB.value)); break; case argumentB.short__type: argumentA = mod(argumentA, *((short*) argumentB.value)); break; case argumentB.void__type: argumentA = mod(argumentA, (int) *((void**) argumentB.value)); break; case argumentB.wchar_t__type: argumentA = mod(argumentA, *((wchar_t*) argumentB.value)); } return argumentB; }

            inline long long operator %=(const long long argument) { *this = *this % argument; return argument; }
            friend inline primitive& operator %=(long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator %=(long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }

            inline short operator %=(const short argument) { *this = *this % argument; return argument; }
            friend inline primitive& operator %=(short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator %=(short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }

            inline signed char operator %=(const signed char argument) { *this = *this % argument; return argument; }
            friend inline primitive& operator %=(signed char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator %=(signed char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(signed char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(signed char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned char operator %=(const unsigned char argument) { *this = *this % argument; return argument; }
            friend inline primitive& operator %=(unsigned char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator %=(unsigned char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(unsigned char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(unsigned char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned int operator %=(const unsigned int argument) { *this = *this % argument; return argument; }
            friend inline primitive& operator %=(unsigned int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator %=(unsigned int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(unsigned int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(unsigned int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned long operator %=(const unsigned long argument) { *this = *this % argument; return argument; }
            friend inline primitive& operator %=(unsigned long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator %=(unsigned long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(unsigned long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(unsigned long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned long long operator %=(const unsigned long long argument) { *this = *this % argument; return argument; }
            friend inline primitive& operator %=(unsigned long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator %=(unsigned long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(unsigned long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(unsigned long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned short operator %=(const unsigned short argument) { *this = *this % argument; return argument; }
            friend inline primitive& operator %=(unsigned short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator %=(unsigned short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(unsigned short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(unsigned short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }

            inline void* operator %=(void* argument) { *this = *this % argument; return argument; }
            inline const void* operator %=(const void* argument) { *this = *this % argument; return argument; }

            inline wchar_t operator %=(const wchar_t argument) { *this = *this % argument; return argument; }
            friend inline primitive& operator %=(wchar_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator %=(wchar_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(wchar_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator %=(wchar_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA %= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA %= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA %= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA %= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA %= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA = mod(argumentA, *((double*) argumentB.value)); break; case argumentB.float__type: argumentA = mod(argumentA, *((float*) argumentB.value)); break; case argumentB.int__type: argumentA %= *((int*) argumentB.value); break; case argumentB.long__type: argumentA %= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = mod(argumentA, *((long double*) argumentB.value)); break; case argumentB.long_long__type: argumentA %= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA %= *((short*) argumentB.value); break; case argumentB.void__type: argumentA %= (int) *((void**) argumentB.value); break; case argumentB.wchar_t__type: argumentA %= *((wchar_t*) argumentB.value); } return argumentB; }

            // [^=]
            inline boolean operator ^=(const boolean argument) { *this = *this ^ argument; return argument; }
            friend inline primitive& operator ^=(boolean& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator ^=(boolean& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(boolean& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(boolean& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char8_t operator ^=(const char8_t argument) { *this = *this ^ argument; return argument; }
            friend inline primitive& operator ^=(char8_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator ^=(char8_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(char8_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(char8_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char16_t operator ^=(const char16_t argument) { *this = *this ^ argument; return argument; }
            friend inline primitive& operator ^=(char16_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator ^=(char16_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(char16_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(char16_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char32_t operator ^=(const char32_t argument) { *this = *this ^ argument; return argument; }
            friend inline primitive& operator ^=(char32_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator ^=(char32_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(char32_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(char32_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }

            inline int operator ^=(const int argument) { *this = *this ^ argument; return argument; }
            friend inline primitive& operator ^=(int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator ^=(int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long operator ^=(const long argument) { *this = *this ^ argument; return argument; }
            friend inline primitive& operator ^=(long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator ^=(long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long long operator ^=(const long long argument) { *this = *this ^ argument; return argument; }
            friend inline primitive& operator ^=(long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator ^=(long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }

            inline short operator ^=(const short argument) { *this = *this ^ argument; return argument; }
            friend inline primitive& operator ^=(short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator ^=(short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }

            inline signed char operator ^=(const signed char argument) { *this = *this ^ argument; return argument; }
            friend inline primitive& operator ^=(signed char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator ^=(signed char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(signed char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(signed char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned char operator ^=(const unsigned char argument) { *this = *this ^ argument; return argument; }
            friend inline primitive& operator ^=(unsigned char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator ^=(unsigned char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(unsigned char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(unsigned char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned int operator ^=(const unsigned int argument) { *this = *this ^ argument; return argument; }
            friend inline primitive& operator ^=(unsigned int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator ^=(unsigned int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(unsigned int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(unsigned int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned long operator ^=(const unsigned long argument) { *this = *this ^ argument; return argument; }
            friend inline primitive& operator ^=(unsigned long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator ^=(unsigned long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(unsigned long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(unsigned long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned long long operator ^=(const unsigned long long argument) { *this = *this ^ argument; return argument; }
            friend inline primitive& operator ^=(unsigned long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator ^=(unsigned long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(unsigned long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(unsigned long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned short operator ^=(const unsigned short argument) { *this = *this ^ argument; return argument; }
            friend inline primitive& operator ^=(unsigned short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator ^=(unsigned short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(unsigned short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(unsigned short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }

            inline void* operator ^=(void* argument) { *this = *this ^ argument; return argument; }
            inline const void* operator ^=(const void* argument) { *this = *this ^ argument; return argument; }

            inline wchar_t operator ^=(const wchar_t argument) { *this = *this ^ argument; return argument; }
            friend inline primitive& operator ^=(wchar_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator ^=(wchar_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(wchar_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator ^=(wchar_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA ^= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA ^= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA ^= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA ^= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA ^= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA ^= ((long) argumentA) ^ (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) ^ (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA ^= *((int*) argumentB.value); break; case argumentB.long__type: argumentA ^= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) ^ (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA ^= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA ^= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA ^= *((wchar_t*) argumentB.value); } return argumentB; }

            // [&=]
            inline boolean operator &=(const boolean argument) { *this = *this & argument; return argument; }
            friend inline primitive& operator &=(boolean& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator &=(boolean& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(boolean& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(boolean& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char8_t operator &=(const char8_t argument) { *this = *this & argument; return argument; }
            friend inline primitive& operator &=(char8_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator &=(char8_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(char8_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(char8_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char16_t operator &=(const char16_t argument) { *this = *this & argument; return argument; }
            friend inline primitive& operator &=(char16_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator &=(char16_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(char16_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(char16_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char32_t operator &=(const char32_t argument) { *this = *this & argument; return argument; }
            friend inline primitive& operator &=(char32_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator &=(char32_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(char32_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(char32_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }

            inline int operator &=(const int argument) { *this = *this & argument; return argument; }
            friend inline primitive& operator &=(int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator &=(int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long operator &=(const long argument) { *this = *this & argument; return argument; }
            friend inline primitive& operator &=(long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator &=(long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long long operator &=(const long long argument) { *this = *this & argument; return argument; }
            friend inline primitive& operator &=(long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator &=(long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }

            inline short operator &=(const short argument) { *this = *this & argument; return argument; }
            friend inline primitive& operator &=(short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator &=(short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }

            inline signed char operator &=(const signed char argument) { *this = *this & argument; return argument; }
            friend inline primitive& operator &=(signed char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator &=(signed char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(signed char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(signed char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned char operator &=(const unsigned char argument) { *this = *this & argument; return argument; }
            friend inline primitive& operator &=(unsigned char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator &=(unsigned char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(unsigned char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(unsigned char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned int operator &=(const unsigned int argument) { *this = *this & argument; return argument; }
            friend inline primitive& operator &=(unsigned int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator &=(unsigned int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(unsigned int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(unsigned int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned long operator &=(const unsigned long argument) { *this = *this & argument; return argument; }
            friend inline primitive& operator &=(unsigned long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator &=(unsigned long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(unsigned long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(unsigned long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned long long operator &=(const unsigned long long argument) { *this = *this & argument; return argument; }
            friend inline primitive& operator &=(unsigned long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator &=(unsigned long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(unsigned long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(unsigned long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned short operator &=(const unsigned short argument) { *this = *this & argument; return argument; }
            friend inline primitive& operator &=(unsigned short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator &=(unsigned short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(unsigned short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(unsigned short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }

            inline void* operator &=(void* argument) { *this = *this & argument; return argument; }
            inline const void* operator &=(const void* argument) { *this = *this & argument; return argument; }

            inline wchar_t operator &=(const wchar_t argument) { *this = *this & argument; return argument; }
            friend inline primitive& operator &=(wchar_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator &=(wchar_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(wchar_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator &=(wchar_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA &= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA &= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA &= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA &= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA &= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA &= ((long) argumentA) & (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) & (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA &= *((int*) argumentB.value); break; case argumentB.long__type: argumentA &= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) & (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA &= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA &= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA &= *((wchar_t*) argumentB.value); } return argumentB; }

            // [|=]
            inline boolean operator |=(const boolean argument) { *this = *this | argument; return argument; }
            friend inline primitive& operator |=(boolean& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator |=(boolean& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(boolean& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(boolean& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char8_t operator |=(const char8_t argument) { *this = *this | argument; return argument; }
            friend inline primitive& operator |=(char8_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator |=(char8_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(char8_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(char8_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char16_t operator |=(const char16_t argument) { *this = *this | argument; return argument; }
            friend inline primitive& operator |=(char16_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator |=(char16_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(char16_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(char16_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char32_t operator |=(const char32_t argument) { *this = *this | argument; return argument; }
            friend inline primitive& operator |=(char32_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator |=(char32_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(char32_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(char32_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }

            inline int operator |=(const int argument) { *this = *this | argument; return argument; }
            friend inline primitive& operator |=(int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator |=(int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long operator |=(const long argument) { *this = *this | argument; return argument; }
            friend inline primitive& operator |=(long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator |=(long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long long operator |=(const long long argument) { *this = *this | argument; return argument; }
            friend inline primitive& operator |=(long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator |=(long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }

            inline short operator |=(const short argument) { *this = *this | argument; return argument; }
            friend inline primitive& operator |=(short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator |=(short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }

            inline signed char operator |=(const signed char argument) { *this = *this | argument; return argument; }
            friend inline primitive& operator |=(signed char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator |=(signed char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(signed char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(signed char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned char operator |=(const unsigned char argument) { *this = *this | argument; return argument; }
            friend inline primitive& operator |=(unsigned char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator |=(unsigned char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(unsigned char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(unsigned char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned int operator |=(const unsigned int argument) { *this = *this | argument; return argument; }
            friend inline primitive& operator |=(unsigned int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator |=(unsigned int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(unsigned int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(unsigned int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned long operator |=(const unsigned long argument) { *this = *this | argument; return argument; }
            friend inline primitive& operator |=(unsigned long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator |=(unsigned long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(unsigned long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(unsigned long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned long long operator |=(const unsigned long long argument) { *this = *this | argument; return argument; }
            friend inline primitive& operator |=(unsigned long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator |=(unsigned long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(unsigned long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(unsigned long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned short operator |=(const unsigned short argument) { *this = *this | argument; return argument; }
            friend inline primitive& operator |=(unsigned short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator |=(unsigned short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(unsigned short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(unsigned short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }

            inline void* operator |=(void* argument) { *this = *this | argument; return argument; }
            inline const void* operator |=(const void* argument) { *this = *this | argument; return argument; }

            inline wchar_t operator |=(const wchar_t argument) { *this = *this | argument; return argument; }
            friend inline primitive& operator |=(wchar_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator |=(wchar_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(wchar_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator |=(wchar_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA |= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA |= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA |= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA |= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA |= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA |= ((long) argumentA) | (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) | (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA |= *((int*) argumentB.value); break; case argumentB.long__type: argumentA |= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) | (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA |= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA |= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA |= *((wchar_t*) argumentB.value); } return argumentB; }

            // [<<]
            inline primitive operator <<(const boolean argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) << argument; case this -> char__type: return *((char*) this -> value) << argument; case this -> char8_t__type: return *((char8_t*) this -> value) << argument; case this -> char16_t__type: return *((char16_t*) this -> value) << argument; case this -> char32_t__type: return *((char32_t*) this -> value) << argument; case this -> double__type: return ((long) *((double*) this -> value)) << argument; case this -> float__type: return ((int) *((float*) this -> value)) << argument; case this -> int__type: return *((int*) this -> value) << argument; case this -> long__type: return *((long*) this -> value) << argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) << argument; case this -> long_long__type: return *((long long*) this -> value) << argument; case this -> short__type: return *((short*) this -> value) << argument; case this -> void__type: return ((int) *((void**) this -> value)) << argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) << argument; } return *((boolean*) this -> value) << argument; }
            friend inline primitive operator <<(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((boolean*) argumentB.value); }
            friend inline primitive operator <<(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((boolean*) argumentB.value); }
            friend inline primitive operator <<(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((boolean*) argumentB.value); }
            friend inline primitive operator <<(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((boolean*) argumentB.value); }

            inline primitive operator <<(const char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) << argument; case this -> char__type: return *((char*) this -> value) << argument; case this -> char8_t__type: return *((char8_t*) this -> value) << argument; case this -> char16_t__type: return *((char16_t*) this -> value) << argument; case this -> char32_t__type: return *((char32_t*) this -> value) << argument; case this -> double__type: return ((long) *((double*) this -> value)) << argument; case this -> float__type: return ((int) *((float*) this -> value)) << argument; case this -> int__type: return *((int*) this -> value) << argument; case this -> long__type: return *((long*) this -> value) << argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) << argument; case this -> long_long__type: return *((long long*) this -> value) << argument; case this -> short__type: return *((short*) this -> value) << argument; case this -> void__type: return ((int) *((void**) this -> value)) << argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) << argument; } return *((char*) this -> value) << argument; }
            friend inline primitive operator <<(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((char*) argumentB.value); }
            friend inline primitive operator <<(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((char*) argumentB.value); }
            friend inline primitive operator <<(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((char*) argumentB.value); }
            friend inline primitive operator <<(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((char*) argumentB.value); }

            inline primitive operator <<(const char8_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) << argument; case this -> char__type: return *((char*) this -> value) << argument; case this -> char8_t__type: return *((char8_t*) this -> value) << argument; case this -> char16_t__type: return *((char16_t*) this -> value) << argument; case this -> char32_t__type: return *((char32_t*) this -> value) << argument; case this -> double__type: return ((long) *((double*) this -> value)) << argument; case this -> float__type: return ((int) *((float*) this -> value)) << argument; case this -> int__type: return *((int*) this -> value) << argument; case this -> long__type: return *((long*) this -> value) << argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) << argument; case this -> long_long__type: return *((long long*) this -> value) << argument; case this -> short__type: return *((short*) this -> value) << argument; case this -> void__type: return ((int) *((void**) this -> value)) << argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) << argument; } return *((char8_t*) this -> value) << argument; }
            friend inline primitive operator <<(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((char8_t*) argumentB.value); }
            friend inline primitive operator <<(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((char8_t*) argumentB.value); }
            friend inline primitive operator <<(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((char8_t*) argumentB.value); }
            friend inline primitive operator <<(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((char8_t*) argumentB.value); }

            inline primitive operator <<(const char16_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) << argument; case this -> char__type: return *((char*) this -> value) << argument; case this -> char8_t__type: return *((char8_t*) this -> value) << argument; case this -> char16_t__type: return *((char16_t*) this -> value) << argument; case this -> char32_t__type: return *((char32_t*) this -> value) << argument; case this -> double__type: return ((long) *((double*) this -> value)) << argument; case this -> float__type: return ((int) *((float*) this -> value)) << argument; case this -> int__type: return *((int*) this -> value) << argument; case this -> long__type: return *((long*) this -> value) << argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) << argument; case this -> long_long__type: return *((long long*) this -> value) << argument; case this -> short__type: return *((short*) this -> value) << argument; case this -> void__type: return ((int) *((void**) this -> value)) << argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) << argument; } return *((char16_t*) this -> value) << argument; }
            friend inline primitive operator <<(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((char16_t*) argumentB.value); }
            friend inline primitive operator <<(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((char16_t*) argumentB.value); }
            friend inline primitive operator <<(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((char16_t*) argumentB.value); }
            friend inline primitive operator <<(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((char16_t*) argumentB.value); }

            inline primitive operator <<(const char32_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) << argument; case this -> char__type: return *((char*) this -> value) << argument; case this -> char8_t__type: return *((char8_t*) this -> value) << argument; case this -> char16_t__type: return *((char16_t*) this -> value) << argument; case this -> char32_t__type: return *((char32_t*) this -> value) << argument; case this -> double__type: return ((long) *((double*) this -> value)) << argument; case this -> float__type: return ((int) *((float*) this -> value)) << argument; case this -> int__type: return *((int*) this -> value) << argument; case this -> long__type: return *((long*) this -> value) << argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) << argument; case this -> long_long__type: return *((long long*) this -> value) << argument; case this -> short__type: return *((short*) this -> value) << argument; case this -> void__type: return ((int) *((void**) this -> value)) << argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) << argument; } return *((char32_t*) this -> value) << argument; }
            friend inline primitive operator <<(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((char32_t*) argumentB.value); }
            friend inline primitive operator <<(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((char32_t*) argumentB.value); }
            friend inline primitive operator <<(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((char32_t*) argumentB.value); }
            friend inline primitive operator <<(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((char32_t*) argumentB.value); }

            inline primitive operator <<(const int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) << argument; case this -> char__type: return *((char*) this -> value) << argument; case this -> char8_t__type: return *((char8_t*) this -> value) << argument; case this -> char16_t__type: return *((char16_t*) this -> value) << argument; case this -> char32_t__type: return *((char32_t*) this -> value) << argument; case this -> double__type: return ((long) *((double*) this -> value)) << argument; case this -> float__type: return ((int) *((float*) this -> value)) << argument; case this -> int__type: return *((int*) this -> value) << argument; case this -> long__type: return *((long*) this -> value) << argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) << argument; case this -> long_long__type: return *((long long*) this -> value) << argument; case this -> short__type: return *((short*) this -> value) << argument; case this -> void__type: return ((int) *((void**) this -> value)) << argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) << argument; } return *((int*) this -> value) << argument; }
            friend inline primitive operator <<(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((int*) argumentB.value); }
            friend inline primitive operator <<(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((int*) argumentB.value); }
            friend inline primitive operator <<(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((int*) argumentB.value); }
            friend inline primitive operator <<(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((int*) argumentB.value); }

            inline primitive operator <<(const long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) << argument; case this -> char__type: return *((char*) this -> value) << argument; case this -> char8_t__type: return *((char8_t*) this -> value) << argument; case this -> char16_t__type: return *((char16_t*) this -> value) << argument; case this -> char32_t__type: return *((char32_t*) this -> value) << argument; case this -> double__type: return ((long) *((double*) this -> value)) << argument; case this -> float__type: return ((int) *((float*) this -> value)) << argument; case this -> int__type: return *((int*) this -> value) << argument; case this -> long__type: return *((long*) this -> value) << argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) << argument; case this -> long_long__type: return *((long long*) this -> value) << argument; case this -> short__type: return *((short*) this -> value) << argument; case this -> void__type: return ((int) *((void**) this -> value)) << argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) << argument; } return *((long*) this -> value) << argument; }
            friend inline primitive operator <<(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((long*) argumentB.value); }
            friend inline primitive operator <<(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((long*) argumentB.value); }
            friend inline primitive operator <<(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((long*) argumentB.value); }
            friend inline primitive operator <<(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((long*) argumentB.value); }

            inline primitive operator <<(const long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) << argument; case this -> char__type: return *((char*) this -> value) << argument; case this -> char8_t__type: return *((char8_t*) this -> value) << argument; case this -> char16_t__type: return *((char16_t*) this -> value) << argument; case this -> char32_t__type: return *((char32_t*) this -> value) << argument; case this -> double__type: return ((long) *((double*) this -> value)) << argument; case this -> float__type: return ((int) *((float*) this -> value)) << argument; case this -> int__type: return *((int*) this -> value) << argument; case this -> long__type: return *((long*) this -> value) << argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) << argument; case this -> long_long__type: return *((long long*) this -> value) << argument; case this -> short__type: return *((short*) this -> value) << argument; case this -> void__type: return ((int) *((void**) this -> value)) << argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) << argument; } return *((long long*) this -> value) << argument; }
            friend inline primitive operator <<(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((long long*) argumentB.value); }
            friend inline primitive operator <<(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((long long*) argumentB.value); }
            friend inline primitive operator <<(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((long long*) argumentB.value); }
            friend inline primitive operator <<(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((long long*) argumentB.value); }

            inline primitive operator <<(const short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) << argument; case this -> char__type: return *((char*) this -> value) << argument; case this -> char8_t__type: return *((char8_t*) this -> value) << argument; case this -> char16_t__type: return *((char16_t*) this -> value) << argument; case this -> char32_t__type: return *((char32_t*) this -> value) << argument; case this -> double__type: return ((long) *((double*) this -> value)) << argument; case this -> float__type: return ((int) *((float*) this -> value)) << argument; case this -> int__type: return *((int*) this -> value) << argument; case this -> long__type: return *((long*) this -> value) << argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) << argument; case this -> long_long__type: return *((long long*) this -> value) << argument; case this -> short__type: return *((short*) this -> value) << argument; case this -> void__type: return ((int) *((void**) this -> value)) << argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) << argument; } return *((short*) this -> value) << argument; }
            friend inline primitive operator <<(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((short*) argumentB.value); }
            friend inline primitive operator <<(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((short*) argumentB.value); }
            friend inline primitive operator <<(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((short*) argumentB.value); }
            friend inline primitive operator <<(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((short*) argumentB.value); }

            inline primitive operator <<(const signed char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) << argument; case this -> char__type: return *((char*) this -> value) << argument; case this -> char8_t__type: return *((char8_t*) this -> value) << argument; case this -> char16_t__type: return *((char16_t*) this -> value) << argument; case this -> char32_t__type: return *((char32_t*) this -> value) << argument; case this -> double__type: return ((long) *((double*) this -> value)) << argument; case this -> float__type: return ((int) *((float*) this -> value)) << argument; case this -> int__type: return *((int*) this -> value) << argument; case this -> long__type: return *((long*) this -> value) << argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) << argument; case this -> long_long__type: return *((long long*) this -> value) << argument; case this -> short__type: return *((short*) this -> value) << argument; case this -> void__type: return ((int) *((void**) this -> value)) << argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) << argument; } return *((signed char*) this -> value) << argument; }
            friend inline primitive operator <<(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((signed char*) argumentB.value); }
            friend inline primitive operator <<(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((signed char*) argumentB.value); }
            friend inline primitive operator <<(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((signed char*) argumentB.value); }
            friend inline primitive operator <<(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((signed char*) argumentB.value); }

            inline primitive operator <<(const unsigned char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) << argument; case this -> char__type: return *((char*) this -> value) << argument; case this -> char8_t__type: return *((char8_t*) this -> value) << argument; case this -> char16_t__type: return *((char16_t*) this -> value) << argument; case this -> char32_t__type: return *((char32_t*) this -> value) << argument; case this -> double__type: return ((long) *((double*) this -> value)) << argument; case this -> float__type: return ((int) *((float*) this -> value)) << argument; case this -> int__type: return *((int*) this -> value) << argument; case this -> long__type: return *((long*) this -> value) << argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) << argument; case this -> long_long__type: return *((long long*) this -> value) << argument; case this -> short__type: return *((short*) this -> value) << argument; case this -> void__type: return ((int) *((void**) this -> value)) << argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) << argument; } return *((unsigned char*) this -> value) << argument; }
            friend inline primitive operator <<(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((unsigned char*) argumentB.value); }
            friend inline primitive operator <<(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((unsigned char*) argumentB.value); }
            friend inline primitive operator <<(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((unsigned char*) argumentB.value); }
            friend inline primitive operator <<(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((unsigned char*) argumentB.value); }

            inline primitive operator <<(const unsigned int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) << argument; case this -> char__type: return *((char*) this -> value) << argument; case this -> char8_t__type: return *((char8_t*) this -> value) << argument; case this -> char16_t__type: return *((char16_t*) this -> value) << argument; case this -> char32_t__type: return *((char32_t*) this -> value) << argument; case this -> double__type: return ((long) *((double*) this -> value)) << argument; case this -> float__type: return ((int) *((float*) this -> value)) << argument; case this -> int__type: return *((int*) this -> value) << argument; case this -> long__type: return *((long*) this -> value) << argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) << argument; case this -> long_long__type: return *((long long*) this -> value) << argument; case this -> short__type: return *((short*) this -> value) << argument; case this -> void__type: return ((int) *((void**) this -> value)) << argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) << argument; } return *((unsigned int*) this -> value) << argument; }
            friend inline primitive operator <<(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((unsigned int*) argumentB.value); }
            friend inline primitive operator <<(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((unsigned int*) argumentB.value); }
            friend inline primitive operator <<(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((unsigned int*) argumentB.value); }
            friend inline primitive operator <<(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((unsigned int*) argumentB.value); }

            inline primitive operator <<(const unsigned long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) << argument; case this -> char__type: return *((char*) this -> value) << argument; case this -> char8_t__type: return *((char8_t*) this -> value) << argument; case this -> char16_t__type: return *((char16_t*) this -> value) << argument; case this -> char32_t__type: return *((char32_t*) this -> value) << argument; case this -> double__type: return ((long) *((double*) this -> value)) << argument; case this -> float__type: return ((int) *((float*) this -> value)) << argument; case this -> int__type: return *((int*) this -> value) << argument; case this -> long__type: return *((long*) this -> value) << argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) << argument; case this -> long_long__type: return *((long long*) this -> value) << argument; case this -> short__type: return *((short*) this -> value) << argument; case this -> void__type: return ((int) *((void**) this -> value)) << argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) << argument; } return *((unsigned long*) this -> value) << argument; }
            friend inline primitive operator <<(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((unsigned long*) argumentB.value); }
            friend inline primitive operator <<(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((unsigned long*) argumentB.value); }
            friend inline primitive operator <<(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((unsigned long*) argumentB.value); }
            friend inline primitive operator <<(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((unsigned long*) argumentB.value); }

            inline primitive operator <<(const unsigned long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) << argument; case this -> char__type: return *((char*) this -> value) << argument; case this -> char8_t__type: return *((char8_t*) this -> value) << argument; case this -> char16_t__type: return *((char16_t*) this -> value) << argument; case this -> char32_t__type: return *((char32_t*) this -> value) << argument; case this -> double__type: return ((long) *((double*) this -> value)) << argument; case this -> float__type: return ((int) *((float*) this -> value)) << argument; case this -> int__type: return *((int*) this -> value) << argument; case this -> long__type: return *((long*) this -> value) << argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) << argument; case this -> long_long__type: return *((long long*) this -> value) << argument; case this -> short__type: return *((short*) this -> value) << argument; case this -> void__type: return ((int) *((void**) this -> value)) << argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) << argument; } return *((unsigned long long*) this -> value) << argument; }
            friend inline primitive operator <<(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((unsigned long long*) argumentB.value); }
            friend inline primitive operator <<(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((unsigned long long*) argumentB.value); }
            friend inline primitive operator <<(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((unsigned long long*) argumentB.value); }
            friend inline primitive operator <<(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((unsigned long long*) argumentB.value); }

            inline primitive operator <<(const unsigned short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) << argument; case this -> char__type: return *((char*) this -> value) << argument; case this -> char8_t__type: return *((char8_t*) this -> value) << argument; case this -> char16_t__type: return *((char16_t*) this -> value) << argument; case this -> char32_t__type: return *((char32_t*) this -> value) << argument; case this -> double__type: return ((long) *((double*) this -> value)) << argument; case this -> float__type: return ((int) *((float*) this -> value)) << argument; case this -> int__type: return *((int*) this -> value) << argument; case this -> long__type: return *((long*) this -> value) << argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) << argument; case this -> long_long__type: return *((long long*) this -> value) << argument; case this -> short__type: return *((short*) this -> value) << argument; case this -> void__type: return ((int) *((void**) this -> value)) << argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) << argument; } return *((unsigned short*) this -> value) << argument; }
            friend inline primitive operator <<(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((unsigned short*) argumentB.value); }
            friend inline primitive operator <<(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((unsigned short*) argumentB.value); }
            friend inline primitive operator <<(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((unsigned short*) argumentB.value); }
            friend inline primitive operator <<(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((unsigned short*) argumentB.value); }

            inline primitive operator <<(void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) << (int) argument; case this -> char__type: return *((char*) this -> value) << (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) << (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) << (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) << (int) argument; case this -> double__type: return ((long) *((double*) this -> value)) << (int) argument; case this -> float__type: return ((int) *((float*) this -> value)) << (int) argument; case this -> int__type: return *((int*) this -> value) << (int) argument; case this -> long__type: return *((long*) this -> value) << (int) argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) << (int) argument; case this -> long_long__type: return *((long long*) this -> value) << (int) argument; case this -> short__type: return *((short*) this -> value) << (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) << (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) << (int) argument; } return *((int*) this -> value) << (int) argument; }
            friend inline primitive operator <<(void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) << *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) << *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) << *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) << ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) << ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) << *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) << *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) << ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) << *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) << *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) << ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) << *((wchar_t*) argumentB.value); } return ((int) argumentA) << *((int*) argumentB.value); }
            friend inline primitive operator <<(void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) << *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) << *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) << *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) << ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) << ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) << *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) << *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) << ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) << *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) << *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) << ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) << *((wchar_t*) argumentB.value); } return ((int) argumentA) << *((int*) argumentB.value); }
            friend inline primitive operator <<(void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) << *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) << *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) << *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) << ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) << ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) << *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) << *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) << ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) << *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) << *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) << ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) << *((wchar_t*) argumentB.value); } return ((int) argumentA) << *((int*) argumentB.value); }
            friend inline primitive operator <<(void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) << *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) << *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) << *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) << ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) << ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) << *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) << *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) << ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) << *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) << *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) << ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) << *((wchar_t*) argumentB.value); } return ((int) argumentA) << *((int*) argumentB.value); }

            inline primitive operator <<(const void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) << (int) argument; case this -> char__type: return *((char*) this -> value) << (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) << (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) << (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) << (int) argument; case this -> double__type: return ((long) *((double*) this -> value)) << (int) argument; case this -> float__type: return ((int) *((float*) this -> value)) << (int) argument; case this -> int__type: return *((int*) this -> value) << (int) argument; case this -> long__type: return *((long*) this -> value) << (int) argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) << (int) argument; case this -> long_long__type: return *((long long*) this -> value) << (int) argument; case this -> short__type: return *((short*) this -> value) << (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) << (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) << (int) argument; } return *((int*) this -> value) << (int) argument; }
            friend inline primitive operator <<(const void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) << *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) << *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) << *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) << ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) << ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) << *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) << *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) << ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) << *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) << *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) << ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) << *((wchar_t*) argumentB.value); } return ((int) argumentA) << *((int*) argumentB.value); }
            friend inline primitive operator <<(const void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) << *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) << *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) << *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) << ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) << ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) << *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) << *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) << ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) << *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) << *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) << ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) << *((wchar_t*) argumentB.value); } return ((int) argumentA) << *((int*) argumentB.value); }
            friend inline primitive operator <<(const void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) << *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) << *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) << *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) << ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) << ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) << *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) << *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) << ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) << *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) << *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) << ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) << *((wchar_t*) argumentB.value); } return ((int) argumentA) << *((int*) argumentB.value); }
            friend inline primitive operator <<(const void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) << *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) << *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) << *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) << ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) << ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) << *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) << *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) << ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) << *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) << *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) << ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) << *((wchar_t*) argumentB.value); } return ((int) argumentA) << *((int*) argumentB.value); }

            inline primitive operator <<(const wchar_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) << argument; case this -> char__type: return *((char*) this -> value) << argument; case this -> char8_t__type: return *((char8_t*) this -> value) << argument; case this -> char16_t__type: return *((char16_t*) this -> value) << argument; case this -> char32_t__type: return *((char32_t*) this -> value) << argument; case this -> double__type: return ((long) *((double*) this -> value)) << argument; case this -> float__type: return ((int) *((float*) this -> value)) << argument; case this -> int__type: return *((int*) this -> value) << argument; case this -> long__type: return *((long*) this -> value) << argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) << argument; case this -> long_long__type: return *((long long*) this -> value) << argument; case this -> short__type: return *((short*) this -> value) << argument; case this -> void__type: return ((int) *((void**) this -> value)) << argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) << argument; } return *((wchar_t*) this -> value) << argument; }
            friend inline primitive operator <<(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((wchar_t*) argumentB.value); }
            friend inline primitive operator <<(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((wchar_t*) argumentB.value); }
            friend inline primitive operator <<(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((wchar_t*) argumentB.value); }
            friend inline primitive operator <<(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA << *((boolean*) argumentB.value); case argumentB.char__type: return argumentA << *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA << *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA << *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA << *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA << (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA << (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA << *((int*) argumentB.value); case argumentB.long__type: return argumentA << *((long*) argumentB.value); case argumentB.long_double__type: return argumentA << (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA << *((long long*) argumentB.value); case argumentB.short__type: return argumentA << *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) << argumentA; case argumentB.wchar_t__type: return argumentA << *((wchar_t*) argumentB.value); } return argumentA << *((wchar_t*) argumentB.value); }

            // [>>]
            inline primitive operator >>(const boolean argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >> argument; case this -> char__type: return *((char*) this -> value) >> argument; case this -> char8_t__type: return *((char8_t*) this -> value) >> argument; case this -> char16_t__type: return *((char16_t*) this -> value) >> argument; case this -> char32_t__type: return *((char32_t*) this -> value) >> argument; case this -> double__type: return ((long) *((double*) this -> value)) >> argument; case this -> float__type: return ((int) *((float*) this -> value)) >> argument; case this -> int__type: return *((int*) this -> value) >> argument; case this -> long__type: return *((long*) this -> value) >> argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) >> argument; case this -> long_long__type: return *((long long*) this -> value) >> argument; case this -> short__type: return *((short*) this -> value) >> argument; case this -> void__type: return ((int) *((void**) this -> value)) >> argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >> argument; } return *((boolean*) this -> value) >> argument; }
            friend inline primitive operator >>(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((boolean*) argumentB.value); }
            friend inline primitive operator >>(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((boolean*) argumentB.value); }
            friend inline primitive operator >>(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((boolean*) argumentB.value); }
            friend inline primitive operator >>(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((boolean*) argumentB.value); }

            inline primitive operator >>(const char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >> argument; case this -> char__type: return *((char*) this -> value) >> argument; case this -> char8_t__type: return *((char8_t*) this -> value) >> argument; case this -> char16_t__type: return *((char16_t*) this -> value) >> argument; case this -> char32_t__type: return *((char32_t*) this -> value) >> argument; case this -> double__type: return ((long) *((double*) this -> value)) >> argument; case this -> float__type: return ((int) *((float*) this -> value)) >> argument; case this -> int__type: return *((int*) this -> value) >> argument; case this -> long__type: return *((long*) this -> value) >> argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) >> argument; case this -> long_long__type: return *((long long*) this -> value) >> argument; case this -> short__type: return *((short*) this -> value) >> argument; case this -> void__type: return ((int) *((void**) this -> value)) >> argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >> argument; } return *((char*) this -> value) >> argument; }
            friend inline primitive operator >>(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((char*) argumentB.value); }
            friend inline primitive operator >>(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((char*) argumentB.value); }
            friend inline primitive operator >>(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((char*) argumentB.value); }
            friend inline primitive operator >>(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((char*) argumentB.value); }

            inline primitive operator >>(const char8_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >> argument; case this -> char__type: return *((char*) this -> value) >> argument; case this -> char8_t__type: return *((char8_t*) this -> value) >> argument; case this -> char16_t__type: return *((char16_t*) this -> value) >> argument; case this -> char32_t__type: return *((char32_t*) this -> value) >> argument; case this -> double__type: return ((long) *((double*) this -> value)) >> argument; case this -> float__type: return ((int) *((float*) this -> value)) >> argument; case this -> int__type: return *((int*) this -> value) >> argument; case this -> long__type: return *((long*) this -> value) >> argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) >> argument; case this -> long_long__type: return *((long long*) this -> value) >> argument; case this -> short__type: return *((short*) this -> value) >> argument; case this -> void__type: return ((int) *((void**) this -> value)) >> argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >> argument; } return *((char8_t*) this -> value) >> argument; }
            friend inline primitive operator >>(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((char8_t*) argumentB.value); }
            friend inline primitive operator >>(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((char8_t*) argumentB.value); }
            friend inline primitive operator >>(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((char8_t*) argumentB.value); }
            friend inline primitive operator >>(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((char8_t*) argumentB.value); }

            inline primitive operator >>(const char16_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >> argument; case this -> char__type: return *((char*) this -> value) >> argument; case this -> char8_t__type: return *((char8_t*) this -> value) >> argument; case this -> char16_t__type: return *((char16_t*) this -> value) >> argument; case this -> char32_t__type: return *((char32_t*) this -> value) >> argument; case this -> double__type: return ((long) *((double*) this -> value)) >> argument; case this -> float__type: return ((int) *((float*) this -> value)) >> argument; case this -> int__type: return *((int*) this -> value) >> argument; case this -> long__type: return *((long*) this -> value) >> argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) >> argument; case this -> long_long__type: return *((long long*) this -> value) >> argument; case this -> short__type: return *((short*) this -> value) >> argument; case this -> void__type: return ((int) *((void**) this -> value)) >> argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >> argument; } return *((char16_t*) this -> value) >> argument; }
            friend inline primitive operator >>(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((char16_t*) argumentB.value); }
            friend inline primitive operator >>(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((char16_t*) argumentB.value); }
            friend inline primitive operator >>(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((char16_t*) argumentB.value); }
            friend inline primitive operator >>(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((char16_t*) argumentB.value); }

            inline primitive operator >>(const char32_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >> argument; case this -> char__type: return *((char*) this -> value) >> argument; case this -> char8_t__type: return *((char8_t*) this -> value) >> argument; case this -> char16_t__type: return *((char16_t*) this -> value) >> argument; case this -> char32_t__type: return *((char32_t*) this -> value) >> argument; case this -> double__type: return ((long) *((double*) this -> value)) >> argument; case this -> float__type: return ((int) *((float*) this -> value)) >> argument; case this -> int__type: return *((int*) this -> value) >> argument; case this -> long__type: return *((long*) this -> value) >> argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) >> argument; case this -> long_long__type: return *((long long*) this -> value) >> argument; case this -> short__type: return *((short*) this -> value) >> argument; case this -> void__type: return ((int) *((void**) this -> value)) >> argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >> argument; } return *((char32_t*) this -> value) >> argument; }
            friend inline primitive operator >>(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((char32_t*) argumentB.value); }
            friend inline primitive operator >>(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((char32_t*) argumentB.value); }
            friend inline primitive operator >>(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((char32_t*) argumentB.value); }
            friend inline primitive operator >>(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((char32_t*) argumentB.value); }

            inline primitive operator >>(const int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >> argument; case this -> char__type: return *((char*) this -> value) >> argument; case this -> char8_t__type: return *((char8_t*) this -> value) >> argument; case this -> char16_t__type: return *((char16_t*) this -> value) >> argument; case this -> char32_t__type: return *((char32_t*) this -> value) >> argument; case this -> double__type: return ((long) *((double*) this -> value)) >> argument; case this -> float__type: return ((int) *((float*) this -> value)) >> argument; case this -> int__type: return *((int*) this -> value) >> argument; case this -> long__type: return *((long*) this -> value) >> argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) >> argument; case this -> long_long__type: return *((long long*) this -> value) >> argument; case this -> short__type: return *((short*) this -> value) >> argument; case this -> void__type: return ((int) *((void**) this -> value)) >> argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >> argument; } return *((int*) this -> value) >> argument; }
            friend inline primitive operator >>(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((int*) argumentB.value); }
            friend inline primitive operator >>(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((int*) argumentB.value); }
            friend inline primitive operator >>(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((int*) argumentB.value); }
            friend inline primitive operator >>(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((int*) argumentB.value); }

            inline primitive operator >>(const long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >> argument; case this -> char__type: return *((char*) this -> value) >> argument; case this -> char8_t__type: return *((char8_t*) this -> value) >> argument; case this -> char16_t__type: return *((char16_t*) this -> value) >> argument; case this -> char32_t__type: return *((char32_t*) this -> value) >> argument; case this -> double__type: return ((long) *((double*) this -> value)) >> argument; case this -> float__type: return ((int) *((float*) this -> value)) >> argument; case this -> int__type: return *((int*) this -> value) >> argument; case this -> long__type: return *((long*) this -> value) >> argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) >> argument; case this -> long_long__type: return *((long long*) this -> value) >> argument; case this -> short__type: return *((short*) this -> value) >> argument; case this -> void__type: return ((int) *((void**) this -> value)) >> argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >> argument; } return *((long*) this -> value) >> argument; }
            friend inline primitive operator >>(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((long*) argumentB.value); }
            friend inline primitive operator >>(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((long*) argumentB.value); }
            friend inline primitive operator >>(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((long*) argumentB.value); }
            friend inline primitive operator >>(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((long*) argumentB.value); }

            inline primitive operator >>(const long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >> argument; case this -> char__type: return *((char*) this -> value) >> argument; case this -> char8_t__type: return *((char8_t*) this -> value) >> argument; case this -> char16_t__type: return *((char16_t*) this -> value) >> argument; case this -> char32_t__type: return *((char32_t*) this -> value) >> argument; case this -> double__type: return ((long) *((double*) this -> value)) >> argument; case this -> float__type: return ((int) *((float*) this -> value)) >> argument; case this -> int__type: return *((int*) this -> value) >> argument; case this -> long__type: return *((long*) this -> value) >> argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) >> argument; case this -> long_long__type: return *((long long*) this -> value) >> argument; case this -> short__type: return *((short*) this -> value) >> argument; case this -> void__type: return ((int) *((void**) this -> value)) >> argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >> argument; } return *((long long*) this -> value) >> argument; }
            friend inline primitive operator >>(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((long long*) argumentB.value); }
            friend inline primitive operator >>(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((long long*) argumentB.value); }
            friend inline primitive operator >>(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((long long*) argumentB.value); }
            friend inline primitive operator >>(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((long long*) argumentB.value); }

            inline primitive operator >>(const short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >> argument; case this -> char__type: return *((char*) this -> value) >> argument; case this -> char8_t__type: return *((char8_t*) this -> value) >> argument; case this -> char16_t__type: return *((char16_t*) this -> value) >> argument; case this -> char32_t__type: return *((char32_t*) this -> value) >> argument; case this -> double__type: return ((long) *((double*) this -> value)) >> argument; case this -> float__type: return ((int) *((float*) this -> value)) >> argument; case this -> int__type: return *((int*) this -> value) >> argument; case this -> long__type: return *((long*) this -> value) >> argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) >> argument; case this -> long_long__type: return *((long long*) this -> value) >> argument; case this -> short__type: return *((short*) this -> value) >> argument; case this -> void__type: return ((int) *((void**) this -> value)) >> argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >> argument; } return *((short*) this -> value) >> argument; }
            friend inline primitive operator >>(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((short*) argumentB.value); }
            friend inline primitive operator >>(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((short*) argumentB.value); }
            friend inline primitive operator >>(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((short*) argumentB.value); }
            friend inline primitive operator >>(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((short*) argumentB.value); }

            inline primitive operator >>(const signed char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >> argument; case this -> char__type: return *((char*) this -> value) >> argument; case this -> char8_t__type: return *((char8_t*) this -> value) >> argument; case this -> char16_t__type: return *((char16_t*) this -> value) >> argument; case this -> char32_t__type: return *((char32_t*) this -> value) >> argument; case this -> double__type: return ((long) *((double*) this -> value)) >> argument; case this -> float__type: return ((int) *((float*) this -> value)) >> argument; case this -> int__type: return *((int*) this -> value) >> argument; case this -> long__type: return *((long*) this -> value) >> argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) >> argument; case this -> long_long__type: return *((long long*) this -> value) >> argument; case this -> short__type: return *((short*) this -> value) >> argument; case this -> void__type: return ((int) *((void**) this -> value)) >> argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >> argument; } return *((signed char*) this -> value) >> argument; }
            friend inline primitive operator >>(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((signed char*) argumentB.value); }
            friend inline primitive operator >>(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((signed char*) argumentB.value); }
            friend inline primitive operator >>(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((signed char*) argumentB.value); }
            friend inline primitive operator >>(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((signed char*) argumentB.value); }

            inline primitive operator >>(const unsigned char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >> argument; case this -> char__type: return *((char*) this -> value) >> argument; case this -> char8_t__type: return *((char8_t*) this -> value) >> argument; case this -> char16_t__type: return *((char16_t*) this -> value) >> argument; case this -> char32_t__type: return *((char32_t*) this -> value) >> argument; case this -> double__type: return ((long) *((double*) this -> value)) >> argument; case this -> float__type: return ((int) *((float*) this -> value)) >> argument; case this -> int__type: return *((int*) this -> value) >> argument; case this -> long__type: return *((long*) this -> value) >> argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) >> argument; case this -> long_long__type: return *((long long*) this -> value) >> argument; case this -> short__type: return *((short*) this -> value) >> argument; case this -> void__type: return ((int) *((void**) this -> value)) >> argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >> argument; } return *((unsigned char*) this -> value) >> argument; }
            friend inline primitive operator >>(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((unsigned char*) argumentB.value); }
            friend inline primitive operator >>(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((unsigned char*) argumentB.value); }
            friend inline primitive operator >>(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((unsigned char*) argumentB.value); }
            friend inline primitive operator >>(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((unsigned char*) argumentB.value); }

            inline primitive operator >>(const unsigned int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >> argument; case this -> char__type: return *((char*) this -> value) >> argument; case this -> char8_t__type: return *((char8_t*) this -> value) >> argument; case this -> char16_t__type: return *((char16_t*) this -> value) >> argument; case this -> char32_t__type: return *((char32_t*) this -> value) >> argument; case this -> double__type: return ((long) *((double*) this -> value)) >> argument; case this -> float__type: return ((int) *((float*) this -> value)) >> argument; case this -> int__type: return *((int*) this -> value) >> argument; case this -> long__type: return *((long*) this -> value) >> argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) >> argument; case this -> long_long__type: return *((long long*) this -> value) >> argument; case this -> short__type: return *((short*) this -> value) >> argument; case this -> void__type: return ((int) *((void**) this -> value)) >> argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >> argument; } return *((unsigned int*) this -> value) >> argument; }
            friend inline primitive operator >>(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((unsigned int*) argumentB.value); }
            friend inline primitive operator >>(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((unsigned int*) argumentB.value); }
            friend inline primitive operator >>(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((unsigned int*) argumentB.value); }
            friend inline primitive operator >>(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((unsigned int*) argumentB.value); }

            inline primitive operator >>(const unsigned long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >> argument; case this -> char__type: return *((char*) this -> value) >> argument; case this -> char8_t__type: return *((char8_t*) this -> value) >> argument; case this -> char16_t__type: return *((char16_t*) this -> value) >> argument; case this -> char32_t__type: return *((char32_t*) this -> value) >> argument; case this -> double__type: return ((long) *((double*) this -> value)) >> argument; case this -> float__type: return ((int) *((float*) this -> value)) >> argument; case this -> int__type: return *((int*) this -> value) >> argument; case this -> long__type: return *((long*) this -> value) >> argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) >> argument; case this -> long_long__type: return *((long long*) this -> value) >> argument; case this -> short__type: return *((short*) this -> value) >> argument; case this -> void__type: return ((int) *((void**) this -> value)) >> argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >> argument; } return *((unsigned long*) this -> value) >> argument; }
            friend inline primitive operator >>(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((unsigned long*) argumentB.value); }
            friend inline primitive operator >>(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((unsigned long*) argumentB.value); }
            friend inline primitive operator >>(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((unsigned long*) argumentB.value); }
            friend inline primitive operator >>(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((unsigned long*) argumentB.value); }

            inline primitive operator >>(const unsigned long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >> argument; case this -> char__type: return *((char*) this -> value) >> argument; case this -> char8_t__type: return *((char8_t*) this -> value) >> argument; case this -> char16_t__type: return *((char16_t*) this -> value) >> argument; case this -> char32_t__type: return *((char32_t*) this -> value) >> argument; case this -> double__type: return ((long) *((double*) this -> value)) >> argument; case this -> float__type: return ((int) *((float*) this -> value)) >> argument; case this -> int__type: return *((int*) this -> value) >> argument; case this -> long__type: return *((long*) this -> value) >> argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) >> argument; case this -> long_long__type: return *((long long*) this -> value) >> argument; case this -> short__type: return *((short*) this -> value) >> argument; case this -> void__type: return ((int) *((void**) this -> value)) >> argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >> argument; } return *((unsigned long long*) this -> value) >> argument; }
            friend inline primitive operator >>(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((unsigned long long*) argumentB.value); }
            friend inline primitive operator >>(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((unsigned long long*) argumentB.value); }
            friend inline primitive operator >>(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((unsigned long long*) argumentB.value); }
            friend inline primitive operator >>(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((unsigned long long*) argumentB.value); }

            inline primitive operator >>(const unsigned short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >> argument; case this -> char__type: return *((char*) this -> value) >> argument; case this -> char8_t__type: return *((char8_t*) this -> value) >> argument; case this -> char16_t__type: return *((char16_t*) this -> value) >> argument; case this -> char32_t__type: return *((char32_t*) this -> value) >> argument; case this -> double__type: return ((long) *((double*) this -> value)) >> argument; case this -> float__type: return ((int) *((float*) this -> value)) >> argument; case this -> int__type: return *((int*) this -> value) >> argument; case this -> long__type: return *((long*) this -> value) >> argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) >> argument; case this -> long_long__type: return *((long long*) this -> value) >> argument; case this -> short__type: return *((short*) this -> value) >> argument; case this -> void__type: return ((int) *((void**) this -> value)) >> argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >> argument; } return *((unsigned short*) this -> value) >> argument; }
            friend inline primitive operator >>(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((unsigned short*) argumentB.value); }
            friend inline primitive operator >>(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((unsigned short*) argumentB.value); }
            friend inline primitive operator >>(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((unsigned short*) argumentB.value); }
            friend inline primitive operator >>(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((unsigned short*) argumentB.value); }

            inline primitive operator >>(void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >> (int) argument; case this -> char__type: return *((char*) this -> value) >> (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) >> (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) >> (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) >> (int) argument; case this -> double__type: return ((long) *((double*) this -> value)) >> (int) argument; case this -> float__type: return ((int) *((float*) this -> value)) >> (int) argument; case this -> int__type: return *((int*) this -> value) >> (int) argument; case this -> long__type: return *((long*) this -> value) >> (int) argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) >> (int) argument; case this -> long_long__type: return *((long long*) this -> value) >> (int) argument; case this -> short__type: return *((short*) this -> value) >> (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) >> (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >> (int) argument; } return *((int*) this -> value) >> (int) argument; }
            friend inline primitive operator >>(void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) >> *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) >> *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) >> *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) >> ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) >> ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) >> *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) >> *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) >> ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) >> *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) >> *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) >> ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) >> *((wchar_t*) argumentB.value); } return ((int) argumentA) >> *((int*) argumentB.value); }
            friend inline primitive operator >>(void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) >> *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) >> *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) >> *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) >> ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) >> ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) >> *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) >> *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) >> ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) >> *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) >> *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) >> ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) >> *((wchar_t*) argumentB.value); } return ((int) argumentA) >> *((int*) argumentB.value); }
            friend inline primitive operator >>(void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) >> *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) >> *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) >> *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) >> ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) >> ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) >> *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) >> *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) >> ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) >> *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) >> *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) >> ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) >> *((wchar_t*) argumentB.value); } return ((int) argumentA) >> *((int*) argumentB.value); }
            friend inline primitive operator >>(void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) >> *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) >> *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) >> *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) >> ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) >> ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) >> *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) >> *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) >> ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) >> *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) >> *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) >> ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) >> *((wchar_t*) argumentB.value); } return ((int) argumentA) >> *((int*) argumentB.value); }

            inline primitive operator >>(const void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >> (int) argument; case this -> char__type: return *((char*) this -> value) >> (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) >> (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) >> (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) >> (int) argument; case this -> double__type: return ((long) *((double*) this -> value)) >> (int) argument; case this -> float__type: return ((int) *((float*) this -> value)) >> (int) argument; case this -> int__type: return *((int*) this -> value) >> (int) argument; case this -> long__type: return *((long*) this -> value) >> (int) argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) >> (int) argument; case this -> long_long__type: return *((long long*) this -> value) >> (int) argument; case this -> short__type: return *((short*) this -> value) >> (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) >> (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >> (int) argument; } return *((int*) this -> value) >> (int) argument; }
            friend inline primitive operator >>(const void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) >> *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) >> *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) >> *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) >> ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) >> ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) >> *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) >> *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) >> ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) >> *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) >> *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) >> ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) >> *((wchar_t*) argumentB.value); } return ((int) argumentA) >> *((int*) argumentB.value); }
            friend inline primitive operator >>(const void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) >> *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) >> *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) >> *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) >> ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) >> ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) >> *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) >> *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) >> ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) >> *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) >> *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) >> ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) >> *((wchar_t*) argumentB.value); } return ((int) argumentA) >> *((int*) argumentB.value); }
            friend inline primitive operator >>(const void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) >> *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) >> *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) >> *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) >> ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) >> ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) >> *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) >> *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) >> ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) >> *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) >> *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) >> ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) >> *((wchar_t*) argumentB.value); } return ((int) argumentA) >> *((int*) argumentB.value); }
            friend inline primitive operator >>(const void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) >> *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) >> *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((int) argumentA) >> *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) >> ((long) *((double*) argumentB.value)); case argumentB.float__type: return ((int) argumentA) >> ((int) *((float*) argumentB.value)); case argumentB.int__type: return ((int) argumentA) >> *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) >> *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) >> ((long long) *((long double*) argumentB.value)); case argumentB.long_long__type: return ((int) argumentA) >> *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) >> *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) >> ((int) *((void**) argumentB.value)); case argumentB.wchar_t__type: return ((int) argumentA) >> *((wchar_t*) argumentB.value); } return ((int) argumentA) >> *((int*) argumentB.value); }

            inline primitive operator >>(const wchar_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >> argument; case this -> char__type: return *((char*) this -> value) >> argument; case this -> char8_t__type: return *((char8_t*) this -> value) >> argument; case this -> char16_t__type: return *((char16_t*) this -> value) >> argument; case this -> char32_t__type: return *((char32_t*) this -> value) >> argument; case this -> double__type: return ((long) *((double*) this -> value)) >> argument; case this -> float__type: return ((int) *((float*) this -> value)) >> argument; case this -> int__type: return *((int*) this -> value) >> argument; case this -> long__type: return *((long*) this -> value) >> argument; case this -> long_double__type: return ((long long) *((long double*) this -> value)) >> argument; case this -> long_long__type: return *((long long*) this -> value) >> argument; case this -> short__type: return *((short*) this -> value) >> argument; case this -> void__type: return ((int) *((void**) this -> value)) >> argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >> argument; } return *((wchar_t*) this -> value) >> argument; }
            friend inline primitive operator >>(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((wchar_t*) argumentB.value); }
            friend inline primitive operator >>(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((wchar_t*) argumentB.value); }
            friend inline primitive operator >>(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((wchar_t*) argumentB.value); }
            friend inline primitive operator >>(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >> *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >> *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >> *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >> *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >> *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >> (long) *((double*) argumentB.value); case argumentB.float__type: return argumentA >> (int) *((float*) argumentB.value); case argumentB.int__type: return argumentA >> *((int*) argumentB.value); case argumentB.long__type: return argumentA >> *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >> (long long) *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >> *((long long*) argumentB.value); case argumentB.short__type: return argumentA >> *((short*) argumentB.value); case argumentB.void__type: return ((int) *((void**) argumentB.value)) >> argumentA; case argumentB.wchar_t__type: return argumentA >> *((wchar_t*) argumentB.value); } return argumentA >> *((wchar_t*) argumentB.value); }

            // [>>=]
            inline boolean operator >>=(const boolean argument) { *this = *this >> argument; return argument; }
            friend inline primitive& operator >>=(boolean& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator >>=(boolean& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(boolean& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(boolean& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char8_t operator >>=(const char8_t argument) { *this = *this >> argument; return argument; }
            friend inline primitive& operator >>=(char8_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator >>=(char8_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(char8_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(char8_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char16_t operator >>=(const char16_t argument) { *this = *this >> argument; return argument; }
            friend inline primitive& operator >>=(char16_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator >>=(char16_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(char16_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(char16_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char32_t operator >>=(const char32_t argument) { *this = *this >> argument; return argument; }
            friend inline primitive& operator >>=(char32_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator >>=(char32_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(char32_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(char32_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }

            inline int operator >>=(const int argument) { *this = *this >> argument; return argument; }
            friend inline primitive& operator >>=(int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator >>=(int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long operator >>=(const long argument) { *this = *this >> argument; return argument; }
            friend inline primitive& operator >>=(long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator >>=(long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long long operator >>=(const long long argument) { *this = *this >> argument; return argument; }
            friend inline primitive& operator >>=(long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator >>=(long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }

            inline short operator >>=(const short argument) { *this = *this >> argument; return argument; }
            friend inline primitive& operator >>=(short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator >>=(short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }

            inline signed char operator >>=(const signed char argument) { *this = *this >> argument; return argument; }
            friend inline primitive& operator >>=(signed char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator >>=(signed char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(signed char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(signed char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned char operator >>=(const unsigned char argument) { *this = *this >> argument; return argument; }
            friend inline primitive& operator >>=(unsigned char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator >>=(unsigned char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(unsigned char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(unsigned char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned int operator >>=(const unsigned int argument) { *this = *this >> argument; return argument; }
            friend inline primitive& operator >>=(unsigned int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator >>=(unsigned int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(unsigned int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(unsigned int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned long operator >>=(const unsigned long argument) { *this = *this >> argument; return argument; }
            friend inline primitive& operator >>=(unsigned long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator >>=(unsigned long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(unsigned long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(unsigned long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned long long operator >>=(const unsigned long long argument) { *this = *this >> argument; return argument; }
            friend inline primitive& operator >>=(unsigned long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator >>=(unsigned long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(unsigned long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(unsigned long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned short operator >>=(const unsigned short argument) { *this = *this >> argument; return argument; }
            friend inline primitive& operator >>=(unsigned short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator >>=(unsigned short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(unsigned short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(unsigned short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }

            inline void* operator >>=(void* argument) { *this = *this >> argument; return argument; }
            inline const void* operator >>=(const void* argument) { *this = *this >> argument; return argument; }

            inline wchar_t operator >>=(const wchar_t argument) { *this = *this >> argument; return argument; }
            friend inline primitive& operator >>=(wchar_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator >>=(wchar_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(wchar_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator >>=(wchar_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA >>= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA >>= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA >>= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA >>= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA >>= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA >>= ((long) argumentA) >> (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) >> (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA >>= *((int*) argumentB.value); break; case argumentB.long__type: argumentA >>= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) >> (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA >>= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA >>= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA >>= *((wchar_t*) argumentB.value); } return argumentB; }

            // [<<=]
            inline boolean operator <<=(const boolean argument) { *this = *this << argument; return argument; }
            friend inline primitive& operator <<=(boolean& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator <<=(boolean& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(boolean& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(boolean& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char8_t operator <<=(const char8_t argument) { *this = *this << argument; return argument; }
            friend inline primitive& operator <<=(char8_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator <<=(char8_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(char8_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(char8_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char16_t operator <<=(const char16_t argument) { *this = *this << argument; return argument; }
            friend inline primitive& operator <<=(char16_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator <<=(char16_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(char16_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(char16_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }

            inline char32_t operator <<=(const char32_t argument) { *this = *this << argument; return argument; }
            friend inline primitive& operator <<=(char32_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator <<=(char32_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(char32_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(char32_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }

            inline int operator <<=(const int argument) { *this = *this << argument; return argument; }
            friend inline primitive& operator <<=(int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator <<=(int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long operator <<=(const long argument) { *this = *this << argument; return argument; }
            friend inline primitive& operator <<=(long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator <<=(long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }

            inline long long operator <<=(const long long argument) { *this = *this << argument; return argument; }
            friend inline primitive& operator <<=(long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator <<=(long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }

            inline short operator <<=(const short argument) { *this = *this << argument; return argument; }
            friend inline primitive& operator <<=(short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator <<=(short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }

            inline signed char operator <<=(const signed char argument) { *this = *this << argument; return argument; }
            friend inline primitive& operator <<=(signed char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator <<=(signed char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(signed char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(signed char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned char operator <<=(const unsigned char argument) { *this = *this << argument; return argument; }
            friend inline primitive& operator <<=(unsigned char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator <<=(unsigned char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(unsigned char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(unsigned char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned int operator <<=(const unsigned int argument) { *this = *this << argument; return argument; }
            friend inline primitive& operator <<=(unsigned int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator <<=(unsigned int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(unsigned int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(unsigned int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned long operator <<=(const unsigned long argument) { *this = *this << argument; return argument; }
            friend inline primitive& operator <<=(unsigned long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator <<=(unsigned long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(unsigned long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(unsigned long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned long long operator <<=(const unsigned long long argument) { *this = *this << argument; return argument; }
            friend inline primitive& operator <<=(unsigned long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator <<=(unsigned long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(unsigned long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(unsigned long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }

            inline unsigned short operator <<=(const unsigned short argument) { *this = *this << argument; return argument; }
            friend inline primitive& operator <<=(unsigned short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator <<=(unsigned short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(unsigned short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(unsigned short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }

            inline void* operator <<=(void* argument) { *this = *this << argument; return argument; }
            inline const void* operator <<=(const void* argument) { *this = *this << argument; return argument; }

            inline wchar_t operator <<=(const wchar_t argument) { *this = *this << argument; return argument; }
            friend inline primitive& operator <<=(wchar_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline primitive& operator <<=(wchar_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(wchar_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }
            friend inline const primitive& operator <<=(wchar_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: argumentA <<= *((boolean*) argumentB.value); break; case argumentB.char__type: argumentA <<= *((char*) argumentB.value); break; case argumentB.char8_t__type: argumentA <<= *((char8_t*) argumentB.value); break; case argumentB.char16_t__type: argumentA <<= *((char16_t*) argumentB.value); break; case argumentB.char32_t__type: argumentA <<= *((char32_t*) argumentB.value); break; case argumentB.double__type: argumentA <<= ((long) argumentA) << (long) *((double*) argumentB.value); break; case argumentB.float__type: argumentA = ((int) argumentA) << (int) *((float*) argumentB.value); break; case argumentB.int__type: argumentA <<= *((int*) argumentB.value); break; case argumentB.long__type: argumentA <<= *((long*) argumentB.value); break; case argumentB.long_double__type: argumentA = ((long long) argumentA) << (long long) *((long double*) argumentB.value); break; case argumentB.long_long__type: argumentA <<= *((long long*) argumentB.value); break; case argumentB.short__type: argumentA <<= *((short*) argumentB.value); break; case argumentB.void__type: break; case argumentB.wchar_t__type: argumentA <<= *((wchar_t*) argumentB.value); } return argumentB; }

            // [==]
            inline boolean operator ==(const boolean argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == argument; case this -> char__type: return *((char*) this -> value) == argument; case this -> char8_t__type: return *((char8_t*) this -> value) == argument; case this -> char16_t__type: return *((char16_t*) this -> value) == argument; case this -> char32_t__type: return *((char32_t*) this -> value) == argument; case this -> double__type: return *((double*) this -> value) == argument; case this -> float__type: return *((float*) this -> value) == argument; case this -> int__type: return *((int*) this -> value) == argument; case this -> long__type: return *((long*) this -> value) == argument; case this -> long_double__type: return *((long double*) this -> value) == argument; case this -> long_long__type: return *((long long*) this -> value) == argument; case this -> short__type: return *((short*) this -> value) == argument; case this -> void__type: return ((int) *((void**) this -> value)) == argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == argument; } return false; }
            friend inline boolean operator ==(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator ==(const char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == argument; case this -> char__type: return *((char*) this -> value) == argument; case this -> char8_t__type: return *((char8_t*) this -> value) == argument; case this -> char16_t__type: return *((char16_t*) this -> value) == argument; case this -> char32_t__type: return *((char32_t*) this -> value) == (char32_t) argument; case this -> double__type: return *((double*) this -> value) == argument; case this -> float__type: return *((float*) this -> value) == argument; case this -> int__type: return *((int*) this -> value) == argument; case this -> long__type: return *((long*) this -> value) == argument; case this -> long_double__type: return *((long double*) this -> value) == argument; case this -> long_long__type: return *((long long*) this -> value) == argument; case this -> short__type: return *((short*) this -> value) == argument; case this -> void__type: return ((int) *((void**) this -> value)) == argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == (wchar_t) argument; } return false; }
            friend inline boolean operator ==(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) == *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator ==(const char8_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == argument; case this -> char__type: return *((char*) this -> value) == argument; case this -> char8_t__type: return *((char8_t*) this -> value) == argument; case this -> char16_t__type: return *((char16_t*) this -> value) == argument; case this -> char32_t__type: return *((char32_t*) this -> value) == argument; case this -> double__type: return *((double*) this -> value) == argument; case this -> float__type: return *((float*) this -> value) == argument; case this -> int__type: return *((int*) this -> value) == argument; case this -> long__type: return *((long*) this -> value) == argument; case this -> long_double__type: return *((long double*) this -> value) == argument; case this -> long_long__type: return *((long long*) this -> value) == argument; case this -> short__type: return *((short*) this -> value) == argument; case this -> void__type: return ((int) *((void**) this -> value)) == argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == argument; } return false; }
            friend inline boolean operator ==(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator ==(const char16_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == argument; case this -> char__type: return *((char*) this -> value) == argument; case this -> char8_t__type: return *((char8_t*) this -> value) == argument; case this -> char16_t__type: return *((char16_t*) this -> value) == argument; case this -> char32_t__type: return *((char32_t*) this -> value) == (char32_t) argument; case this -> double__type: return *((double*) this -> value) == argument; case this -> float__type: return *((float*) this -> value) == argument; case this -> int__type: return *((int*) this -> value) == argument; case this -> long__type: return *((long*) this -> value) == argument; case this -> long_double__type: return *((long double*) this -> value) == argument; case this -> long_long__type: return *((long long*) this -> value) == argument; case this -> short__type: return *((short*) this -> value) == argument; case this -> void__type: return ((int) *((void**) this -> value)) == argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == (wchar_t) argument; } return false; }
            friend inline boolean operator ==(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) == *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator ==(const char32_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == argument; case this -> char__type: return ((char32_t) *((char*) this -> value)) == argument; case this -> char8_t__type: return *((char8_t*) this -> value) == argument; case this -> char16_t__type: return *((char16_t*) this -> value) == argument; case this -> char32_t__type: return *((char32_t*) this -> value) == argument; case this -> double__type: return *((double*) this -> value) == argument; case this -> float__type: return *((float*) this -> value) == argument; case this -> int__type: return ((char32_t) *((int*) this -> value)) == argument; case this -> long__type: return ((char32_t) *((long*) this -> value)) == argument; case this -> long_double__type: return *((long double*) this -> value) == argument; case this -> long_long__type: return *((long long*) this -> value) == argument; case this -> short__type: return ((char32_t) *((short*) this -> value)) == argument; case this -> void__type: return ((char32_t) (int) *((void**) this -> value)) == argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == (wchar_t) argument; } return false; }
            friend inline boolean operator ==(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA == (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA == (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA == (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA == (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA == (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA == (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA == (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA == (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) == *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator ==(const double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == argument; case this -> char__type: return *((char*) this -> value) == argument; case this -> char8_t__type: return *((char8_t*) this -> value) == argument; case this -> char16_t__type: return *((char16_t*) this -> value) == argument; case this -> char32_t__type: return *((char32_t*) this -> value) == argument; case this -> double__type: return *((double*) this -> value) == argument; case this -> float__type: return *((float*) this -> value) == argument; case this -> int__type: return *((int*) this -> value) == argument; case this -> long__type: return *((long*) this -> value) == argument; case this -> long_double__type: return *((long double*) this -> value) == argument; case this -> long_long__type: return *((long long*) this -> value) == argument; case this -> short__type: return *((short*) this -> value) == argument; case this -> void__type: return ((int) *((void**) this -> value)) == argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == argument; } return false; }
            friend inline boolean operator ==(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator ==(const float argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == argument; case this -> char__type: return *((char*) this -> value) == argument; case this -> char8_t__type: return *((char8_t*) this -> value) == argument; case this -> char16_t__type: return *((char16_t*) this -> value) == argument; case this -> char32_t__type: return *((char32_t*) this -> value) == argument; case this -> double__type: return *((double*) this -> value) == argument; case this -> float__type: return *((float*) this -> value) == argument; case this -> int__type: return *((int*) this -> value) == argument; case this -> long__type: return *((long*) this -> value) == argument; case this -> long_double__type: return *((long double*) this -> value) == argument; case this -> long_long__type: return *((long long*) this -> value) == argument; case this -> short__type: return *((short*) this -> value) == argument; case this -> void__type: return ((int) *((void**) this -> value)) == argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == argument; } return false; }
            friend inline boolean operator ==(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator ==(const int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == argument; case this -> char__type: return *((char*) this -> value) == argument; case this -> char8_t__type: return *((char8_t*) this -> value) == argument; case this -> char16_t__type: return *((char16_t*) this -> value) == argument; case this -> char32_t__type: return *((char32_t*) this -> value) == (char32_t) argument; case this -> double__type: return *((double*) this -> value) == argument; case this -> float__type: return *((float*) this -> value) == argument; case this -> int__type: return *((int*) this -> value) == argument; case this -> long__type: return *((long*) this -> value) == argument; case this -> long_double__type: return *((long double*) this -> value) == argument; case this -> long_long__type: return *((long long*) this -> value) == argument; case this -> short__type: return *((short*) this -> value) == argument; case this -> void__type: return ((int) *((void**) this -> value)) == argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == argument; } return false; }
            friend inline boolean operator ==(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator ==(const long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == argument; case this -> char__type: return *((char*) this -> value) == argument; case this -> char8_t__type: return *((char8_t*) this -> value) == argument; case this -> char16_t__type: return *((char16_t*) this -> value) == argument; case this -> char32_t__type: return *((char32_t*) this -> value) == (char32_t) argument; case this -> double__type: return *((double*) this -> value) == argument; case this -> float__type: return *((float*) this -> value) == argument; case this -> int__type: return *((int*) this -> value) == argument; case this -> long__type: return *((long*) this -> value) == argument; case this -> long_double__type: return *((long double*) this -> value) == argument; case this -> long_long__type: return *((long long*) this -> value) == argument; case this -> short__type: return *((short*) this -> value) == argument; case this -> void__type: return ((int) *((void**) this -> value)) == argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == argument; } return false; }
            friend inline boolean operator ==(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator ==(const long double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == argument; case this -> char__type: return *((char*) this -> value) == argument; case this -> char8_t__type: return *((char8_t*) this -> value) == argument; case this -> char16_t__type: return *((char16_t*) this -> value) == argument; case this -> char32_t__type: return *((char32_t*) this -> value) == argument; case this -> double__type: return *((double*) this -> value) == argument; case this -> float__type: return *((float*) this -> value) == argument; case this -> int__type: return *((int*) this -> value) == argument; case this -> long__type: return *((long*) this -> value) == argument; case this -> long_double__type: return *((long double*) this -> value) == argument; case this -> long_long__type: return *((long long*) this -> value) == argument; case this -> short__type: return *((short*) this -> value) == argument; case this -> void__type: return ((int) *((void**) this -> value)) == argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == argument; } return false; }
            friend inline boolean operator ==(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator ==(const long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == argument; case this -> char__type: return *((char*) this -> value) == argument; case this -> char8_t__type: return *((char8_t*) this -> value) == argument; case this -> char16_t__type: return *((char16_t*) this -> value) == argument; case this -> char32_t__type: return *((char32_t*) this -> value) == argument; case this -> double__type: return *((double*) this -> value) == argument; case this -> float__type: return *((float*) this -> value) == argument; case this -> int__type: return *((int*) this -> value) == argument; case this -> long__type: return *((long*) this -> value) == argument; case this -> long_double__type: return *((long double*) this -> value) == argument; case this -> long_long__type: return *((long long*) this -> value) == argument; case this -> short__type: return *((short*) this -> value) == argument; case this -> void__type: return ((int) *((void**) this -> value)) == argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == argument; } return false; }
            friend inline boolean operator ==(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator ==(const short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == argument; case this -> char__type: return *((char*) this -> value) == argument; case this -> char8_t__type: return *((char8_t*) this -> value) == argument; case this -> char16_t__type: return *((char16_t*) this -> value) == argument; case this -> char32_t__type: return *((char32_t*) this -> value) == (char32_t) argument; case this -> double__type: return *((double*) this -> value) == argument; case this -> float__type: return *((float*) this -> value) == argument; case this -> int__type: return *((int*) this -> value) == argument; case this -> long__type: return *((long*) this -> value) == argument; case this -> long_double__type: return *((long double*) this -> value) == argument; case this -> long_long__type: return *((long long*) this -> value) == argument; case this -> short__type: return *((short*) this -> value) == argument; case this -> void__type: return ((int) *((void**) this -> value)) == argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == argument; } return false; }
            friend inline boolean operator ==(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator ==(const signed char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == argument; case this -> char__type: return *((char*) this -> value) == argument; case this -> char8_t__type: return *((char8_t*) this -> value) == argument; case this -> char16_t__type: return *((char16_t*) this -> value) == argument; case this -> char32_t__type: return *((char32_t*) this -> value) == (char32_t) argument; case this -> double__type: return *((double*) this -> value) == argument; case this -> float__type: return *((float*) this -> value) == argument; case this -> int__type: return *((int*) this -> value) == argument; case this -> long__type: return *((long*) this -> value) == argument; case this -> long_double__type: return *((long double*) this -> value) == argument; case this -> long_long__type: return *((long long*) this -> value) == argument; case this -> short__type: return *((short*) this -> value) == argument; case this -> void__type: return ((int) *((void**) this -> value)) == argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == argument; } return false; }
            friend inline boolean operator ==(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator ==(const unsigned char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == argument; case this -> char__type: return *((char*) this -> value) == argument; case this -> char8_t__type: return *((char8_t*) this -> value) == argument; case this -> char16_t__type: return *((char16_t*) this -> value) == argument; case this -> char32_t__type: return *((char32_t*) this -> value) == argument; case this -> double__type: return *((double*) this -> value) == argument; case this -> float__type: return *((float*) this -> value) == argument; case this -> int__type: return *((int*) this -> value) == argument; case this -> long__type: return *((long*) this -> value) == argument; case this -> long_double__type: return *((long double*) this -> value) == argument; case this -> long_long__type: return *((long long*) this -> value) == argument; case this -> short__type: return *((short*) this -> value) == argument; case this -> void__type: return ((int) *((void**) this -> value)) == argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == argument; } return false; }
            friend inline boolean operator ==(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator ==(const unsigned int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == argument; case this -> char__type: return ((unsigned int) *((char*) this -> value)) == argument; case this -> char8_t__type: return *((char8_t*) this -> value) == argument; case this -> char16_t__type: return *((char16_t*) this -> value) == argument; case this -> char32_t__type: return *((char32_t*) this -> value) == argument; case this -> double__type: return *((double*) this -> value) == argument; case this -> float__type: return *((float*) this -> value) == argument; case this -> int__type: return *((int*) this -> value) == (int) argument; case this -> long__type: return *((long*) this -> value) == (long) argument; case this -> long_double__type: return *((long double*) this -> value) == argument; case this -> long_long__type: return *((long long*) this -> value) == argument; case this -> short__type: return ((unsigned int) *((short*) this -> value)) == argument; case this -> void__type: return ((int) *((void**) this -> value)) == (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == argument; } return false; }
            friend inline boolean operator ==(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) == *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) == *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) == *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) == *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator ==(const unsigned long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == argument; case this -> char__type: return ((unsigned long) *((char*) this -> value)) == argument; case this -> char8_t__type: return *((char8_t*) this -> value) == argument; case this -> char16_t__type: return *((char16_t*) this -> value) == argument; case this -> char32_t__type: return *((char32_t*) this -> value) == argument; case this -> double__type: return *((double*) this -> value) == argument; case this -> float__type: return *((float*) this -> value) == argument; case this -> int__type: return ((unsigned long) *((int*) this -> value)) == argument; case this -> long__type: return *((long*) this -> value) == (long) argument; case this -> long_double__type: return *((long double*) this -> value) == argument; case this -> long_long__type: return *((long long*) this -> value) == argument; case this -> short__type: return ((unsigned long) *((short*) this -> value)) == argument; case this -> void__type: return ((unsigned long) (int) *((void**) this -> value)) == argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == argument; } return false; }
            friend inline boolean operator ==(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA == (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA == (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA == (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA == (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator ==(const unsigned long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == argument; case this -> char__type: return ((unsigned long long) *((char*) this -> value)) == argument; case this -> char8_t__type: return *((char8_t*) this -> value) == argument; case this -> char16_t__type: return *((char16_t*) this -> value) == argument; case this -> char32_t__type: return *((char32_t*) this -> value) == argument; case this -> double__type: return *((double*) this -> value) == argument; case this -> float__type: return *((float*) this -> value) == argument; case this -> int__type: return ((unsigned long long) *((int*) this -> value)) == argument; case this -> long__type: return ((unsigned long long) *((long*) this -> value)) == argument; case this -> long_double__type: return *((long double*) this -> value) == argument; case this -> long_long__type: return *((long long*) this -> value) == (long long) argument; case this -> short__type: return ((unsigned long long) *((short*) this -> value)) == argument; case this -> void__type: return ((unsigned long long) (int) *((void**) this -> value)) == argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == argument; } return false; }
            friend inline boolean operator ==(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA == (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA == (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA == (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA == (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA == (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA == (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA == (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA == (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator ==(const unsigned short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == argument; case this -> char__type: return *((char*) this -> value) == argument; case this -> char8_t__type: return *((char8_t*) this -> value) == argument; case this -> char16_t__type: return *((char16_t*) this -> value) == argument; case this -> char32_t__type: return *((char32_t*) this -> value) == argument; case this -> double__type: return *((double*) this -> value) == argument; case this -> float__type: return *((float*) this -> value) == argument; case this -> int__type: return *((int*) this -> value) == argument; case this -> long__type: return *((long*) this -> value) == argument; case this -> long_double__type: return *((long double*) this -> value) == argument; case this -> long_long__type: return *((long long*) this -> value) == argument; case this -> short__type: return *((short*) this -> value) == argument; case this -> void__type: return ((int) *((void**) this -> value)) == argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == argument; } return false; }
            friend inline boolean operator ==(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator ==(void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == (int) argument; case this -> char__type: return *((char*) this -> value) == (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) == (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) == (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) == (char32_t) (int) argument; case this -> double__type: return *((double*) this -> value) == (int) argument; case this -> float__type: return *((float*) this -> value) == (int) argument; case this -> int__type: return *((int*) this -> value) == (int) argument; case this -> long__type: return *((long*) this -> value) == (int) argument; case this -> long_double__type: return *((long double*) this -> value) == (int) argument; case this -> long_long__type: return *((long long*) this -> value) == (int) argument; case this -> short__type: return *((short*) this -> value) == (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) == (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == (int) argument; } return false; }
            friend inline boolean operator ==(void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) == *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) == *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) == *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) == *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) == *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) == *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) == *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) == *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) == *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) == *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) == *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) == *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) == *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) == *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) == *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) == *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) == *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) == *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) == *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) == *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) == *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) == *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) == *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) == *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) == *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) == *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) == *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) == *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) == *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) == *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) == *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) == *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) == *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) == *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) == *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) == *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) == *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator ==(const void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == (int) argument; case this -> char__type: return *((char*) this -> value) == (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) == (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) == (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) == (char32_t) (int) argument; case this -> double__type: return *((double*) this -> value) == (int) argument; case this -> float__type: return *((float*) this -> value) == (int) argument; case this -> int__type: return *((int*) this -> value) == (int) argument; case this -> long__type: return *((long*) this -> value) == (int) argument; case this -> long_double__type: return *((long double*) this -> value) == (int) argument; case this -> long_long__type: return *((long long*) this -> value) == (int) argument; case this -> short__type: return *((short*) this -> value) == (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) == (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == (int) argument; } return false; }
            friend inline boolean operator ==(const void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) == *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) == *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) == *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) == *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) == *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) == *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) == *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) == *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) == *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) == *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) == *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) == *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) == *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) == *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) == *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) == *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) == *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) == *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) == *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) == *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) == *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) == *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) == *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) == *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) == *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) == *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) == *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) == *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) == *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) == *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) == *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) == *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) == *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) == *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) == *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) == *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) == *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) == *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator ==(const wchar_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) == argument; case this -> char__type: return *((char*) this -> value) == argument; case this -> char8_t__type: return *((char8_t*) this -> value) == argument; case this -> char16_t__type: return *((char16_t*) this -> value) == argument; case this -> char32_t__type: return *((char32_t*) this -> value) == argument; case this -> double__type: return *((double*) this -> value) == argument; case this -> float__type: return *((float*) this -> value) == argument; case this -> int__type: return *((int*) this -> value) == argument; case this -> long__type: return *((long*) this -> value) == argument; case this -> long_double__type: return *((long double*) this -> value) == argument; case this -> long_long__type: return *((long long*) this -> value) == argument; case this -> short__type: return *((short*) this -> value) == argument; case this -> void__type: return ((int) *((void**) this -> value)) == argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) == argument; } return false; }
            friend inline boolean operator ==(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator ==(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA == *((boolean*) argumentB.value); case argumentB.char__type: return argumentA == *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA == *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA == *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA == *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA == *((double*) argumentB.value); case argumentB.float__type: return argumentA == *((float*) argumentB.value); case argumentB.int__type: return argumentA == *((int*) argumentB.value); case argumentB.long__type: return argumentA == *((long*) argumentB.value); case argumentB.long_double__type: return argumentA == *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA == *((long long*) argumentB.value); case argumentB.short__type: return argumentA == *((short*) argumentB.value); case argumentB.void__type: return argumentA == (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA == *((wchar_t*) argumentB.value); } return false; }

            // [!=]
            inline boolean operator !=(const boolean argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != argument; case this -> char__type: return *((char*) this -> value) != argument; case this -> char8_t__type: return *((char8_t*) this -> value) != argument; case this -> char16_t__type: return *((char16_t*) this -> value) != argument; case this -> char32_t__type: return *((char32_t*) this -> value) != argument; case this -> double__type: return *((double*) this -> value) != argument; case this -> float__type: return *((float*) this -> value) != argument; case this -> int__type: return *((int*) this -> value) != argument; case this -> long__type: return *((long*) this -> value) != argument; case this -> long_double__type: return *((long double*) this -> value) != argument; case this -> long_long__type: return *((long long*) this -> value) != argument; case this -> short__type: return *((short*) this -> value) != argument; case this -> void__type: return ((int) *((void**) this -> value)) != argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != argument; } return false; }
            friend inline boolean operator !=(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator !=(const char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != argument; case this -> char__type: return *((char*) this -> value) != argument; case this -> char8_t__type: return *((char8_t*) this -> value) != argument; case this -> char16_t__type: return *((char16_t*) this -> value) != argument; case this -> char32_t__type: return *((char32_t*) this -> value) != (char32_t) argument; case this -> double__type: return *((double*) this -> value) != argument; case this -> float__type: return *((float*) this -> value) != argument; case this -> int__type: return *((int*) this -> value) != argument; case this -> long__type: return *((long*) this -> value) != argument; case this -> long_double__type: return *((long double*) this -> value) != argument; case this -> long_long__type: return *((long long*) this -> value) != argument; case this -> short__type: return *((short*) this -> value) != argument; case this -> void__type: return ((int) *((void**) this -> value)) != argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != (wchar_t) argument; } return false; }
            friend inline boolean operator !=(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) != *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator !=(const char8_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != argument; case this -> char__type: return *((char*) this -> value) != argument; case this -> char8_t__type: return *((char8_t*) this -> value) != argument; case this -> char16_t__type: return *((char16_t*) this -> value) != argument; case this -> char32_t__type: return *((char32_t*) this -> value) != argument; case this -> double__type: return *((double*) this -> value) != argument; case this -> float__type: return *((float*) this -> value) != argument; case this -> int__type: return *((int*) this -> value) != argument; case this -> long__type: return *((long*) this -> value) != argument; case this -> long_double__type: return *((long double*) this -> value) != argument; case this -> long_long__type: return *((long long*) this -> value) != argument; case this -> short__type: return *((short*) this -> value) != argument; case this -> void__type: return ((int) *((void**) this -> value)) != argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != argument; } return false; }
            friend inline boolean operator !=(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator !=(const char16_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != argument; case this -> char__type: return *((char*) this -> value) != argument; case this -> char8_t__type: return *((char8_t*) this -> value) != argument; case this -> char16_t__type: return *((char16_t*) this -> value) != argument; case this -> char32_t__type: return *((char32_t*) this -> value) != (char32_t) argument; case this -> double__type: return *((double*) this -> value) != argument; case this -> float__type: return *((float*) this -> value) != argument; case this -> int__type: return *((int*) this -> value) != argument; case this -> long__type: return *((long*) this -> value) != argument; case this -> long_double__type: return *((long double*) this -> value) != argument; case this -> long_long__type: return *((long long*) this -> value) != argument; case this -> short__type: return *((short*) this -> value) != argument; case this -> void__type: return ((int) *((void**) this -> value)) != argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != (wchar_t) argument; } return false; }
            friend inline boolean operator !=(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) != *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator !=(const char32_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != argument; case this -> char__type: return ((char32_t) *((char*) this -> value)) != argument; case this -> char8_t__type: return *((char8_t*) this -> value) != argument; case this -> char16_t__type: return *((char16_t*) this -> value) != argument; case this -> char32_t__type: return *((char32_t*) this -> value) != argument; case this -> double__type: return *((double*) this -> value) != argument; case this -> float__type: return *((float*) this -> value) != argument; case this -> int__type: return ((char32_t) *((int*) this -> value)) != argument; case this -> long__type: return ((char32_t) *((long*) this -> value)) != argument; case this -> long_double__type: return *((long double*) this -> value) != argument; case this -> long_long__type: return *((long long*) this -> value) != argument; case this -> short__type: return ((char32_t) *((short*) this -> value)) != argument; case this -> void__type: return ((char32_t) (int) *((void**) this -> value)) != argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != (wchar_t) argument; } return false; }
            friend inline boolean operator !=(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA != (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA != (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA != (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA != (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA != (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA != (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA != (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA != (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) != *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator !=(const double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != argument; case this -> char__type: return *((char*) this -> value) != argument; case this -> char8_t__type: return *((char8_t*) this -> value) != argument; case this -> char16_t__type: return *((char16_t*) this -> value) != argument; case this -> char32_t__type: return *((char32_t*) this -> value) != argument; case this -> double__type: return *((double*) this -> value) != argument; case this -> float__type: return *((float*) this -> value) != argument; case this -> int__type: return *((int*) this -> value) != argument; case this -> long__type: return *((long*) this -> value) != argument; case this -> long_double__type: return *((long double*) this -> value) != argument; case this -> long_long__type: return *((long long*) this -> value) != argument; case this -> short__type: return *((short*) this -> value) != argument; case this -> void__type: return ((int) *((void**) this -> value)) != argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != argument; } return false; }
            friend inline boolean operator !=(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator !=(const float argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != argument; case this -> char__type: return *((char*) this -> value) != argument; case this -> char8_t__type: return *((char8_t*) this -> value) != argument; case this -> char16_t__type: return *((char16_t*) this -> value) != argument; case this -> char32_t__type: return *((char32_t*) this -> value) != argument; case this -> double__type: return *((double*) this -> value) != argument; case this -> float__type: return *((float*) this -> value) != argument; case this -> int__type: return *((int*) this -> value) != argument; case this -> long__type: return *((long*) this -> value) != argument; case this -> long_double__type: return *((long double*) this -> value) != argument; case this -> long_long__type: return *((long long*) this -> value) != argument; case this -> short__type: return *((short*) this -> value) != argument; case this -> void__type: return ((int) *((void**) this -> value)) != argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != argument; } return false; }
            friend inline boolean operator !=(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator !=(const int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != argument; case this -> char__type: return *((char*) this -> value) != argument; case this -> char8_t__type: return *((char8_t*) this -> value) != argument; case this -> char16_t__type: return *((char16_t*) this -> value) != argument; case this -> char32_t__type: return *((char32_t*) this -> value) != (char32_t) argument; case this -> double__type: return *((double*) this -> value) != argument; case this -> float__type: return *((float*) this -> value) != argument; case this -> int__type: return *((int*) this -> value) != argument; case this -> long__type: return *((long*) this -> value) != argument; case this -> long_double__type: return *((long double*) this -> value) != argument; case this -> long_long__type: return *((long long*) this -> value) != argument; case this -> short__type: return *((short*) this -> value) != argument; case this -> void__type: return ((int) *((void**) this -> value)) != argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != argument; } return false; }
            friend inline boolean operator !=(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator !=(const long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != argument; case this -> char__type: return *((char*) this -> value) != argument; case this -> char8_t__type: return *((char8_t*) this -> value) != argument; case this -> char16_t__type: return *((char16_t*) this -> value) != argument; case this -> char32_t__type: return *((char32_t*) this -> value) != (char32_t) argument; case this -> double__type: return *((double*) this -> value) != argument; case this -> float__type: return *((float*) this -> value) != argument; case this -> int__type: return *((int*) this -> value) != argument; case this -> long__type: return *((long*) this -> value) != argument; case this -> long_double__type: return *((long double*) this -> value) != argument; case this -> long_long__type: return *((long long*) this -> value) != argument; case this -> short__type: return *((short*) this -> value) != argument; case this -> void__type: return ((int) *((void**) this -> value)) != argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != argument; } return false; }
            friend inline boolean operator !=(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator !=(const long double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != argument; case this -> char__type: return *((char*) this -> value) != argument; case this -> char8_t__type: return *((char8_t*) this -> value) != argument; case this -> char16_t__type: return *((char16_t*) this -> value) != argument; case this -> char32_t__type: return *((char32_t*) this -> value) != argument; case this -> double__type: return *((double*) this -> value) != argument; case this -> float__type: return *((float*) this -> value) != argument; case this -> int__type: return *((int*) this -> value) != argument; case this -> long__type: return *((long*) this -> value) != argument; case this -> long_double__type: return *((long double*) this -> value) != argument; case this -> long_long__type: return *((long long*) this -> value) != argument; case this -> short__type: return *((short*) this -> value) != argument; case this -> void__type: return ((int) *((void**) this -> value)) != argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != argument; } return false; }
            friend inline boolean operator !=(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator !=(const long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != argument; case this -> char__type: return *((char*) this -> value) != argument; case this -> char8_t__type: return *((char8_t*) this -> value) != argument; case this -> char16_t__type: return *((char16_t*) this -> value) != argument; case this -> char32_t__type: return *((char32_t*) this -> value) != argument; case this -> double__type: return *((double*) this -> value) != argument; case this -> float__type: return *((float*) this -> value) != argument; case this -> int__type: return *((int*) this -> value) != argument; case this -> long__type: return *((long*) this -> value) != argument; case this -> long_double__type: return *((long double*) this -> value) != argument; case this -> long_long__type: return *((long long*) this -> value) != argument; case this -> short__type: return *((short*) this -> value) != argument; case this -> void__type: return ((int) *((void**) this -> value)) != argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != argument; } return false; }
            friend inline boolean operator !=(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator !=(const short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != argument; case this -> char__type: return *((char*) this -> value) != argument; case this -> char8_t__type: return *((char8_t*) this -> value) != argument; case this -> char16_t__type: return *((char16_t*) this -> value) != argument; case this -> char32_t__type: return *((char32_t*) this -> value) != (char32_t) argument; case this -> double__type: return *((double*) this -> value) != argument; case this -> float__type: return *((float*) this -> value) != argument; case this -> int__type: return *((int*) this -> value) != argument; case this -> long__type: return *((long*) this -> value) != argument; case this -> long_double__type: return *((long double*) this -> value) != argument; case this -> long_long__type: return *((long long*) this -> value) != argument; case this -> short__type: return *((short*) this -> value) != argument; case this -> void__type: return ((int) *((void**) this -> value)) != argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != argument; } return false; }
            friend inline boolean operator !=(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator !=(const signed char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != argument; case this -> char__type: return *((char*) this -> value) != argument; case this -> char8_t__type: return *((char8_t*) this -> value) != argument; case this -> char16_t__type: return *((char16_t*) this -> value) != argument; case this -> char32_t__type: return *((char32_t*) this -> value) != (char32_t) argument; case this -> double__type: return *((double*) this -> value) != argument; case this -> float__type: return *((float*) this -> value) != argument; case this -> int__type: return *((int*) this -> value) != argument; case this -> long__type: return *((long*) this -> value) != argument; case this -> long_double__type: return *((long double*) this -> value) != argument; case this -> long_long__type: return *((long long*) this -> value) != argument; case this -> short__type: return *((short*) this -> value) != argument; case this -> void__type: return ((int) *((void**) this -> value)) != argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != argument; } return false; }
            friend inline boolean operator !=(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator !=(const unsigned char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != argument; case this -> char__type: return *((char*) this -> value) != argument; case this -> char8_t__type: return *((char8_t*) this -> value) != argument; case this -> char16_t__type: return *((char16_t*) this -> value) != argument; case this -> char32_t__type: return *((char32_t*) this -> value) != argument; case this -> double__type: return *((double*) this -> value) != argument; case this -> float__type: return *((float*) this -> value) != argument; case this -> int__type: return *((int*) this -> value) != argument; case this -> long__type: return *((long*) this -> value) != argument; case this -> long_double__type: return *((long double*) this -> value) != argument; case this -> long_long__type: return *((long long*) this -> value) != argument; case this -> short__type: return *((short*) this -> value) != argument; case this -> void__type: return ((int) *((void**) this -> value)) != argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != argument; } return false; }
            friend inline boolean operator !=(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator !=(const unsigned int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != argument; case this -> char__type: return ((unsigned int) *((char*) this -> value)) != argument; case this -> char8_t__type: return *((char8_t*) this -> value) != argument; case this -> char16_t__type: return *((char16_t*) this -> value) != argument; case this -> char32_t__type: return *((char32_t*) this -> value) != argument; case this -> double__type: return *((double*) this -> value) != argument; case this -> float__type: return *((float*) this -> value) != argument; case this -> int__type: return *((int*) this -> value) != (int) argument; case this -> long__type: return *((long*) this -> value) != (long) argument; case this -> long_double__type: return *((long double*) this -> value) != argument; case this -> long_long__type: return *((long long*) this -> value) != argument; case this -> short__type: return ((unsigned int) *((short*) this -> value)) != argument; case this -> void__type: return ((int) *((void**) this -> value)) != (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != argument; } return false; }
            friend inline boolean operator !=(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) != *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) != *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) != *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) != *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator !=(const unsigned long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != argument; case this -> char__type: return ((unsigned long) *((char*) this -> value)) != argument; case this -> char8_t__type: return *((char8_t*) this -> value) != argument; case this -> char16_t__type: return *((char16_t*) this -> value) != argument; case this -> char32_t__type: return *((char32_t*) this -> value) != argument; case this -> double__type: return *((double*) this -> value) != argument; case this -> float__type: return *((float*) this -> value) != argument; case this -> int__type: return ((unsigned long) *((int*) this -> value)) != argument; case this -> long__type: return *((long*) this -> value) != (long) argument; case this -> long_double__type: return *((long double*) this -> value) != argument; case this -> long_long__type: return *((long long*) this -> value) != argument; case this -> short__type: return ((unsigned long) *((short*) this -> value)) != argument; case this -> void__type: return ((unsigned long) (int) *((void**) this -> value)) != argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != argument; } return false; }
            friend inline boolean operator !=(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA != (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA != (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA != (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA != (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator !=(const unsigned long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != argument; case this -> char__type: return ((unsigned long long) *((char*) this -> value)) != argument; case this -> char8_t__type: return *((char8_t*) this -> value) != argument; case this -> char16_t__type: return *((char16_t*) this -> value) != argument; case this -> char32_t__type: return *((char32_t*) this -> value) != argument; case this -> double__type: return *((double*) this -> value) != argument; case this -> float__type: return *((float*) this -> value) != argument; case this -> int__type: return ((unsigned long long) *((int*) this -> value)) != argument; case this -> long__type: return ((unsigned long long) *((long*) this -> value)) != argument; case this -> long_double__type: return *((long double*) this -> value) != argument; case this -> long_long__type: return *((long long*) this -> value) != (long long) argument; case this -> short__type: return ((unsigned long long) *((short*) this -> value)) != argument; case this -> void__type: return ((unsigned long long) (int) *((void**) this -> value)) != argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != argument; } return false; }
            friend inline boolean operator !=(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA != (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA != (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA != (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA != (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA != (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA != (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA != (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA != (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator !=(const unsigned short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != argument; case this -> char__type: return *((char*) this -> value) != argument; case this -> char8_t__type: return *((char8_t*) this -> value) != argument; case this -> char16_t__type: return *((char16_t*) this -> value) != argument; case this -> char32_t__type: return *((char32_t*) this -> value) != argument; case this -> double__type: return *((double*) this -> value) != argument; case this -> float__type: return *((float*) this -> value) != argument; case this -> int__type: return *((int*) this -> value) != argument; case this -> long__type: return *((long*) this -> value) != argument; case this -> long_double__type: return *((long double*) this -> value) != argument; case this -> long_long__type: return *((long long*) this -> value) != argument; case this -> short__type: return *((short*) this -> value) != argument; case this -> void__type: return ((int) *((void**) this -> value)) != argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != argument; } return false; }
            friend inline boolean operator !=(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator !=(void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != (int) argument; case this -> char__type: return *((char*) this -> value) != (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) != (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) != (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) != (char32_t) (int) argument; case this -> double__type: return *((double*) this -> value) != (int) argument; case this -> float__type: return *((float*) this -> value) != (int) argument; case this -> int__type: return *((int*) this -> value) != (int) argument; case this -> long__type: return *((long*) this -> value) != (int) argument; case this -> long_double__type: return *((long double*) this -> value) != (int) argument; case this -> long_long__type: return *((long long*) this -> value) != (int) argument; case this -> short__type: return *((short*) this -> value) != (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) != (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != (int) argument; } return false; }
            friend inline boolean operator !=(void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) != *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) != *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) != *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) != *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) != *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) != *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) != *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) != *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) != *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) != *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) != *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) != *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) != *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) != *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) != *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) != *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) != *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) != *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) != *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) != *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) != *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) != *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) != *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) != *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) != *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) != *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) != *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) != *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) != *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) != *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) != *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) != *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) != *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) != *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) != *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) != *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) != *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator !=(const void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != (int) argument; case this -> char__type: return *((char*) this -> value) != (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) != (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) != (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) != (char32_t) (int) argument; case this -> double__type: return *((double*) this -> value) != (int) argument; case this -> float__type: return *((float*) this -> value) != (int) argument; case this -> int__type: return *((int*) this -> value) != (int) argument; case this -> long__type: return *((long*) this -> value) != (int) argument; case this -> long_double__type: return *((long double*) this -> value) != (int) argument; case this -> long_long__type: return *((long long*) this -> value) != (int) argument; case this -> short__type: return *((short*) this -> value) != (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) != (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != (int) argument; } return false; }
            friend inline boolean operator !=(const void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) != *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) != *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) != *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) != *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) != *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) != *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) != *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) != *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) != *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) != *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) != *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) != *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) != *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) != *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) != *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) != *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) != *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) != *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) != *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) != *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) != *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) != *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) != *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) != *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) != *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) != *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) != *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) != *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) != *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) != *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) != *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) != *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) != *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) != *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) != *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) != *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) != *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) != *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator !=(const wchar_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) != argument; case this -> char__type: return *((char*) this -> value) != argument; case this -> char8_t__type: return *((char8_t*) this -> value) != argument; case this -> char16_t__type: return *((char16_t*) this -> value) != argument; case this -> char32_t__type: return *((char32_t*) this -> value) != argument; case this -> double__type: return *((double*) this -> value) != argument; case this -> float__type: return *((float*) this -> value) != argument; case this -> int__type: return *((int*) this -> value) != argument; case this -> long__type: return *((long*) this -> value) != argument; case this -> long_double__type: return *((long double*) this -> value) != argument; case this -> long_long__type: return *((long long*) this -> value) != argument; case this -> short__type: return *((short*) this -> value) != argument; case this -> void__type: return ((int) *((void**) this -> value)) != argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) != argument; } return false; }
            friend inline boolean operator !=(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator !=(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA != *((boolean*) argumentB.value); case argumentB.char__type: return argumentA != *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA != *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA != *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA != *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA != *((double*) argumentB.value); case argumentB.float__type: return argumentA != *((float*) argumentB.value); case argumentB.int__type: return argumentA != *((int*) argumentB.value); case argumentB.long__type: return argumentA != *((long*) argumentB.value); case argumentB.long_double__type: return argumentA != *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA != *((long long*) argumentB.value); case argumentB.short__type: return argumentA != *((short*) argumentB.value); case argumentB.void__type: return argumentA != (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA != *((wchar_t*) argumentB.value); } return false; }

            // [<=]
            inline boolean operator <=(const boolean argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= argument; case this -> char__type: return *((char*) this -> value) <= argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= argument; case this -> double__type: return *((double*) this -> value) <= argument; case this -> float__type: return *((float*) this -> value) <= argument; case this -> int__type: return *((int*) this -> value) <= argument; case this -> long__type: return *((long*) this -> value) <= argument; case this -> long_double__type: return *((long double*) this -> value) <= argument; case this -> long_long__type: return *((long long*) this -> value) <= argument; case this -> short__type: return *((short*) this -> value) <= argument; case this -> void__type: return ((int) *((void**) this -> value)) <= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= argument; } return false; }
            friend inline boolean operator <=(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <=(const char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= argument; case this -> char__type: return *((char*) this -> value) <= argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= (char32_t) argument; case this -> double__type: return *((double*) this -> value) <= argument; case this -> float__type: return *((float*) this -> value) <= argument; case this -> int__type: return *((int*) this -> value) <= argument; case this -> long__type: return *((long*) this -> value) <= argument; case this -> long_double__type: return *((long double*) this -> value) <= argument; case this -> long_long__type: return *((long long*) this -> value) <= argument; case this -> short__type: return *((short*) this -> value) <= argument; case this -> void__type: return ((int) *((void**) this -> value)) <= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= (wchar_t) argument; } return false; }
            friend inline boolean operator <=(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) <= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <=(const char8_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= argument; case this -> char__type: return *((char*) this -> value) <= argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= argument; case this -> double__type: return *((double*) this -> value) <= argument; case this -> float__type: return *((float*) this -> value) <= argument; case this -> int__type: return *((int*) this -> value) <= argument; case this -> long__type: return *((long*) this -> value) <= argument; case this -> long_double__type: return *((long double*) this -> value) <= argument; case this -> long_long__type: return *((long long*) this -> value) <= argument; case this -> short__type: return *((short*) this -> value) <= argument; case this -> void__type: return ((int) *((void**) this -> value)) <= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= argument; } return false; }
            friend inline boolean operator <=(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <=(const char16_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= argument; case this -> char__type: return *((char*) this -> value) <= argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= (char32_t) argument; case this -> double__type: return *((double*) this -> value) <= argument; case this -> float__type: return *((float*) this -> value) <= argument; case this -> int__type: return *((int*) this -> value) <= argument; case this -> long__type: return *((long*) this -> value) <= argument; case this -> long_double__type: return *((long double*) this -> value) <= argument; case this -> long_long__type: return *((long long*) this -> value) <= argument; case this -> short__type: return *((short*) this -> value) <= argument; case this -> void__type: return ((int) *((void**) this -> value)) <= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= (wchar_t) argument; } return false; }
            friend inline boolean operator <=(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) <= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <=(const char32_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= argument; case this -> char__type: return ((char32_t) *((char*) this -> value)) <= argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= argument; case this -> double__type: return *((double*) this -> value) <= argument; case this -> float__type: return *((float*) this -> value) <= argument; case this -> int__type: return ((char32_t) *((int*) this -> value)) <= argument; case this -> long__type: return ((char32_t) *((long*) this -> value)) <= argument; case this -> long_double__type: return *((long double*) this -> value) <= argument; case this -> long_long__type: return *((long long*) this -> value) <= argument; case this -> short__type: return ((char32_t) *((short*) this -> value)) <= argument; case this -> void__type: return ((char32_t) (int) *((void**) this -> value)) <= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= (wchar_t) argument; } return false; }
            friend inline boolean operator <=(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA <= (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA <= (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA <= (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA <= (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) <= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <=(const double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= argument; case this -> char__type: return *((char*) this -> value) <= argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= argument; case this -> double__type: return *((double*) this -> value) <= argument; case this -> float__type: return *((float*) this -> value) <= argument; case this -> int__type: return *((int*) this -> value) <= argument; case this -> long__type: return *((long*) this -> value) <= argument; case this -> long_double__type: return *((long double*) this -> value) <= argument; case this -> long_long__type: return *((long long*) this -> value) <= argument; case this -> short__type: return *((short*) this -> value) <= argument; case this -> void__type: return ((int) *((void**) this -> value)) <= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= argument; } return false; }
            friend inline boolean operator <=(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <=(const float argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= argument; case this -> char__type: return *((char*) this -> value) <= argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= argument; case this -> double__type: return *((double*) this -> value) <= argument; case this -> float__type: return *((float*) this -> value) <= argument; case this -> int__type: return *((int*) this -> value) <= argument; case this -> long__type: return *((long*) this -> value) <= argument; case this -> long_double__type: return *((long double*) this -> value) <= argument; case this -> long_long__type: return *((long long*) this -> value) <= argument; case this -> short__type: return *((short*) this -> value) <= argument; case this -> void__type: return ((int) *((void**) this -> value)) <= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= argument; } return false; }
            friend inline boolean operator <=(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <=(const int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= argument; case this -> char__type: return *((char*) this -> value) <= argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= (char32_t) argument; case this -> double__type: return *((double*) this -> value) <= argument; case this -> float__type: return *((float*) this -> value) <= argument; case this -> int__type: return *((int*) this -> value) <= argument; case this -> long__type: return *((long*) this -> value) <= argument; case this -> long_double__type: return *((long double*) this -> value) <= argument; case this -> long_long__type: return *((long long*) this -> value) <= argument; case this -> short__type: return *((short*) this -> value) <= argument; case this -> void__type: return ((int) *((void**) this -> value)) <= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= argument; } return false; }
            friend inline boolean operator <=(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <=(const long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= argument; case this -> char__type: return *((char*) this -> value) <= argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= (char32_t) argument; case this -> double__type: return *((double*) this -> value) <= argument; case this -> float__type: return *((float*) this -> value) <= argument; case this -> int__type: return *((int*) this -> value) <= argument; case this -> long__type: return *((long*) this -> value) <= argument; case this -> long_double__type: return *((long double*) this -> value) <= argument; case this -> long_long__type: return *((long long*) this -> value) <= argument; case this -> short__type: return *((short*) this -> value) <= argument; case this -> void__type: return ((int) *((void**) this -> value)) <= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= argument; } return false; }
            friend inline boolean operator <=(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <=(const long double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= argument; case this -> char__type: return *((char*) this -> value) <= argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= argument; case this -> double__type: return *((double*) this -> value) <= argument; case this -> float__type: return *((float*) this -> value) <= argument; case this -> int__type: return *((int*) this -> value) <= argument; case this -> long__type: return *((long*) this -> value) <= argument; case this -> long_double__type: return *((long double*) this -> value) <= argument; case this -> long_long__type: return *((long long*) this -> value) <= argument; case this -> short__type: return *((short*) this -> value) <= argument; case this -> void__type: return ((int) *((void**) this -> value)) <= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= argument; } return false; }
            friend inline boolean operator <=(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <=(const long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= argument; case this -> char__type: return *((char*) this -> value) <= argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= argument; case this -> double__type: return *((double*) this -> value) <= argument; case this -> float__type: return *((float*) this -> value) <= argument; case this -> int__type: return *((int*) this -> value) <= argument; case this -> long__type: return *((long*) this -> value) <= argument; case this -> long_double__type: return *((long double*) this -> value) <= argument; case this -> long_long__type: return *((long long*) this -> value) <= argument; case this -> short__type: return *((short*) this -> value) <= argument; case this -> void__type: return ((int) *((void**) this -> value)) <= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= argument; } return false; }
            friend inline boolean operator <=(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <=(const short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= argument; case this -> char__type: return *((char*) this -> value) <= argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= (char32_t) argument; case this -> double__type: return *((double*) this -> value) <= argument; case this -> float__type: return *((float*) this -> value) <= argument; case this -> int__type: return *((int*) this -> value) <= argument; case this -> long__type: return *((long*) this -> value) <= argument; case this -> long_double__type: return *((long double*) this -> value) <= argument; case this -> long_long__type: return *((long long*) this -> value) <= argument; case this -> short__type: return *((short*) this -> value) <= argument; case this -> void__type: return ((int) *((void**) this -> value)) <= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= argument; } return false; }
            friend inline boolean operator <=(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <=(const signed char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= argument; case this -> char__type: return *((char*) this -> value) <= argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= (char32_t) argument; case this -> double__type: return *((double*) this -> value) <= argument; case this -> float__type: return *((float*) this -> value) <= argument; case this -> int__type: return *((int*) this -> value) <= argument; case this -> long__type: return *((long*) this -> value) <= argument; case this -> long_double__type: return *((long double*) this -> value) <= argument; case this -> long_long__type: return *((long long*) this -> value) <= argument; case this -> short__type: return *((short*) this -> value) <= argument; case this -> void__type: return ((int) *((void**) this -> value)) <= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= argument; } return false; }
            friend inline boolean operator <=(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <=(const unsigned char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= argument; case this -> char__type: return *((char*) this -> value) <= argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= argument; case this -> double__type: return *((double*) this -> value) <= argument; case this -> float__type: return *((float*) this -> value) <= argument; case this -> int__type: return *((int*) this -> value) <= argument; case this -> long__type: return *((long*) this -> value) <= argument; case this -> long_double__type: return *((long double*) this -> value) <= argument; case this -> long_long__type: return *((long long*) this -> value) <= argument; case this -> short__type: return *((short*) this -> value) <= argument; case this -> void__type: return ((int) *((void**) this -> value)) <= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= argument; } return false; }
            friend inline boolean operator <=(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <=(const unsigned int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= argument; case this -> char__type: return ((unsigned int) *((char*) this -> value)) <= argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= argument; case this -> double__type: return *((double*) this -> value) <= argument; case this -> float__type: return *((float*) this -> value) <= argument; case this -> int__type: return *((int*) this -> value) <= (int) argument; case this -> long__type: return *((long*) this -> value) <= (long) argument; case this -> long_double__type: return *((long double*) this -> value) <= argument; case this -> long_long__type: return *((long long*) this -> value) <= argument; case this -> short__type: return ((unsigned int) *((short*) this -> value)) <= argument; case this -> void__type: return ((int) *((void**) this -> value)) <= (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= argument; } return false; }
            friend inline boolean operator <=(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) <= *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) <= *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) <= *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) <= *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <=(const unsigned long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= argument; case this -> char__type: return ((unsigned long) *((char*) this -> value)) <= argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= argument; case this -> double__type: return *((double*) this -> value) <= argument; case this -> float__type: return *((float*) this -> value) <= argument; case this -> int__type: return ((unsigned long) *((int*) this -> value)) <= argument; case this -> long__type: return *((long*) this -> value) <= (long) argument; case this -> long_double__type: return *((long double*) this -> value) <= argument; case this -> long_long__type: return *((long long*) this -> value) <= argument; case this -> short__type: return ((unsigned long) *((short*) this -> value)) <= argument; case this -> void__type: return ((unsigned long) (int) *((void**) this -> value)) <= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= argument; } return false; }
            friend inline boolean operator <=(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <=(const unsigned long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= argument; case this -> char__type: return ((unsigned long long) *((char*) this -> value)) <= argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= argument; case this -> double__type: return *((double*) this -> value) <= argument; case this -> float__type: return *((float*) this -> value) <= argument; case this -> int__type: return ((unsigned long long) *((int*) this -> value)) <= argument; case this -> long__type: return ((unsigned long long) *((long*) this -> value)) <= argument; case this -> long_double__type: return *((long double*) this -> value) <= argument; case this -> long_long__type: return *((long long*) this -> value) <= (long long) argument; case this -> short__type: return ((unsigned long long) *((short*) this -> value)) <= argument; case this -> void__type: return ((unsigned long long) (int) *((void**) this -> value)) <= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= argument; } return false; }
            friend inline boolean operator <=(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA <= (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA <= (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA <= (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA <= (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <=(const unsigned short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= argument; case this -> char__type: return *((char*) this -> value) <= argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= argument; case this -> double__type: return *((double*) this -> value) <= argument; case this -> float__type: return *((float*) this -> value) <= argument; case this -> int__type: return *((int*) this -> value) <= argument; case this -> long__type: return *((long*) this -> value) <= argument; case this -> long_double__type: return *((long double*) this -> value) <= argument; case this -> long_long__type: return *((long long*) this -> value) <= argument; case this -> short__type: return *((short*) this -> value) <= argument; case this -> void__type: return ((int) *((void**) this -> value)) <= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= argument; } return false; }
            friend inline boolean operator <=(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <=(void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= (int) argument; case this -> char__type: return *((char*) this -> value) <= (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= (char32_t) (int) argument; case this -> double__type: return *((double*) this -> value) <= (int) argument; case this -> float__type: return *((float*) this -> value) <= (int) argument; case this -> int__type: return *((int*) this -> value) <= (int) argument; case this -> long__type: return *((long*) this -> value) <= (int) argument; case this -> long_double__type: return *((long double*) this -> value) <= (int) argument; case this -> long_long__type: return *((long long*) this -> value) <= (int) argument; case this -> short__type: return *((short*) this -> value) <= (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) <= (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= (int) argument; } return false; }
            friend inline boolean operator <=(void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) <= *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) <= *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) <= *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) <= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) <= *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) <= *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) <= *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) <= *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) <= *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) <= *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) <= *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) <= *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) <= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) <= *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) <= *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) <= *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) <= *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) <= *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) <= *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) <= *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) <= *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) <= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) <= *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) <= *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) <= *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) <= *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) <= *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) <= *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) <= *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) <= *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) <= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) <= *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) <= *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) <= *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) <= *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) <= *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) <= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <=(const void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= (int) argument; case this -> char__type: return *((char*) this -> value) <= (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= (char32_t) (int) argument; case this -> double__type: return *((double*) this -> value) <= (int) argument; case this -> float__type: return *((float*) this -> value) <= (int) argument; case this -> int__type: return *((int*) this -> value) <= (int) argument; case this -> long__type: return *((long*) this -> value) <= (int) argument; case this -> long_double__type: return *((long double*) this -> value) <= (int) argument; case this -> long_long__type: return *((long long*) this -> value) <= (int) argument; case this -> short__type: return *((short*) this -> value) <= (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) <= (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= (int) argument; } return false; }
            friend inline boolean operator <=(const void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) <= *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) <= *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) <= *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) <= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) <= *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) <= *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) <= *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) <= *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) <= *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) <= *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) <= *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) <= *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) <= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) <= *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) <= *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) <= *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) <= *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) <= *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) <= *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) <= *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) <= *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) <= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) <= *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) <= *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) <= *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) <= *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) <= *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) <= *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) <= *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) <= *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) <= *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) <= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) <= *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) <= *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) <= *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) <= *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) <= *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) <= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator <=(const wchar_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) <= argument; case this -> char__type: return *((char*) this -> value) <= argument; case this -> char8_t__type: return *((char8_t*) this -> value) <= argument; case this -> char16_t__type: return *((char16_t*) this -> value) <= argument; case this -> char32_t__type: return *((char32_t*) this -> value) <= argument; case this -> double__type: return *((double*) this -> value) <= argument; case this -> float__type: return *((float*) this -> value) <= argument; case this -> int__type: return *((int*) this -> value) <= argument; case this -> long__type: return *((long*) this -> value) <= argument; case this -> long_double__type: return *((long double*) this -> value) <= argument; case this -> long_long__type: return *((long long*) this -> value) <= argument; case this -> short__type: return *((short*) this -> value) <= argument; case this -> void__type: return ((int) *((void**) this -> value)) <= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) <= argument; } return false; }
            friend inline boolean operator <=(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator <=(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA <= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA <= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA <= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA <= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA <= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA <= *((double*) argumentB.value); case argumentB.float__type: return argumentA <= *((float*) argumentB.value); case argumentB.int__type: return argumentA <= *((int*) argumentB.value); case argumentB.long__type: return argumentA <= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA <= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA <= *((long long*) argumentB.value); case argumentB.short__type: return argumentA <= *((short*) argumentB.value); case argumentB.void__type: return argumentA <= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA <= *((wchar_t*) argumentB.value); } return false; }

            // [>=]
            inline boolean operator >=(const boolean argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= argument; case this -> char__type: return *((char*) this -> value) >= argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= argument; case this -> double__type: return *((double*) this -> value) >= argument; case this -> float__type: return *((float*) this -> value) >= argument; case this -> int__type: return *((int*) this -> value) >= argument; case this -> long__type: return *((long*) this -> value) >= argument; case this -> long_double__type: return *((long double*) this -> value) >= argument; case this -> long_long__type: return *((long long*) this -> value) >= argument; case this -> short__type: return *((short*) this -> value) >= argument; case this -> void__type: return ((int) *((void**) this -> value)) >= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= argument; } return false; }
            friend inline boolean operator >=(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >=(const char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= argument; case this -> char__type: return *((char*) this -> value) >= argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= (char32_t) argument; case this -> double__type: return *((double*) this -> value) >= argument; case this -> float__type: return *((float*) this -> value) >= argument; case this -> int__type: return *((int*) this -> value) >= argument; case this -> long__type: return *((long*) this -> value) >= argument; case this -> long_double__type: return *((long double*) this -> value) >= argument; case this -> long_long__type: return *((long long*) this -> value) >= argument; case this -> short__type: return *((short*) this -> value) >= argument; case this -> void__type: return ((int) *((void**) this -> value)) >= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= (wchar_t) argument; } return false; }
            friend inline boolean operator >=(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) >= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >=(const char8_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= argument; case this -> char__type: return *((char*) this -> value) >= argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= argument; case this -> double__type: return *((double*) this -> value) >= argument; case this -> float__type: return *((float*) this -> value) >= argument; case this -> int__type: return *((int*) this -> value) >= argument; case this -> long__type: return *((long*) this -> value) >= argument; case this -> long_double__type: return *((long double*) this -> value) >= argument; case this -> long_long__type: return *((long long*) this -> value) >= argument; case this -> short__type: return *((short*) this -> value) >= argument; case this -> void__type: return ((int) *((void**) this -> value)) >= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= argument; } return false; }
            friend inline boolean operator >=(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >=(const char16_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= argument; case this -> char__type: return *((char*) this -> value) >= argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= (char32_t) argument; case this -> double__type: return *((double*) this -> value) >= argument; case this -> float__type: return *((float*) this -> value) >= argument; case this -> int__type: return *((int*) this -> value) >= argument; case this -> long__type: return *((long*) this -> value) >= argument; case this -> long_double__type: return *((long double*) this -> value) >= argument; case this -> long_long__type: return *((long long*) this -> value) >= argument; case this -> short__type: return *((short*) this -> value) >= argument; case this -> void__type: return ((int) *((void**) this -> value)) >= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= (wchar_t) argument; } return false; }
            friend inline boolean operator >=(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) >= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >=(const char32_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= argument; case this -> char__type: return ((char32_t) *((char*) this -> value)) >= argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= argument; case this -> double__type: return *((double*) this -> value) >= argument; case this -> float__type: return *((float*) this -> value) >= argument; case this -> int__type: return ((char32_t) *((int*) this -> value)) >= argument; case this -> long__type: return ((char32_t) *((long*) this -> value)) >= argument; case this -> long_double__type: return *((long double*) this -> value) >= argument; case this -> long_long__type: return *((long long*) this -> value) >= argument; case this -> short__type: return ((char32_t) *((short*) this -> value)) >= argument; case this -> void__type: return ((char32_t) (int) *((void**) this -> value)) >= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= (wchar_t) argument; } return false; }
            friend inline boolean operator >=(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA >= (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA >= (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA >= (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= (char32_t) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= (char32_t) *((int*) argumentB.value); case argumentB.long__type: return argumentA >= (char32_t) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= (char32_t) *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (char32_t) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((wchar_t) argumentA) >= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >=(const double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= argument; case this -> char__type: return *((char*) this -> value) >= argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= argument; case this -> double__type: return *((double*) this -> value) >= argument; case this -> float__type: return *((float*) this -> value) >= argument; case this -> int__type: return *((int*) this -> value) >= argument; case this -> long__type: return *((long*) this -> value) >= argument; case this -> long_double__type: return *((long double*) this -> value) >= argument; case this -> long_long__type: return *((long long*) this -> value) >= argument; case this -> short__type: return *((short*) this -> value) >= argument; case this -> void__type: return ((int) *((void**) this -> value)) >= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= argument; } return false; }
            friend inline boolean operator >=(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >=(const float argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= argument; case this -> char__type: return *((char*) this -> value) >= argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= argument; case this -> double__type: return *((double*) this -> value) >= argument; case this -> float__type: return *((float*) this -> value) >= argument; case this -> int__type: return *((int*) this -> value) >= argument; case this -> long__type: return *((long*) this -> value) >= argument; case this -> long_double__type: return *((long double*) this -> value) >= argument; case this -> long_long__type: return *((long long*) this -> value) >= argument; case this -> short__type: return *((short*) this -> value) >= argument; case this -> void__type: return ((int) *((void**) this -> value)) >= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= argument; } return false; }
            friend inline boolean operator >=(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >=(const int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= argument; case this -> char__type: return *((char*) this -> value) >= argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= (char32_t) argument; case this -> double__type: return *((double*) this -> value) >= argument; case this -> float__type: return *((float*) this -> value) >= argument; case this -> int__type: return *((int*) this -> value) >= argument; case this -> long__type: return *((long*) this -> value) >= argument; case this -> long_double__type: return *((long double*) this -> value) >= argument; case this -> long_long__type: return *((long long*) this -> value) >= argument; case this -> short__type: return *((short*) this -> value) >= argument; case this -> void__type: return ((int) *((void**) this -> value)) >= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= argument; } return false; }
            friend inline boolean operator >=(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >=(const long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= argument; case this -> char__type: return *((char*) this -> value) >= argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= (char32_t) argument; case this -> double__type: return *((double*) this -> value) >= argument; case this -> float__type: return *((float*) this -> value) >= argument; case this -> int__type: return *((int*) this -> value) >= argument; case this -> long__type: return *((long*) this -> value) >= argument; case this -> long_double__type: return *((long double*) this -> value) >= argument; case this -> long_long__type: return *((long long*) this -> value) >= argument; case this -> short__type: return *((short*) this -> value) >= argument; case this -> void__type: return ((int) *((void**) this -> value)) >= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= argument; } return false; }
            friend inline boolean operator >=(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >=(const long double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= argument; case this -> char__type: return *((char*) this -> value) >= argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= argument; case this -> double__type: return *((double*) this -> value) >= argument; case this -> float__type: return *((float*) this -> value) >= argument; case this -> int__type: return *((int*) this -> value) >= argument; case this -> long__type: return *((long*) this -> value) >= argument; case this -> long_double__type: return *((long double*) this -> value) >= argument; case this -> long_long__type: return *((long long*) this -> value) >= argument; case this -> short__type: return *((short*) this -> value) >= argument; case this -> void__type: return ((int) *((void**) this -> value)) >= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= argument; } return false; }
            friend inline boolean operator >=(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >=(const long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= argument; case this -> char__type: return *((char*) this -> value) >= argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= argument; case this -> double__type: return *((double*) this -> value) >= argument; case this -> float__type: return *((float*) this -> value) >= argument; case this -> int__type: return *((int*) this -> value) >= argument; case this -> long__type: return *((long*) this -> value) >= argument; case this -> long_double__type: return *((long double*) this -> value) >= argument; case this -> long_long__type: return *((long long*) this -> value) >= argument; case this -> short__type: return *((short*) this -> value) >= argument; case this -> void__type: return ((int) *((void**) this -> value)) >= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= argument; } return false; }
            friend inline boolean operator >=(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >=(const short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= argument; case this -> char__type: return *((char*) this -> value) >= argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= (char32_t) argument; case this -> double__type: return *((double*) this -> value) >= argument; case this -> float__type: return *((float*) this -> value) >= argument; case this -> int__type: return *((int*) this -> value) >= argument; case this -> long__type: return *((long*) this -> value) >= argument; case this -> long_double__type: return *((long double*) this -> value) >= argument; case this -> long_long__type: return *((long long*) this -> value) >= argument; case this -> short__type: return *((short*) this -> value) >= argument; case this -> void__type: return ((int) *((void**) this -> value)) >= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= argument; } return false; }
            friend inline boolean operator >=(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >=(const signed char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= argument; case this -> char__type: return *((char*) this -> value) >= argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= (char32_t) argument; case this -> double__type: return *((double*) this -> value) >= argument; case this -> float__type: return *((float*) this -> value) >= argument; case this -> int__type: return *((int*) this -> value) >= argument; case this -> long__type: return *((long*) this -> value) >= argument; case this -> long_double__type: return *((long double*) this -> value) >= argument; case this -> long_long__type: return *((long long*) this -> value) >= argument; case this -> short__type: return *((short*) this -> value) >= argument; case this -> void__type: return ((int) *((void**) this -> value)) >= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= argument; } return false; }
            friend inline boolean operator >=(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >=(const unsigned char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= argument; case this -> char__type: return *((char*) this -> value) >= argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= argument; case this -> double__type: return *((double*) this -> value) >= argument; case this -> float__type: return *((float*) this -> value) >= argument; case this -> int__type: return *((int*) this -> value) >= argument; case this -> long__type: return *((long*) this -> value) >= argument; case this -> long_double__type: return *((long double*) this -> value) >= argument; case this -> long_long__type: return *((long long*) this -> value) >= argument; case this -> short__type: return *((short*) this -> value) >= argument; case this -> void__type: return ((int) *((void**) this -> value)) >= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= argument; } return false; }
            friend inline boolean operator >=(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >=(const unsigned int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= argument; case this -> char__type: return ((unsigned int) *((char*) this -> value)) >= argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= argument; case this -> double__type: return *((double*) this -> value) >= argument; case this -> float__type: return *((float*) this -> value) >= argument; case this -> int__type: return *((int*) this -> value) >= (int) argument; case this -> long__type: return *((long*) this -> value) >= (long) argument; case this -> long_double__type: return *((long double*) this -> value) >= argument; case this -> long_long__type: return *((long long*) this -> value) >= argument; case this -> short__type: return ((unsigned int) *((short*) this -> value)) >= argument; case this -> void__type: return ((int) *((void**) this -> value)) >= (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= argument; } return false; }
            friend inline boolean operator >=(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) >= *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) >= *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) >= *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= (unsigned int) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) >= *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= (unsigned int) *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >=(const unsigned long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= argument; case this -> char__type: return ((unsigned long) *((char*) this -> value)) >= argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= argument; case this -> double__type: return *((double*) this -> value) >= argument; case this -> float__type: return *((float*) this -> value) >= argument; case this -> int__type: return ((unsigned long) *((int*) this -> value)) >= argument; case this -> long__type: return *((long*) this -> value) >= (long) argument; case this -> long_double__type: return *((long double*) this -> value) >= argument; case this -> long_long__type: return *((long long*) this -> value) >= argument; case this -> short__type: return ((unsigned long) *((short*) this -> value)) >= argument; case this -> void__type: return ((unsigned long) (int) *((void**) this -> value)) >= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= argument; } return false; }
            friend inline boolean operator >=(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= (unsigned long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= (unsigned long) *((int*) argumentB.value); case argumentB.long__type: return ((long) argumentA) >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= (unsigned long) *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (unsigned long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >=(const unsigned long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= argument; case this -> char__type: return ((unsigned long long) *((char*) this -> value)) >= argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= argument; case this -> double__type: return *((double*) this -> value) >= argument; case this -> float__type: return *((float*) this -> value) >= argument; case this -> int__type: return ((unsigned long long) *((int*) this -> value)) >= argument; case this -> long__type: return ((unsigned long long) *((long*) this -> value)) >= argument; case this -> long_double__type: return *((long double*) this -> value) >= argument; case this -> long_long__type: return *((long long*) this -> value) >= (long long) argument; case this -> short__type: return ((unsigned long long) *((short*) this -> value)) >= argument; case this -> void__type: return ((unsigned long long) (int) *((void**) this -> value)) >= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= argument; } return false; }
            friend inline boolean operator >=(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA >= (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA >= (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA >= (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= (unsigned long long) *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= (unsigned long long) *((int*) argumentB.value); case argumentB.long__type: return argumentA >= (unsigned long long) *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return ((long long) argumentA) >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= (unsigned long long) *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (unsigned long long) (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >=(const unsigned short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= argument; case this -> char__type: return *((char*) this -> value) >= argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= argument; case this -> double__type: return *((double*) this -> value) >= argument; case this -> float__type: return *((float*) this -> value) >= argument; case this -> int__type: return *((int*) this -> value) >= argument; case this -> long__type: return *((long*) this -> value) >= argument; case this -> long_double__type: return *((long double*) this -> value) >= argument; case this -> long_long__type: return *((long long*) this -> value) >= argument; case this -> short__type: return *((short*) this -> value) >= argument; case this -> void__type: return ((int) *((void**) this -> value)) >= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= argument; } return false; }
            friend inline boolean operator >=(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >=(void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= (int) argument; case this -> char__type: return *((char*) this -> value) >= (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= (char32_t) (int) argument; case this -> double__type: return *((double*) this -> value) >= (int) argument; case this -> float__type: return *((float*) this -> value) >= (int) argument; case this -> int__type: return *((int*) this -> value) >= (int) argument; case this -> long__type: return *((long*) this -> value) >= (int) argument; case this -> long_double__type: return *((long double*) this -> value) >= (int) argument; case this -> long_long__type: return *((long long*) this -> value) >= (int) argument; case this -> short__type: return *((short*) this -> value) >= (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) >= (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= (int) argument; } return false; }
            friend inline boolean operator >=(void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) >= *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) >= *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) >= *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) >= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) >= *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) >= *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) >= *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) >= *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) >= *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) >= *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) >= *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) >= *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) >= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) >= *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) >= *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) >= *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) >= *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) >= *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) >= *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) >= *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) >= *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) >= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) >= *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) >= *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) >= *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) >= *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) >= *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) >= *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) >= *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) >= *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) >= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) >= *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) >= *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) >= *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) >= *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) >= *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) >= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >=(const void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= (int) argument; case this -> char__type: return *((char*) this -> value) >= (int) argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= (int) argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= (int) argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= (char32_t) (int) argument; case this -> double__type: return *((double*) this -> value) >= (int) argument; case this -> float__type: return *((float*) this -> value) >= (int) argument; case this -> int__type: return *((int*) this -> value) >= (int) argument; case this -> long__type: return *((long*) this -> value) >= (int) argument; case this -> long_double__type: return *((long double*) this -> value) >= (int) argument; case this -> long_long__type: return *((long long*) this -> value) >= (int) argument; case this -> short__type: return *((short*) this -> value) >= (int) argument; case this -> void__type: return ((int) *((void**) this -> value)) >= (int) argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= (int) argument; } return false; }
            friend inline boolean operator >=(const void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) >= *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) >= *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) >= *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) >= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) >= *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) >= *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) >= *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) >= *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) >= *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) >= *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) >= *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) >= *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) >= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) >= *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) >= *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) >= *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) >= *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) >= *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) >= *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) >= *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) >= *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) >= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) >= *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) >= *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) >= *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) >= *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) >= *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return ((int) argumentA) >= *((boolean*) argumentB.value); case argumentB.char__type: return ((int) argumentA) >= *((char*) argumentB.value); case argumentB.char8_t__type: return ((int) argumentA) >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return ((int) argumentA) >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return ((char32_t) (int) argumentA) >= *((char32_t*) argumentB.value); case argumentB.double__type: return ((int) argumentA) >= *((double*) argumentB.value); case argumentB.float__type: return ((int) argumentA) >= *((float*) argumentB.value); case argumentB.int__type: return ((int) argumentA) >= *((int*) argumentB.value); case argumentB.long__type: return ((int) argumentA) >= *((long*) argumentB.value); case argumentB.long_double__type: return ((int) argumentA) >= *((long double*) argumentB.value); case argumentB.long_long__type: return ((int) argumentA) >= *((long long*) argumentB.value); case argumentB.short__type: return ((int) argumentA) >= *((short*) argumentB.value); case argumentB.void__type: return ((int) argumentA) >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return ((int) argumentA) >= *((wchar_t*) argumentB.value); } return false; }

            inline boolean operator >=(const wchar_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) >= argument; case this -> char__type: return *((char*) this -> value) >= argument; case this -> char8_t__type: return *((char8_t*) this -> value) >= argument; case this -> char16_t__type: return *((char16_t*) this -> value) >= argument; case this -> char32_t__type: return *((char32_t*) this -> value) >= argument; case this -> double__type: return *((double*) this -> value) >= argument; case this -> float__type: return *((float*) this -> value) >= argument; case this -> int__type: return *((int*) this -> value) >= argument; case this -> long__type: return *((long*) this -> value) >= argument; case this -> long_double__type: return *((long double*) this -> value) >= argument; case this -> long_long__type: return *((long long*) this -> value) >= argument; case this -> short__type: return *((short*) this -> value) >= argument; case this -> void__type: return ((int) *((void**) this -> value)) >= argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) >= argument; } return false; }
            friend inline boolean operator >=(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }
            friend inline boolean operator >=(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return argumentA >= *((boolean*) argumentB.value); case argumentB.char__type: return argumentA >= *((char*) argumentB.value); case argumentB.char8_t__type: return argumentA >= *((char8_t*) argumentB.value); case argumentB.char16_t__type: return argumentA >= *((char16_t*) argumentB.value); case argumentB.char32_t__type: return argumentA >= *((char32_t*) argumentB.value); case argumentB.double__type: return argumentA >= *((double*) argumentB.value); case argumentB.float__type: return argumentA >= *((float*) argumentB.value); case argumentB.int__type: return argumentA >= *((int*) argumentB.value); case argumentB.long__type: return argumentA >= *((long*) argumentB.value); case argumentB.long_double__type: return argumentA >= *((long double*) argumentB.value); case argumentB.long_long__type: return argumentA >= *((long long*) argumentB.value); case argumentB.short__type: return argumentA >= *((short*) argumentB.value); case argumentB.void__type: return argumentA >= (int) *((void**) argumentB.value); case argumentB.wchar_t__type: return argumentA >= *((wchar_t*) argumentB.value); } return false; }

            // [&&]
            inline boolean operator &&(const boolean argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            inline boolean operator &&(const char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            inline boolean operator &&(const char8_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            inline boolean operator &&(const char16_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            inline boolean operator &&(const char32_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            inline boolean operator &&(const double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            inline boolean operator &&(const float argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            inline boolean operator &&(const int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            inline boolean operator &&(const long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            inline boolean operator &&(const long double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            inline boolean operator &&(const long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            inline boolean operator &&(const short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            inline boolean operator &&(const signed char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            inline boolean operator &&(const unsigned char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            inline boolean operator &&(const unsigned int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            inline boolean operator &&(const unsigned long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            inline boolean operator &&(const unsigned long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            inline boolean operator &&(const unsigned short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            inline boolean operator &&(void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            inline boolean operator &&(const void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(const void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            inline boolean operator &&(const wchar_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) && argument; case this -> char__type: return *((char*) this -> value) && argument; case this -> char8_t__type: return *((char8_t*) this -> value) && argument; case this -> char16_t__type: return *((char16_t*) this -> value) && argument; case this -> char32_t__type: return *((char32_t*) this -> value) && argument; case this -> double__type: return *((double*) this -> value) && argument; case this -> float__type: return *((float*) this -> value) && argument; case this -> int__type: return *((int*) this -> value) && argument; case this -> long__type: return *((long*) this -> value) && argument; case this -> long_double__type: return *((long double*) this -> value) && argument; case this -> long_long__type: return *((long long*) this -> value) && argument; case this -> short__type: return *((short*) this -> value) && argument; case this -> void__type: return *((void**) this -> value) && argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) && argument; } return false; }
            friend inline boolean operator &&(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }
            friend inline boolean operator &&(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) && argumentA; case argumentB.char__type: return *((char*) argumentB.value) && argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) && argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) && argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) && argumentA; case argumentB.double__type: return *((double*) argumentB.value) && argumentA; case argumentB.float__type: return *((float*) argumentB.value) && argumentA; case argumentB.int__type: return *((int*) argumentB.value) && argumentA; case argumentB.long__type: return *((long*) argumentB.value) && argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) && argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) && argumentA; case argumentB.short__type: return *((short*) argumentB.value) && argumentA; case argumentB.void__type: return *((void**) argumentB.value) && argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) && argumentA; } return false; }

            // [||]
            inline boolean operator ||(const boolean argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            inline boolean operator ||(const char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            inline boolean operator ||(const char8_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            inline boolean operator ||(const char16_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            inline boolean operator ||(const char32_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            inline boolean operator ||(const double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            inline boolean operator ||(const float argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            inline boolean operator ||(const int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            inline boolean operator ||(const long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            inline boolean operator ||(const long double argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            inline boolean operator ||(const long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            inline boolean operator ||(const short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            inline boolean operator ||(const signed char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            inline boolean operator ||(const unsigned char argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            inline boolean operator ||(const unsigned int argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            inline boolean operator ||(const unsigned long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            inline boolean operator ||(const unsigned long long argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            inline boolean operator ||(const unsigned short argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            inline boolean operator ||(void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            inline boolean operator ||(const void* argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(const void* argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const void* argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const void* argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const void* argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            inline boolean operator ||(const wchar_t argument) const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value) || argument; case this -> char__type: return *((char*) this -> value) || argument; case this -> char8_t__type: return *((char8_t*) this -> value) || argument; case this -> char16_t__type: return *((char16_t*) this -> value) || argument; case this -> char32_t__type: return *((char32_t*) this -> value) || argument; case this -> double__type: return *((double*) this -> value) || argument; case this -> float__type: return *((float*) this -> value) || argument; case this -> int__type: return *((int*) this -> value) || argument; case this -> long__type: return *((long*) this -> value) || argument; case this -> long_double__type: return *((long double*) this -> value) || argument; case this -> long_long__type: return *((long long*) this -> value) || argument; case this -> short__type: return *((short*) this -> value) || argument; case this -> void__type: return *((void**) this -> value) || argument; case this -> wchar_t__type: return *((wchar_t*) this -> value) || argument; } return false; }
            friend inline boolean operator ||(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }
            friend inline boolean operator ||(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.boolean__type: return *((boolean*) argumentB.value) || argumentA; case argumentB.char__type: return *((char*) argumentB.value) || argumentA; case argumentB.char8_t__type: return *((char8_t*) argumentB.value) || argumentA; case argumentB.char16_t__type: return *((char16_t*) argumentB.value) || argumentA; case argumentB.char32_t__type: return *((char32_t*) argumentB.value) || argumentA; case argumentB.double__type: return *((double*) argumentB.value) || argumentA; case argumentB.float__type: return *((float*) argumentB.value) || argumentA; case argumentB.int__type: return *((int*) argumentB.value) || argumentA; case argumentB.long__type: return *((long*) argumentB.value) || argumentA; case argumentB.long_double__type: return *((long double*) argumentB.value) || argumentA; case argumentB.long_long__type: return *((long long*) argumentB.value) || argumentA; case argumentB.short__type: return *((short*) argumentB.value) || argumentA; case argumentB.void__type: return *((void**) argumentB.value) || argumentA; case argumentB.wchar_t__type: return *((wchar_t*) argumentB.value) || argumentA; } return false; }

            // [++]
            inline primitive operator ++(int) const { switch (this -> type) { case this -> boolean__type: return ++(*((boolean*) this -> value)); case this -> char__type: return ++(*((char*) this -> value)); case this -> char8_t__type: return ++(*((char8_t*) this -> value)); case this -> char16_t__type: return ++(*((char16_t*) this -> value)); case this -> char32_t__type: return ++(*((char32_t*) this -> value)); case this -> double__type: return ++(*((double*) this -> value)); case this -> float__type: return ++(*((float*) this -> value)); case this -> int__type: return ++(*((int*) this -> value)); case this -> long__type: return ++(*((long*) this -> value)); case this -> long_double__type: return ++(*((long double*) this -> value)); case this -> long_long__type: return ++(*((long long*) this -> value)); case this -> short__type: return ++(*((short*) this -> value)); case this -> void__type: return ++(*((int*) this -> value)); case this -> wchar_t__type: return ++(*((wchar_t*) this -> value)); } return false; }
            inline primitive operator ++(void) const { switch (this -> type) { case this -> boolean__type: return (*((boolean*) this -> value))++; case this -> char__type: return (*((char*) this -> value))++; case this -> char8_t__type: return (*((char8_t*) this -> value))++; case this -> char16_t__type: return (*((char16_t*) this -> value))++; case this -> char32_t__type: return (*((char32_t*) this -> value))++; case this -> double__type: return (*((double*) this -> value))++; case this -> float__type: return (*((float*) this -> value))++; case this -> int__type: return (*((int*) this -> value))++; case this -> long__type: return (*((long*) this -> value))++; case this -> long_double__type: return (*((long double*) this -> value))++; case this -> long_long__type: return (*((long long*) this -> value))++; case this -> short__type: return (*((short*) this -> value))++; case this -> void__type: return (*((int*) this -> value))++; case this -> wchar_t__type: return (*((wchar_t*) this -> value))++; } return false; }

            // [--]
            inline primitive operator --(int) const { switch (this -> type) { case this -> boolean__type: return --(*((boolean*) this -> value)); case this -> char__type: return --(*((char*) this -> value)); case this -> char8_t__type: return --(*((char8_t*) this -> value)); case this -> char16_t__type: return --(*((char16_t*) this -> value)); case this -> char32_t__type: return --(*((char32_t*) this -> value)); case this -> double__type: return --(*((double*) this -> value)); case this -> float__type: return --(*((float*) this -> value)); case this -> int__type: return --(*((int*) this -> value)); case this -> long__type: return --(*((long*) this -> value)); case this -> long_double__type: return --(*((long double*) this -> value)); case this -> long_long__type: return --(*((long long*) this -> value)); case this -> short__type: return --(*((short*) this -> value)); case this -> void__type: return --(*((int*) this -> value)); case this -> wchar_t__type: return --(*((wchar_t*) this -> value)); } return false; }
            inline primitive operator --(void) const { switch (this -> type) { case this -> boolean__type: return (*((boolean*) this -> value))--; case this -> char__type: return (*((char*) this -> value))--; case this -> char8_t__type: return (*((char8_t*) this -> value))--; case this -> char16_t__type: return (*((char16_t*) this -> value))--; case this -> char32_t__type: return (*((char32_t*) this -> value))--; case this -> double__type: return (*((double*) this -> value))--; case this -> float__type: return (*((float*) this -> value))--; case this -> int__type: return (*((int*) this -> value))--; case this -> long__type: return (*((long*) this -> value))--; case this -> long_double__type: return (*((long double*) this -> value))--; case this -> long_long__type: return (*((long long*) this -> value))--; case this -> short__type: return (*((short*) this -> value))--; case this -> void__type: return (*((int*) this -> value))--; case this -> wchar_t__type: return (*((wchar_t*) this -> value))--; } return false; }

            // [...]
            inline operator boolean() const { switch (this -> type) { case this -> boolean__type: return *((boolean*) this -> value); case this -> char__type: return *((char*) this -> value) ^ '\0'; case this -> char8_t__type: return *((char8_t*) this -> value) ^ 0; case this -> char16_t__type: return *((char16_t*) this -> value) ^ u'\0'; case this -> char32_t__type: return *((char32_t*) this -> value) ^ U'\0'; case this -> double__type: return *((double*) this -> value) != 0.0; case this -> float__type: return *((float*) this -> value) != 0.0f; case this -> int__type: return *((int*) this -> value) ^ 0; case this -> long__type: return *((long*) this -> value) ^ 0L; case this -> long_double__type: return *((long double*) this -> value) != 0.00; case this -> long_long__type: return *((long long*) this -> value) ^ 0LL; case this -> short__type: return *((short*) this -> value) ^ 0; case this -> void__type: return !pointerIsNull(*((void**) this -> value)); case this -> wchar_t__type: return *((wchar_t*) this -> value) ^ L'\0'; } return boolean(false); }
            inline operator char() const { switch (this -> type) { case this -> boolean__type: return (char) (unsigned char) *((boolean*) this -> value); case this -> char__type: return *((char*) this -> value); case this -> char8_t__type: return (char) *((char8_t*) this -> value); case this -> char16_t__type: return (char) *((char16_t*) this -> value); case this -> char32_t__type: return (char) *((char32_t*) this -> value); case this -> double__type: return (char) *((double*) this -> value); case this -> float__type: return (char) *((float*) this -> value); case this -> int__type: return (char) *((int*) this -> value); case this -> long__type: return (char) *((long*) this -> value); case this -> long_double__type: return (char) *((long double*) this -> value); case this -> long_long__type: return (char) *((long long*) this -> value); case this -> short__type: return (char) *((short*) this -> value); case this -> void__type: return (char) (int) *((void**) this -> value); case this -> wchar_t__type: return (char) *((wchar_t*) this -> value); } return '\0'; }
            inline operator char8_t() const { switch (this -> type) { case this -> boolean__type: return (char8_t) (unsigned char) *((boolean*) this -> value); case this -> char__type: return (char8_t) *((char*) this -> value); case this -> char8_t__type: return *((char8_t*) this -> value); case this -> char16_t__type: return (char8_t) *((char16_t*) this -> value); case this -> char32_t__type: return (char8_t) *((char32_t*) this -> value); case this -> double__type: return (char8_t) *((double*) this -> value); case this -> float__type: return (char8_t) *((float*) this -> value); case this -> int__type: return (char8_t) *((int*) this -> value); case this -> long__type: return (char8_t) *((long*) this -> value); case this -> long_double__type: return (char8_t) *((long double*) this -> value); case this -> long_long__type: return (char8_t) *((long long*) this -> value); case this -> short__type: return (char8_t) *((short*) this -> value); case this -> void__type: return (char8_t) (int) *((void**) this -> value); case this -> wchar_t__type: return (char8_t) *((wchar_t*) this -> value); } return u'\0'; }
            inline operator char16_t() const { switch (this -> type) { case this -> boolean__type: return (char16_t) (unsigned char) *((boolean*) this -> value); case this -> char__type: return (char16_t) *((char*) this -> value); case this -> char8_t__type: return (char16_t) *((char8_t*) this -> value); case this -> char16_t__type: return *((char16_t*) this -> value); case this -> char32_t__type: return (char16_t) *((char32_t*) this -> value); case this -> double__type: return (char16_t) *((double*) this -> value); case this -> float__type: return (char16_t) *((float*) this -> value); case this -> int__type: return (char16_t) *((int*) this -> value); case this -> long__type: return (char16_t) *((long*) this -> value); case this -> long_double__type: return (char16_t) *((long double*) this -> value); case this -> long_long__type: return (char16_t) *((long long*) this -> value); case this -> short__type: return (char16_t) *((short*) this -> value); case this -> void__type: return (char16_t) (int) *((void**) this -> value); case this -> wchar_t__type: return (char16_t) *((wchar_t*) this -> value); } return u'\0'; }
            inline operator char32_t() const { switch (this -> type) { case this -> boolean__type: return (char32_t) (unsigned char) *((boolean*) this -> value); case this -> char__type: return (char32_t) *((char*) this -> value); case this -> char8_t__type: return (char32_t) *((char8_t*) this -> value); case this -> char16_t__type: return (char32_t) *((char16_t*) this -> value); case this -> char32_t__type: return *((char32_t*) this -> value); case this -> double__type: return (char32_t) *((double*) this -> value); case this -> float__type: return (char32_t) *((float*) this -> value); case this -> int__type: return (char32_t) *((int*) this -> value); case this -> long__type: return (char32_t) *((long*) this -> value); case this -> long_double__type: return (char32_t) *((long double*) this -> value); case this -> long_long__type: return (char32_t) *((long long*) this -> value); case this -> short__type: return (char32_t) *((short*) this -> value); case this -> void__type: return (char32_t) (int) *((void**) this -> value); case this -> wchar_t__type: return (char32_t) *((wchar_t*) this -> value); } return U'\0'; }
            inline operator double() const { switch (this -> type) { case this -> boolean__type: return (double) (unsigned char) *((boolean*) this -> value); case this -> char__type: return (double) *((char*) this -> value); case this -> char8_t__type: return (double) *((char8_t*) this -> value); case this -> char16_t__type: return (double) *((char16_t*) this -> value); case this -> char32_t__type: return (double) *((char32_t*) this -> value); case this -> double__type: return *((double*) this -> value); case this -> float__type: return (double) *((float*) this -> value); case this -> int__type: return (double) *((int*) this -> value); case this -> long__type: return (double) *((long*) this -> value); case this -> long_double__type: return (double) *((long double*) this -> value); case this -> long_long__type: return (double) *((long long*) this -> value); case this -> short__type: return (double) *((short*) this -> value); case this -> void__type: return (double) (int) *((void**) this -> value); case this -> wchar_t__type: return (double) *((wchar_t*) this -> value); } return 0.0; }
            inline operator float() const { switch (this -> type) { case this -> boolean__type: return (float) (unsigned char) *((boolean*) this -> value); case this -> char__type: return (float) *((char*) this -> value); case this -> char8_t__type: return (float) *((char8_t*) this -> value); case this -> char16_t__type: return (float) *((char16_t*) this -> value); case this -> char32_t__type: return (float) *((char32_t*) this -> value); case this -> double__type: return (float) *((double*) this -> value); case this -> float__type: return *((float*) this -> value); case this -> int__type: return (float) *((int*) this -> value); case this -> long__type: return (float) *((long*) this -> value); case this -> long_double__type: return (float) *((long double*) this -> value); case this -> long_long__type: return (float) *((long long*) this -> value); case this -> short__type: return (float) *((short*) this -> value); case this -> void__type: return (float) (int) *((void**) this -> value); case this -> wchar_t__type: return (float) *((wchar_t*) this -> value); } return 0.0f; }
            inline operator int() const { switch (this -> type) { case this -> boolean__type: return (int) (unsigned char) *((boolean*) this -> value); case this -> char__type: return (int) *((char*) this -> value); case this -> char8_t__type: return (int) *((char8_t*) this -> value); case this -> char16_t__type: return (int) *((char16_t*) this -> value); case this -> char32_t__type: return (int) *((char32_t*) this -> value); case this -> double__type: return (int) *((double*) this -> value); case this -> float__type: return (int) *((float*) this -> value); case this -> int__type: return *((int*) this -> value); case this -> long__type: return (int) *((long*) this -> value); case this -> long_double__type: return (int) *((long double*) this -> value); case this -> long_long__type: return (int) *((long long*) this -> value); case this -> short__type: return (int) *((short*) this -> value); case this -> void__type: return (int) *((void**) this -> value); case this -> wchar_t__type: return (int) *((wchar_t*) this -> value); } return 0; }
            inline operator long() const { switch (this -> type) { case this -> boolean__type: return (long) (unsigned char) *((boolean*) this -> value); case this -> char__type: return (long) *((char*) this -> value); case this -> char8_t__type: return (long) *((char8_t*) this -> value); case this -> char16_t__type: return (long) *((char16_t*) this -> value); case this -> char32_t__type: return (long) *((char32_t*) this -> value); case this -> double__type: return (long) *((double*) this -> value); case this -> float__type: return (long) *((float*) this -> value); case this -> int__type: return (long) *((int*) this -> value); case this -> long__type: return *((long*) this -> value); case this -> long_double__type: return (long) *((long double*) this -> value); case this -> long_long__type: return (long) *((long long*) this -> value); case this -> short__type: return (long) *((short*) this -> value); case this -> void__type: return (long) (int) *((void**) this -> value); case this -> wchar_t__type: return (long) *((wchar_t*) this -> value); } return 0L; }
            inline operator long double() const { switch (this -> type) { case this -> boolean__type: return (long double) (unsigned char) *((boolean*) this -> value); case this -> char__type: return (long double) *((char*) this -> value); case this -> char8_t__type: return (long double) *((char8_t*) this -> value); case this -> char16_t__type: return (long double) *((char16_t*) this -> value); case this -> char32_t__type: return (long double) *((char32_t*) this -> value); case this -> double__type: return (long double) *((double*) this -> value); case this -> float__type: return (long double) *((float*) this -> value); case this -> int__type: return (long double) *((int*) this -> value); case this -> long__type: return (long double) *((long*) this -> value); case this -> long_double__type: return *((long double*) this -> value); case this -> long_long__type: return (long double) *((long long*) this -> value); case this -> short__type: return (long double) *((short*) this -> value); case this -> void__type: return (long double) (int) *((void**) this -> value); case this -> wchar_t__type: return (long double) *((wchar_t*) this -> value); } return 0.00; }
            inline operator long long() const { switch (this -> type) { case this -> boolean__type: return (long long) (unsigned char) *((boolean*) this -> value); case this -> char__type: return (long long) *((char*) this -> value); case this -> char8_t__type: return (long long) *((char8_t*) this -> value); case this -> char16_t__type: return (long long) *((char16_t*) this -> value); case this -> char32_t__type: return (long long) *((char32_t*) this -> value); case this -> double__type: return (long long) *((double*) this -> value); case this -> float__type: return (long long) *((float*) this -> value); case this -> int__type: return (long long) *((int*) this -> value); case this -> long__type: return (long long) *((long*) this -> value); case this -> long_double__type: return (long long) *((long double*) this -> value); case this -> long_long__type: return *((long long*) this -> value); case this -> short__type: return (long long) *((short*) this -> value); case this -> void__type: return (long long) (int) *((void**) this -> value); case this -> wchar_t__type: return (long long) *((wchar_t*) this -> value); } return 0LL; }
            inline operator short() const { switch (this -> type) { case this -> boolean__type: return (short) (unsigned char) *((boolean*) this -> value); case this -> char__type: return (short) *((char*) this -> value); case this -> char8_t__type: return (short) *((char8_t*) this -> value); case this -> char16_t__type: return (short) *((char16_t*) this -> value); case this -> char32_t__type: return (short) *((char32_t*) this -> value); case this -> double__type: return (short) *((double*) this -> value); case this -> float__type: return (short) *((float*) this -> value); case this -> int__type: return (short) *((int*) this -> value); case this -> long__type: return (short) *((long*) this -> value); case this -> long_double__type: return (short) *((long double*) this -> value); case this -> long_long__type: return (short) *((short*) this -> value); case this -> short__type: return *((short*) this -> value); case this -> void__type: return (short) (int) *((void**) this -> value); case this -> wchar_t__type: return (short) *((wchar_t*) this -> value); } return 0; }
            inline operator signed char() const { switch (this -> type) { case this -> boolean__type: return (signed char) (unsigned char) *((boolean*) this -> value); case this -> char__type: return (signed char) *((char*) this -> value); case this -> char8_t__type: return (signed char) *((char8_t*) this -> value); case this -> char16_t__type: return (signed char) *((char16_t*) this -> value); case this -> char32_t__type: return (signed char) *((char32_t*) this -> value); case this -> double__type: return (signed char) *((double*) this -> value); case this -> float__type: return (signed char) *((float*) this -> value); case this -> int__type: return (signed char) *((int*) this -> value); case this -> long__type: return (signed char) *((long*) this -> value); case this -> long_double__type: return (signed char) *((long double*) this -> value); case this -> long_long__type: return (signed char) *((long long*) this -> value); case this -> short__type: return (signed char) *((short*) this -> value); case this -> void__type: return (signed char) (int) *((void**) this -> value); case this -> wchar_t__type: return (signed char) *((wchar_t*) this -> value); } return '\0'; }
            inline operator unsigned char() const { switch (this -> type) { case this -> boolean__type: return (unsigned char) *((boolean*) this -> value); case this -> char__type: return (unsigned char) *((char*) this -> value); case this -> char8_t__type: return (unsigned char) *((char8_t*) this -> value); case this -> char16_t__type: return (unsigned char) *((char16_t*) this -> value); case this -> char32_t__type: return (unsigned char) *((char32_t*) this -> value); case this -> double__type: return (unsigned char) *((double*) this -> value); case this -> float__type: return (unsigned char) *((float*) this -> value); case this -> int__type: return (unsigned char) *((int*) this -> value); case this -> long__type: return (unsigned char) *((long*) this -> value); case this -> long_double__type: return (unsigned char) *((long double*) this -> value); case this -> long_long__type: return (unsigned char) *((long long*) this -> value); case this -> short__type: return (unsigned char) *((short*) this -> value); case this -> void__type: return (unsigned char) (int) *((void**) this -> value); case this -> wchar_t__type: return (unsigned char) *((wchar_t*) this -> value); } return '\0'; }
            inline operator unsigned int() const { switch (this -> type) { case this -> boolean__type: return (unsigned int) (unsigned char) *((boolean*) this -> value); case this -> char__type: return (unsigned int) *((char*) this -> value); case this -> char8_t__type: return (unsigned int) *((char8_t*) this -> value); case this -> char16_t__type: return (unsigned int) *((char16_t*) this -> value); case this -> char32_t__type: return (unsigned int) *((char32_t*) this -> value); case this -> double__type: return (unsigned int) *((double*) this -> value); case this -> float__type: return (unsigned int) *((float*) this -> value); case this -> int__type: return (unsigned int) *((int*) this -> value); case this -> long__type: return (unsigned int) *((long*) this -> value); case this -> long_double__type: return (unsigned int) *((long double*) this -> value); case this -> long_long__type: return (unsigned int) *((long long*) this -> value); case this -> short__type: return (unsigned int) *((short*) this -> value); case this -> void__type: return (unsigned int) (int) *((void**) this -> value); case this -> wchar_t__type: return (unsigned int) *((wchar_t*) this -> value); } return 0u; }
            inline operator unsigned long() const { switch (this -> type) { case this -> boolean__type: return (unsigned long) (unsigned char) *((boolean*) this -> value); case this -> char__type: return (unsigned long) *((char*) this -> value); case this -> char8_t__type: return (unsigned long) *((char8_t*) this -> value); case this -> char16_t__type: return (unsigned long) *((char16_t*) this -> value); case this -> char32_t__type: return (unsigned long) *((char32_t*) this -> value); case this -> double__type: return (unsigned long) *((double*) this -> value); case this -> float__type: return (unsigned long) *((float*) this -> value); case this -> int__type: return (unsigned long) *((int*) this -> value); case this -> long__type: return (unsigned long) *((long*) this -> value); case this -> long_double__type: return (unsigned long) *((long double*) this -> value); case this -> long_long__type: return (unsigned long) *((long long*) this -> value); case this -> short__type: return (unsigned long) *((short*) this -> value); case this -> void__type: return (unsigned long) (int) *((void**) this -> value); case this -> wchar_t__type: return (unsigned long) *((wchar_t*) this -> value); } return 0uL; }
            inline operator unsigned long long() const { switch (this -> type) { case this -> boolean__type: return (unsigned long long) (unsigned char) *((boolean*) this -> value); case this -> char__type: return (unsigned long long) *((char*) this -> value); case this -> char8_t__type: return (unsigned long long) *((char8_t*) this -> value); case this -> char16_t__type: return (unsigned long long) *((char16_t*) this -> value); case this -> char32_t__type: return (unsigned long long) *((char32_t*) this -> value); case this -> double__type: return (unsigned long long) *((double*) this -> value); case this -> float__type: return (unsigned long long) *((float*) this -> value); case this -> int__type: return (unsigned long long) *((int*) this -> value); case this -> long__type: return (unsigned long long) *((long*) this -> value); case this -> long_double__type: return (unsigned long long) *((long double*) this -> value); case this -> long_long__type: return (unsigned long long) *((long long*) this -> value); case this -> short__type: return (unsigned long long) *((short*) this -> value); case this -> void__type: return (unsigned long long) (int) *((void**) this -> value); case this -> wchar_t__type: return (unsigned long long) *((wchar_t*) this -> value); } return 0uLL; }
            inline operator unsigned short() const { switch (this -> type) { case this -> boolean__type: return (unsigned short) (unsigned char) *((boolean*) this -> value); case this -> char__type: return (unsigned short) *((char*) this -> value); case this -> char8_t__type: return (unsigned short) *((char8_t*) this -> value); case this -> char16_t__type: return (unsigned short) *((char16_t*) this -> value); case this -> char32_t__type: return (unsigned short) *((char32_t*) this -> value); case this -> double__type: return (unsigned short) *((double*) this -> value); case this -> float__type: return (unsigned short) *((float*) this -> value); case this -> int__type: return (unsigned short) *((int*) this -> value); case this -> long__type: return (unsigned short) *((long*) this -> value); case this -> long_double__type: return (unsigned short) *((long double*) this -> value); case this -> long_long__type: return (unsigned short) *((long long*) this -> value); case this -> short__type: return (unsigned short) *((short*) this -> value); case this -> void__type: return (unsigned short) (int) *((void**) this -> value); case this -> wchar_t__type: return (unsigned short) *((wchar_t*) this -> value); } return 0u; }
            inline operator void*() const { switch (this -> type) { case this -> boolean__type: return (void*) (int) (unsigned char) *((boolean*) this -> value); case this -> char__type: return (void*) (int) *((char*) this -> value); case this -> char8_t__type: return (void*) (int) *((char8_t*) this -> value); case this -> char16_t__type: return (void*) (int) *((char16_t*) this -> value); case this -> char32_t__type: return (void*) (int) *((char32_t*) this -> value); case this -> double__type: return (void*) (int) *((double*) this -> value); case this -> float__type: return (void*) (int) *((float*) this -> value); case this -> int__type: return (void*) *((int*) this -> value); case this -> long__type: return (void*) (int) *((long*) this -> value); case this -> long_double__type: return (void*) (int) *((long double*) this -> value); case this -> long_long__type: return (void*) (int) *((long long*) this -> value); case this -> short__type: return (void*) (int) *((short*) this -> value); case this -> void__type: return *((void**) this -> value); case this -> wchar_t__type: return (void*) (int) *((wchar_t*) this -> value); } return null; }
            inline operator const void*() const { switch (this -> type) { case this -> boolean__type: return (const void*) (int) (unsigned char) *((boolean*) this -> value); case this -> char__type: return (const void*) (int) *((char*) this -> value); case this -> char8_t__type: return (const void*) (int) *((char8_t*) this -> value); case this -> char16_t__type: return (const void*) (int) *((char16_t*) this -> value); case this -> char32_t__type: return (const void*) (int) *((char32_t*) this -> value); case this -> double__type: return (const void*) (int) *((double*) this -> value); case this -> float__type: return (const void*) (int) *((float*) this -> value); case this -> int__type: return (const void*) *((int*) this -> value); case this -> long__type: return (const void*) (int) *((long*) this -> value); case this -> long_double__type: return (const void*) (int) *((long double*) this -> value); case this -> long_long__type: return (const void*) (int) *((long long*) this -> value); case this -> short__type: return (const void*) (int) *((short*) this -> value); case this -> void__type: return *((void**) this -> value); case this -> wchar_t__type: return (const void*) (int) *((wchar_t*) this -> value); } return null; }
            inline operator wchar_t() const { switch (this -> type) { case this -> boolean__type: return (wchar_t) (unsigned char) *((boolean*) this -> value); case this -> char__type: return (wchar_t) *((char*) this -> value); case this -> char8_t__type: return (wchar_t) *((char8_t*) this -> value); case this -> char16_t__type: return (wchar_t) *((char16_t*) this -> value); case this -> char32_t__type: return (wchar_t) *((char32_t*) this -> value); case this -> double__type: return (wchar_t) *((double*) this -> value); case this -> float__type: return (wchar_t) *((float*) this -> value); case this -> int__type: return (wchar_t) *((int*) this -> value); case this -> long__type: return (wchar_t) *((long*) this -> value); case this -> long_double__type: return (wchar_t) *((long double*) this -> value); case this -> long_long__type: return (wchar_t) *((long long*) this -> value); case this -> short__type: return (wchar_t) *((short*) this -> value); case this -> void__type: return (wchar_t) (int) *((void**) this -> value); case this -> wchar_t__type: return *((wchar_t*) this -> value); } return L'\0'; }
} primitive;
