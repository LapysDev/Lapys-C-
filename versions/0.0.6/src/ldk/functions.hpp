/* Function */
    // [Number]
        // Is Infinite
        inline boolean numberIsInfinite(const double number) { return std::isinf(number); }
        inline boolean numberIsInfinite(const float number) { return std::isinf(number); }
        inline boolean numberIsInfinite(const int) { return false; }
        inline boolean numberIsInfinite(const long) { return false; }
        inline boolean numberIsInfinite(const long double number) { return std::isinf(number); }
        inline boolean numberIsInfinite(const long long) { return false; }
        inline boolean numberIsInfinite(const short) { return false; }
        inline boolean numberIsInfinite(const unsigned int) { return false; }
        inline boolean numberIsInfinite(const unsigned long) { return false; }
        inline boolean numberIsInfinite(const unsigned long long) { return false; }
        inline boolean numberIsInfinite(const unsigned short) { return false; }

        // Is Not-A-Number
        inline boolean numberIsNaN(const double number) { return std::isnan(number); }
        inline boolean numberIsNaN(const float number) { return std::isnan(number); }
        inline boolean numberIsNaN(const int) { return false; }
        inline boolean numberIsNaN(const long) { return false; }
        inline boolean numberIsNaN(const long double number) { return std::isnan(number); }
        inline boolean numberIsNaN(const long long) { return false; }
        inline boolean numberIsNaN(const short) { return false; }
        inline boolean numberIsNaN(const unsigned int) { return false; }
        inline boolean numberIsNaN(const unsigned long) { return false; }
        inline boolean numberIsNaN(const unsigned long long) { return false; }
        inline boolean numberIsNaN(const unsigned short) { return false; }

    // [Pointer]
        // Allocate Memory
        boolean* pointerAllocateMemory(boolean* pointer, const unsigned size) { return (boolean*) std::malloc(size); } const boolean* pointerAllocateMemory(const boolean* pointer, const unsigned size) { return (const boolean*) std::malloc(size); }
        char* pointerAllocateMemory(char* pointer, const unsigned size) { return (char*) std::malloc(size); } const char* pointerAllocateMemory(const char* pointer, const unsigned size) { return (const char*) std::malloc(size); }
        char8_t* pointerAllocateMemory(char8_t* pointer, const unsigned size) { return (char8_t*) std::malloc(size); } const char8_t* pointerAllocateMemory(const char8_t* pointer, const unsigned size) { return (const char8_t*) std::malloc(size); }
        char16_t* pointerAllocateMemory(char16_t* pointer, const unsigned size) { return (char16_t*) std::malloc(size); } const char16_t* pointerAllocateMemory(const char16_t* pointer, const unsigned size) { return (const char16_t*) std::malloc(size); }
        char32_t* pointerAllocateMemory(char32_t* pointer, const unsigned size) { return (char32_t*) std::malloc(size); } const char32_t* pointerAllocateMemory(const char32_t* pointer, const unsigned size) { return (const char32_t*) std::malloc(size); }
        double* pointerAllocateMemory(double* pointer, const unsigned size) { return (double*) std::malloc(size); } const double* pointerAllocateMemory(const double* pointer, const unsigned size) { return (const double*) std::malloc(size); }
        float* pointerAllocateMemory(float* pointer, const unsigned size) { return (float*) std::malloc(size); } const float* pointerAllocateMemory(const float* pointer, const unsigned size) { return (const float*) std::malloc(size); }
        int* pointerAllocateMemory(int* pointer, const unsigned size) { return (int*) std::malloc(size); } const int* pointerAllocateMemory(const int* pointer, const unsigned size) { return (const int*) std::malloc(size); }
        long* pointerAllocateMemory(long* pointer, const unsigned size) { return (long*) std::malloc(size); } const long* pointerAllocateMemory(const long* pointer, const unsigned size) { return (const long*) std::malloc(size); }
        long double* pointerAllocateMemory(long double* pointer, const unsigned size) { return (long double*) std::malloc(size); } const long double* pointerAllocateMemory(const long double* pointer, const unsigned size) { return (const long double*) std::malloc(size); }
        long long* pointerAllocateMemory(long long* pointer, const unsigned size) { return (long long*) std::malloc(size); } const long long* pointerAllocateMemory(const long long* pointer, const unsigned size) { return (const long long*) std::malloc(size); }
        short* pointerAllocateMemory(short* pointer, const unsigned size) { return (short*) std::malloc(size); } const short* pointerAllocateMemory(const short* pointer, const unsigned size) { return (const short*) std::malloc(size); }
        signed char* pointerAllocateMemory(signed char* pointer, const unsigned size) { return (signed char*) std::malloc(size); } const signed char* pointerAllocateMemory(const signed char* pointer, const unsigned size) { return (const signed char*) std::malloc(size); }
        unsigned char* pointerAllocateMemory(unsigned char* pointer, const unsigned size) { return (unsigned char*) std::malloc(size); } const unsigned char* pointerAllocateMemory(const unsigned char* pointer, const unsigned size) { return (const unsigned char*) std::malloc(size); }
        unsigned int* pointerAllocateMemory(unsigned int* pointer, const unsigned size) { return (unsigned int*) std::malloc(size); } const unsigned int* pointerAllocateMemory(const unsigned int* pointer, const unsigned size) { return (const unsigned int*) std::malloc(size); }
        void* pointerAllocateMemory(const unsigned long size) { return std::malloc(size); }
        unsigned long* pointerAllocateMemory(unsigned long* pointer, const unsigned size) { return (unsigned long*) std::malloc(size); } const unsigned long* pointerAllocateMemory(const unsigned long* pointer, const unsigned size) { return (const unsigned long*) std::malloc(size); }
        unsigned long long* pointerAllocateMemory(unsigned long long* pointer, const unsigned size) { return (unsigned long long*) std::malloc(size); } const unsigned long long* pointerAllocateMemory(const unsigned long long* pointer, const unsigned size) { return (const unsigned long long*) std::malloc(size); }
        unsigned short* pointerAllocateMemory(unsigned short* pointer, const unsigned size) { return (unsigned short*) std::malloc(size); } const unsigned short* pointerAllocateMemory(const unsigned short* pointer, const unsigned size) { return (const unsigned short*) std::malloc(size); }
        void* pointerAllocateMemory(void* pointer, const unsigned size) { return (void*) std::malloc(size); } const void* pointerAllocateMemory(const void* pointer, const unsigned size) { return (const void*) std::malloc(size); }
        wchar_t* pointerAllocateMemory(wchar_t* pointer, const unsigned size) { return (wchar_t*) std::malloc(size); } const wchar_t* pointerAllocateMemory(const wchar_t* pointer, const unsigned size) { return (const wchar_t*) std::malloc(size); }

        // Free Memory
        boolean* pointerFreeMemory(boolean* pointer) { std::free(pointer); return (boolean*) (void*) null; } const boolean* pointerFreeMemory(const boolean* pointer) { std::free((boolean*) pointer); return (boolean*) (void*) null; }
        char* pointerFreeMemory(char* pointer) { std::free(pointer); return null; } const char* pointerFreeMemory(const char* pointer) { std::free((char*) pointer); return null; }
        char8_t* pointerFreeMemory(char8_t* pointer) { std::free(pointer); return (char8_t*) (void*) null; } const char8_t* pointerFreeMemory(const char8_t* pointer) { std::free((char8_t*) pointer); return (char8_t*) (void*) null; }
        char16_t* pointerFreeMemory(char16_t* pointer) { std::free(pointer); return (char16_t*) (void*) null; } const char16_t* pointerFreeMemory(const char16_t* pointer) { std::free((char16_t*) pointer); return (char16_t*) (void*) null; }
        char32_t* pointerFreeMemory(char32_t* pointer) { std::free(pointer); return (char32_t*) (void*) null; } const char32_t* pointerFreeMemory(const char32_t* pointer) { std::free((char32_t*) pointer); return (char32_t*) (void*) null; }
        double* pointerFreeMemory(double* pointer) { std::free(pointer); return null; } const double* pointerFreeMemory(const double* pointer) { std::free((double*) pointer); return null; }
        float* pointerFreeMemory(float* pointer) { std::free(pointer); return null; } const float* pointerFreeMemory(const float* pointer) { std::free((float*) pointer); return null; }
        int* pointerFreeMemory(int* pointer) { std::free(pointer); return null; } const int* pointerFreeMemory(const int* pointer) { std::free((int*) pointer); return null; }
        long* pointerFreeMemory(long* pointer) { std::free(pointer); return null; } const long* pointerFreeMemory(const long* pointer) { std::free((long*) pointer); return null; }
        long double* pointerFreeMemory(long double* pointer) { std::free(pointer); return (long double*) (void*) null; } const long double* pointerFreeMemory(const long double* pointer) { std::free((long double*) pointer); return (long double*) (void*) null; }
        long long* pointerFreeMemory(long long* pointer) { std::free(pointer); return (long long*) (void*) null; } const long long* pointerFreeMemory(const long long* pointer) { std::free((long long*) pointer); return (long long*) (void*) null; }
        short* pointerFreeMemory(short* pointer) { std::free(pointer); return null; } const short* pointerFreeMemory(const short* pointer) { std::free((short*) pointer); return null; }
        signed char* pointerFreeMemory(signed char* pointer) { std::free(pointer); return null; } const signed char* pointerFreeMemory(const signed char* pointer) { std::free((signed char*) pointer); return null; }
        unsigned char* pointerFreeMemory(unsigned char* pointer) { std::free(pointer); return null; } const unsigned char* pointerFreeMemory(const unsigned char* pointer) { std::free((unsigned char*) pointer); return null; }
        unsigned int* pointerFreeMemory(unsigned int* pointer) { std::free(pointer); return null; } const unsigned int* pointerFreeMemory(const unsigned int* pointer) { std::free((unsigned int*) pointer); return null; }
        unsigned long* pointerFreeMemory(unsigned long* pointer) { std::free(pointer); return null; } const unsigned long* pointerFreeMemory(const unsigned long* pointer) { std::free((unsigned long*) pointer); return null; }
        unsigned long long* pointerFreeMemory(unsigned long long* pointer) { std::free(pointer); return (unsigned long long*) (void*) null; } const unsigned long long* pointerFreeMemory(const unsigned long long* pointer) { std::free((unsigned long long*) pointer); return (unsigned long long*) (void*) null; }
        unsigned short* pointerFreeMemory(unsigned short* pointer) { std::free(pointer); return null; } const unsigned short* pointerFreeMemory(const unsigned short* pointer) { std::free((unsigned short*) pointer); return null; }
        void* pointerFreeMemory(void* pointer) { std::free(pointer); return null; } const void* pointerFreeMemory(const void* pointer) { std::free((void*) pointer); return null; }
        wchar_t* pointerFreeMemory(wchar_t* pointer) { std::free(pointer); return (wchar_t*) (void*) null; } const wchar_t* pointerFreeMemory(const wchar_t* pointer) { std::free((wchar_t*) pointer); return (wchar_t*) (void*) null; }

        // Is Null
        inline boolean pointerIsNull(boolean* pointer) { return null == pointer; } inline boolean pointerIsNull(const boolean* pointer) { return null == pointer; }
        inline boolean pointerIsNull(char* pointer) { return null == pointer; } inline boolean pointerIsNull(const char* pointer) { return null == pointer; }
        inline boolean pointerIsNull(char8_t* pointer) { return null == pointer; } inline boolean pointerIsNull(const char8_t* pointer) { return null == pointer; }
        inline boolean pointerIsNull(char16_t* pointer) { return null == pointer; } inline boolean pointerIsNull(const char16_t* pointer) { return null == pointer; }
        inline boolean pointerIsNull(char32_t* pointer) { return null == pointer; } inline boolean pointerIsNull(const char32_t* pointer) { return null == pointer; }
        inline boolean pointerIsNull(double* pointer) { return null == pointer; } inline boolean pointerIsNull(const double* pointer) { return null == pointer; }
        inline boolean pointerIsNull(float* pointer) { return null == pointer; } inline boolean pointerIsNull(const float* pointer) { return null == pointer; }
        inline boolean pointerIsNull(int* pointer) { return null == pointer; } inline boolean pointerIsNull(const int* pointer) { return null == pointer; }
        inline boolean pointerIsNull(long* pointer) { return null == pointer; } inline boolean pointerIsNull(const long* pointer) { return null == pointer; }
        inline boolean pointerIsNull(long double* pointer) { return null == pointer; } inline boolean pointerIsNull(const long double* pointer) { return null == pointer; }
        inline boolean pointerIsNull(long long* pointer) { return null == pointer; } inline boolean pointerIsNull(const long long* pointer) { return null == pointer; }
        inline boolean pointerIsNull(short* pointer) { return null == pointer; } inline boolean pointerIsNull(const short* pointer) { return null == pointer; }
        inline boolean pointerIsNull(signed char* pointer) { return null == pointer; } inline boolean pointerIsNull(const signed char* pointer) { return null == pointer; }
        inline boolean pointerIsNull(unsigned char* pointer) { return null == pointer; } inline boolean pointerIsNull(const unsigned char* pointer) { return null == pointer; }
        inline boolean pointerIsNull(unsigned int* pointer) { return null == pointer; } inline boolean pointerIsNull(const unsigned int* pointer) { return null == pointer; }
        inline boolean pointerIsNull(unsigned long* pointer) { return null == pointer; } inline boolean pointerIsNull(const unsigned long* pointer) { return null == pointer; }
        inline boolean pointerIsNull(unsigned long long* pointer) { return null == pointer; } inline boolean pointerIsNull(const unsigned long long* pointer) { return null == pointer; }
        inline boolean pointerIsNull(unsigned short* pointer) { return null == pointer; } inline boolean pointerIsNull(const unsigned short* pointer) { return null == pointer; }
        inline boolean pointerIsNull(void* pointer) { return null == pointer; } inline boolean pointerIsNull(const void* pointer) { return null == pointer; }
        inline boolean pointerIsNull(wchar_t* pointer) { return null == pointer; } inline boolean pointerIsNull(const wchar_t* pointer) { return null == pointer; }

        // Reallocate Memory
        boolean* pointerReallocateMemory(boolean* pointer, const unsigned size) { return (boolean*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc(pointer, size)); } const boolean* pointerReallocateMemory(const boolean* pointer, const unsigned size) { return (boolean*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc((boolean*) pointer, size)); }
        char* pointerReallocateMemory(char* pointer, const unsigned size) { return (char*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc(pointer, size)); } const char* pointerReallocateMemory(const char* pointer, const unsigned size) { return (char*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc((char*) pointer, size)); }
        char8_t* pointerReallocateMemory(char8_t* pointer, const unsigned size) { return (char8_t*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc(pointer, size)); } const char8_t* pointerReallocateMemory(const char8_t* pointer, const unsigned size) { return (char8_t*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc((char8_t*) pointer, size)); }
        char16_t* pointerReallocateMemory(char16_t* pointer, const unsigned size) { return (char16_t*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc(pointer, size)); } const char16_t* pointerReallocateMemory(const char16_t* pointer, const unsigned size) { return (char16_t*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc((char16_t*) pointer, size)); }
        char32_t* pointerReallocateMemory(char32_t* pointer, const unsigned size) { return (char32_t*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc(pointer, size)); } const char32_t* pointerReallocateMemory(const char32_t* pointer, const unsigned size) { return (char32_t*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc((char32_t*) pointer, size)); }
        double* pointerReallocateMemory(double* pointer, const unsigned size) { return (double*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc(pointer, size)); } const double* pointerReallocateMemory(const double* pointer, const unsigned size) { return (double*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc((double*) pointer, size)); }
        float* pointerReallocateMemory(float* pointer, const unsigned size) { return (float*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc(pointer, size)); } const float* pointerReallocateMemory(const float* pointer, const unsigned size) { return (float*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc((float*) pointer, size)); }
        int* pointerReallocateMemory(int* pointer, const unsigned size) { return (int*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc(pointer, size)); } const int* pointerReallocateMemory(const int* pointer, const unsigned size) { return (int*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc((int*) pointer, size)); }
        long* pointerReallocateMemory(long* pointer, const unsigned size) { return (long*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc(pointer, size)); } const long* pointerReallocateMemory(const long* pointer, const unsigned size) { return (long*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc((long*) pointer, size)); }
        long double* pointerReallocateMemory(long double* pointer, const unsigned size) { return (long double*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc(pointer, size)); } const long double* pointerReallocateMemory(const long double* pointer, const unsigned size) { return (long double*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc((long double*) pointer, size)); }
        long long* pointerReallocateMemory(long long* pointer, const unsigned size) { return (long long*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc(pointer, size)); } const long long* pointerReallocateMemory(const long long* pointer, const unsigned size) { return (long long*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc((long long*) pointer, size)); }
        short* pointerReallocateMemory(short* pointer, const unsigned size) { return (short*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc(pointer, size)); } const short* pointerReallocateMemory(const short* pointer, const unsigned size) { return (short*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc((short*) pointer, size)); }
        signed char* pointerReallocateMemory(signed char* pointer, const unsigned size) { return (signed char*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc(pointer, size)); } const signed char* pointerReallocateMemory(const signed char* pointer, const unsigned size) { return (signed char*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc((signed char*) pointer, size)); }
        unsigned char* pointerReallocateMemory(unsigned char* pointer, const unsigned size) { return (unsigned char*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc(pointer, size)); } const unsigned char* pointerReallocateMemory(const unsigned char* pointer, const unsigned size) { return (unsigned char*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc((unsigned char*) pointer, size)); }
        unsigned int* pointerReallocateMemory(unsigned int* pointer, const unsigned size) { return (unsigned int*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc(pointer, size)); } const unsigned int* pointerReallocateMemory(const unsigned int* pointer, const unsigned size) { return (unsigned int*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc((unsigned int*) pointer, size)); }
        unsigned long* pointerReallocateMemory(unsigned long* pointer, const unsigned size) { return (unsigned long*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc(pointer, size)); } const unsigned long* pointerReallocateMemory(const unsigned long* pointer, const unsigned size) { return (unsigned long*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc((unsigned long*) pointer, size)); }
        unsigned long long* pointerReallocateMemory(unsigned long long* pointer, const unsigned size) { return (unsigned long long*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc(pointer, size)); } const unsigned long long* pointerReallocateMemory(const unsigned long long* pointer, const unsigned size) { return (unsigned long long*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc((unsigned long long*) pointer, size)); }
        unsigned short* pointerReallocateMemory(unsigned short* pointer, const unsigned size) { return (unsigned short*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc(pointer, size)); } const unsigned short* pointerReallocateMemory(const unsigned short* pointer, const unsigned size) { return (unsigned short*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc((unsigned short*) pointer, size)); }
        void* pointerReallocateMemory(void* pointer, const unsigned size) { return (void*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc(pointer, size)); } const void* pointerReallocateMemory(const void* pointer, const unsigned size) { return (void*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc((void*) pointer, size)); }
        wchar_t* pointerReallocateMemory(wchar_t* pointer, const unsigned size) { return (wchar_t*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc(pointer, size)); } const wchar_t* pointerReallocateMemory(const wchar_t* pointer, const unsigned size) { return (wchar_t*) (pointerIsNull(pointer) ? std::malloc(size) : std::realloc((wchar_t*) pointer, size)); }

    // [[Character] String]
        // Free
        char* stringFree(char*& characterString) { return (characterString = pointerFreeMemory(characterString)); }
        char8_t* stringFree(char8_t*& characterString) { return (characterString = pointerFreeMemory(characterString)); }
        char16_t* stringFree(char16_t*& characterString) { return (characterString = pointerFreeMemory(characterString)); }
        char32_t* stringFree(char32_t*& characterString) { return (characterString = pointerFreeMemory(characterString)); }
        signed char* stringFree(signed char*& characterString) { return (characterString = pointerFreeMemory(characterString)); }
        unsigned char* stringFree(unsigned char*& characterString) { return (characterString = pointerFreeMemory(characterString)); }
        wchar_t* stringFree(wchar_t*& characterString) { return (characterString = pointerFreeMemory(characterString)); }

        // Length
        inline unsigned long stringLength(char characterString[]) { if (pointerIsNull(characterString)) return 0uL; else { unsigned long characterStringLength = 0uL; while (*(characterString++) ^ '\0') characterStringLength += 1uL; return characterStringLength; } } inline unsigned long stringLength(const char characterString[]) { return stringLength((char*) characterString); }
        inline unsigned long stringLength(char8_t characterString[]) { if (pointerIsNull(characterString)) return 0uL; else { unsigned long characterStringLength = 0uL; while (*(characterString++) ^ 0) characterStringLength += 1uL; return characterStringLength; } } inline unsigned long stringLength(const char8_t characterString[]) { return stringLength((char8_t*) characterString); }
        inline unsigned long stringLength(char16_t characterString[]) { if (pointerIsNull(characterString)) return 0uL; else { unsigned long characterStringLength = 0uL; while (*(characterString++) ^ u'\0') characterStringLength += 1uL; return characterStringLength; } } inline unsigned long stringLength(const char16_t characterString[]) { return stringLength((char16_t*) characterString); }
        inline unsigned long stringLength(char32_t characterString[]) { if (pointerIsNull(characterString)) return 0uL; else { unsigned long characterStringLength = 0uL; while (*(characterString++) ^ U'\0') characterStringLength += 1uL; return characterStringLength; } } inline unsigned long stringLength(const char32_t characterString[]) { return stringLength((char32_t*) characterString); }
        inline unsigned long stringLength(signed char characterString[]) { if (pointerIsNull(characterString)) return 0uL; else { unsigned long characterStringLength = 0uL; while (*(characterString++) ^ '\0') characterStringLength += 1uL; return characterStringLength; } } inline unsigned long stringLength(const signed char characterString[]) { return stringLength((signed char*) characterString); }
        inline unsigned long stringLength(unsigned char characterString[]) { if (pointerIsNull(characterString)) return 0uL; else { unsigned long characterStringLength = 0uL; while (*(characterString++) ^ '\0') characterStringLength += 1uL; return characterStringLength; } } inline unsigned long stringLength(const unsigned char characterString[]) { return stringLength((unsigned char*) characterString); }
        inline unsigned long stringLength(wchar_t characterString[]) { if (pointerIsNull(characterString)) return 0uL; else { unsigned long characterStringLength = 0uL; while (*(characterString++) ^ L'\0') characterStringLength += 1uL; return characterStringLength; } } inline unsigned long stringLength(const wchar_t characterString[]) { return stringLength((wchar_t*) characterString); }

        // Clone
        char* stringClone(const char characterString[], unsigned long characterStringLength) { char *characterStringClone = (char*) pointerAllocateMemory((characterStringLength + 1uL) * sizeof(char)); *(characterStringClone + characterStringLength) = '\0'; while (characterStringLength) { characterStringLength -= 1uL; *(characterStringClone + characterStringLength) = *(characterString + characterStringLength); } *characterStringClone = *characterString; return characterStringClone; }
        char* stringClone(const char characterString[]) { return stringClone(characterString, stringLength(characterString)); }
        char* stringClone(char characterString[], unsigned long characterStringLength) { return stringClone((const char*) characterString, characterStringLength); }
        char* stringClone(char characterString[]) { return stringClone((const char*) characterString, stringLength(characterString)); }

        char8_t* stringClone(const char8_t characterString[], unsigned long characterStringLength) { char8_t *characterStringClone = (char8_t*) pointerAllocateMemory((characterStringLength + 1uL) * sizeof(char8_t)); *(characterStringClone + characterStringLength) = 0; while (characterStringLength) { characterStringLength -= 1uL; *(characterStringClone + characterStringLength) = *(characterString + characterStringLength); } *characterStringClone = *characterString; return characterStringClone; }
        char8_t* stringClone(const char8_t characterString[]) { return stringClone(characterString, stringLength(characterString)); }
        char8_t* stringClone(char8_t characterString[], unsigned long characterStringLength) { return stringClone((const char8_t*) characterString, characterStringLength); }
        char8_t* stringClone(char8_t characterString[]) { return stringClone((const char8_t*) characterString, stringLength(characterString)); }

        char16_t* stringClone(const char16_t characterString[], unsigned long characterStringLength) { char16_t *characterStringClone = (char16_t*) pointerAllocateMemory((characterStringLength + 1uL) * sizeof(char16_t)); *(characterStringClone + characterStringLength) = u'\0'; while (characterStringLength) { characterStringLength -= 1uL; *(characterStringClone + characterStringLength) = *(characterString + characterStringLength); } *characterStringClone = *characterString; return characterStringClone; }
        char16_t* stringClone(const char16_t characterString[]) { return stringClone(characterString, stringLength(characterString)); }
        char16_t* stringClone(char16_t characterString[], unsigned long characterStringLength) { return stringClone((const char16_t*) characterString, characterStringLength); }
        char16_t* stringClone(char16_t characterString[]) { return stringClone((const char16_t*) characterString, stringLength(characterString)); }

        char32_t* stringClone(const char32_t characterString[], unsigned long characterStringLength) { char32_t *characterStringClone = (char32_t*) pointerAllocateMemory((characterStringLength + 1uL) * sizeof(char32_t)); *(characterStringClone + characterStringLength) = U'\0'; while (characterStringLength) { characterStringLength -= 1uL; *(characterStringClone + characterStringLength) = *(characterString + characterStringLength); } *characterStringClone = *characterString; return characterStringClone; }
        char32_t* stringClone(const char32_t characterString[]) { return stringClone(characterString, stringLength(characterString)); }
        char32_t* stringClone(char32_t characterString[], unsigned long characterStringLength) { return stringClone((const char32_t*) characterString, characterStringLength); }
        char32_t* stringClone(char32_t characterString[]) { return stringClone((const char32_t*) characterString, stringLength(characterString)); }

        signed char* stringClone(const signed char characterString[], unsigned long characterStringLength) { signed char *characterStringClone = (signed char*) pointerAllocateMemory((characterStringLength + 1uL) * sizeof(signed char)); *(characterStringClone + characterStringLength) = '\0'; while (characterStringLength) { characterStringLength -= 1uL; *(characterStringClone + characterStringLength) = *(characterString + characterStringLength); } *characterStringClone = *characterString; return characterStringClone; }
        signed char* stringClone(const signed char characterString[]) { return stringClone(characterString, stringLength(characterString)); }
        signed char* stringClone(signed char characterString[], unsigned long characterStringLength) { return stringClone((const signed char*) characterString, characterStringLength); }
        signed char* stringClone(signed char characterString[]) { return stringClone((const signed char*) characterString, stringLength(characterString)); }

        unsigned char* stringClone(const unsigned char characterString[], unsigned long characterStringLength) { unsigned char *characterStringClone = (unsigned char*) pointerAllocateMemory((characterStringLength + 1uL) * sizeof(unsigned char)); *(characterStringClone + characterStringLength) = '\0'; while (characterStringLength) { characterStringLength -= 1uL; *(characterStringClone + characterStringLength) = *(characterString + characterStringLength); } *characterStringClone = *characterString; return characterStringClone; }
        unsigned char* stringClone(const unsigned char characterString[]) { return stringClone(characterString, stringLength(characterString)); }
        unsigned char* stringClone(unsigned char characterString[], unsigned long characterStringLength) { return stringClone((const unsigned char*) characterString, characterStringLength); }
        unsigned char* stringClone(unsigned char characterString[]) { return stringClone((const unsigned char*) characterString, stringLength(characterString)); }

        wchar_t* stringClone(const wchar_t characterString[], unsigned long characterStringLength) { wchar_t *characterStringClone = (wchar_t*) pointerAllocateMemory((characterStringLength + 1uL) * sizeof(wchar_t)); *(characterStringClone + characterStringLength) = L'\0'; while (characterStringLength) { characterStringLength -= 1uL; *(characterStringClone + characterStringLength) = *(characterString + characterStringLength); } *characterStringClone = *characterString; return characterStringClone; }
        wchar_t* stringClone(const wchar_t characterString[]) { return stringClone(characterString, stringLength(characterString)); }
        wchar_t* stringClone(wchar_t characterString[], unsigned long characterStringLength) { return stringClone((const wchar_t*) characterString, characterStringLength); }
        wchar_t* stringClone(wchar_t characterString[]) { return stringClone((const wchar_t*) characterString, stringLength(characterString)); }

        // Copy
        char*& stringCopy(char*& characterString, char characterStringCopy[]) { return (characterString = stringClone(characterStringCopy)); }
        char*& stringCopy(char*& characterString, const char characterStringCopy[]) { return (characterString = stringClone(characterStringCopy)); }
        char*& stringCopy(char*& characterString, char characterStringCopy[], const unsigned long characterStringCopyLength) { return (characterString = stringClone(characterStringCopy, characterStringCopyLength)); }
        char*& stringCopy(char*& characterString, const char characterStringCopy[], const unsigned long characterStringCopyLength) { return (characterString = stringClone(characterStringCopy, characterStringCopyLength)); }

        char8_t*& stringCopy(char8_t*& characterString, char8_t characterStringCopy[]) { return (characterString = stringClone(characterStringCopy)); }
        char8_t*& stringCopy(char8_t*& characterString, const char8_t characterStringCopy[]) { return (characterString = stringClone(characterStringCopy)); }
        char8_t*& stringCopy(char8_t*& characterString, char8_t characterStringCopy[], const unsigned long characterStringCopyLength) { return (characterString = stringClone(characterStringCopy, characterStringCopyLength)); }
        char8_t*& stringCopy(char8_t*& characterString, const char8_t characterStringCopy[], const unsigned long characterStringCopyLength) { return (characterString = stringClone(characterStringCopy, characterStringCopyLength)); }

        char16_t*& stringCopy(char16_t*& characterString, char16_t characterStringCopy[]) { return (characterString = stringClone(characterStringCopy)); }
        char16_t*& stringCopy(char16_t*& characterString, const char16_t characterStringCopy[]) { return (characterString = stringClone(characterStringCopy)); }
        char16_t*& stringCopy(char16_t*& characterString, char16_t characterStringCopy[], const unsigned long characterStringCopyLength) { return (characterString = stringClone(characterStringCopy, characterStringCopyLength)); }
        char16_t*& stringCopy(char16_t*& characterString, const char16_t characterStringCopy[], const unsigned long characterStringCopyLength) { return (characterString = stringClone(characterStringCopy, characterStringCopyLength)); }

        char32_t*& stringCopy(char32_t*& characterString, char32_t characterStringCopy[]) { return (characterString = stringClone(characterStringCopy)); }
        char32_t*& stringCopy(char32_t*& characterString, const char32_t characterStringCopy[]) { return (characterString = stringClone(characterStringCopy)); }
        char32_t*& stringCopy(char32_t*& characterString, char32_t characterStringCopy[], const unsigned long characterStringCopyLength) { return (characterString = stringClone(characterStringCopy, characterStringCopyLength)); }
        char32_t*& stringCopy(char32_t*& characterString, const char32_t characterStringCopy[], const unsigned long characterStringCopyLength) { return (characterString = stringClone(characterStringCopy, characterStringCopyLength)); }

        signed char*& stringCopy(signed char*& characterString, signed char characterStringCopy[]) { return (characterString = stringClone(characterStringCopy)); }
        signed char*& stringCopy(signed char*& characterString, const signed char characterStringCopy[]) { return (characterString = stringClone(characterStringCopy)); }
        signed char*& stringCopy(signed char*& characterString, signed char characterStringCopy[], const unsigned long characterStringCopyLength) { return (characterString = stringClone(characterStringCopy, characterStringCopyLength)); }
        signed char*& stringCopy(signed char*& characterString, const signed char characterStringCopy[], const unsigned long characterStringCopyLength) { return (characterString = stringClone(characterStringCopy, characterStringCopyLength)); }

        unsigned char*& stringCopy(unsigned char*& characterString, unsigned char characterStringCopy[]) { return (characterString = stringClone(characterStringCopy)); }
        unsigned char*& stringCopy(unsigned char*& characterString, const unsigned char characterStringCopy[]) { return (characterString = stringClone(characterStringCopy)); }
        unsigned char*& stringCopy(unsigned char*& characterString, unsigned char characterStringCopy[], const unsigned long characterStringCopyLength) { return (characterString = stringClone(characterStringCopy, characterStringCopyLength)); }
        unsigned char*& stringCopy(unsigned char*& characterString, const unsigned char characterStringCopy[], const unsigned long characterStringCopyLength) { return (characterString = stringClone(characterStringCopy, characterStringCopyLength)); }

        wchar_t*& stringCopy(wchar_t*& characterString, wchar_t characterStringCopy[]) { return (characterString = stringClone(characterStringCopy)); }
        wchar_t*& stringCopy(wchar_t*& characterString, const wchar_t characterStringCopy[]) { return (characterString = stringClone(characterStringCopy)); }
        wchar_t*& stringCopy(wchar_t*& characterString, wchar_t characterStringCopy[], const unsigned long characterStringCopyLength) { return (characterString = stringClone(characterStringCopy, characterStringCopyLength)); }
        wchar_t*& stringCopy(wchar_t*& characterString, const wchar_t characterStringCopy[], const unsigned long characterStringCopyLength) { return (characterString = stringClone(characterStringCopy, characterStringCopyLength)); }

        // Create ... String
        char* stringCreateCharacterString(char characterString[]) { return stringClone(characterString); } const char* stringCreateCharacterString(const char characterString[]) { return stringClone(characterString); }
        char8_t* stringCreateCharacterString(char8_t characterString[]) { return stringClone(characterString); } const char8_t* stringCreateCharacterString(const char8_t characterString[]) { return stringClone(characterString); }
        char16_t* stringCreateCharacterString(char16_t characterString[]) { return stringClone(characterString); } const char16_t* stringCreateCharacterString(const char16_t characterString[]) { return stringClone(characterString); }
        char32_t* stringCreateCharacterString(char32_t characterString[]) { return stringClone(characterString); } const char32_t* stringCreateCharacterString(const char32_t characterString[]) { return stringClone(characterString); }
        signed char* stringCreateCharacterString(signed char characterString[]) { return stringClone(characterString); } const signed char* stringCreateCharacterString(const signed char characterString[]) { return stringClone(characterString); }
        unsigned char* stringCreateCharacterString(unsigned char characterString[]) { return stringClone(characterString); } const unsigned char* stringCreateCharacterString(const unsigned char characterString[]) { return stringClone(characterString); }
        wchar_t* stringCreateCharacterString(wchar_t characterString[]) { return stringClone(characterString); } const wchar_t* stringCreateCharacterString(const wchar_t characterString[]) { return stringClone(characterString); }

        char* stringCreateCharacterString(unsigned long characterStringLength) { char *characterString = (char*) pointerAllocateMemory((characterStringLength + 1uL) * sizeof(char)); *characterString = *(characterString + characterStringLength) = '\0'; while (characterStringLength) { characterStringLength -= 1uL; *(characterString + characterStringLength) = '\0'; } return characterString; }
        char8_t* stringCreateUTF8String(unsigned long characterStringLength) { char8_t *characterString = (char8_t*) pointerAllocateMemory((characterStringLength + 1uL) * sizeof(char8_t)); *characterString = *(characterString + characterStringLength) = 0; while (characterStringLength) { characterStringLength -= 1uL; *(characterString + characterStringLength) = 0; } return characterString; }
        char16_t* stringCreateUTF16String(unsigned long characterStringLength) { char16_t *characterString = (char16_t*) pointerAllocateMemory((characterStringLength + 1uL) * sizeof(char16_t)); *characterString = *(characterString + characterStringLength) = u'\0'; while (characterStringLength) { characterStringLength -= 1uL; *(characterString + characterStringLength) = u'\0'; } return characterString; }
        char32_t* stringCreateUTF32String(unsigned long characterStringLength) { char32_t *characterString = (char32_t*) pointerAllocateMemory((characterStringLength + 1uL) * sizeof(char32_t)); *characterString = *(characterString + characterStringLength) = U'\0'; while (characterStringLength) { characterStringLength -= 1uL; *(characterString + characterStringLength) = U'\0'; } return characterString; }
        signed char* stringCreateSignedCharacterString(unsigned long characterStringLength) { signed char *characterString = (signed char*) pointerAllocateMemory((characterStringLength + 1uL) * sizeof(signed char)); *characterString = *(characterString + characterStringLength) = '\0'; while (characterStringLength) { characterStringLength -= 1uL; *(characterString + characterStringLength) = '\0'; } return characterString; }
        unsigned char* stringCreateUnsignedCharacterString(unsigned long characterStringLength) { unsigned char *characterString = (unsigned char*) pointerAllocateMemory((characterStringLength + 1uL) * sizeof(unsigned char)); *characterString = *(characterString + characterStringLength) = '\0'; while (characterStringLength) { characterStringLength -= 1uL; *(characterString + characterStringLength) = '\0'; } return characterString; }
        wchar_t* stringCreateWideCharacterString(unsigned long characterStringLength) { wchar_t *characterString = (wchar_t*) pointerAllocateMemory((characterStringLength + 1uL) * sizeof(wchar_t)); *characterString = *(characterString + characterStringLength) = L'\0'; while (characterStringLength) { characterStringLength -= 1uL; *(characterString + characterStringLength) = L'\0'; } return characterString; }

        // Resize
        char*& stringResize(char*& characterString, const unsigned long characterStringLength) { characterString = pointerReallocateMemory(characterString, (characterStringLength + 1uL) * sizeof(char)); *(characterString + characterStringLength) = '\0'; return characterString; }
        char8_t*& stringResize(char8_t*& characterString, const unsigned long characterStringLength) { characterString = pointerReallocateMemory(characterString, (characterStringLength + 1uL) * sizeof(char8_t)); *(characterString + characterStringLength) = 0; return characterString; }
        char16_t*& stringResize(char16_t*& characterString, const unsigned long characterStringLength) { characterString = pointerReallocateMemory(characterString, (characterStringLength + 1uL) * sizeof(char16_t)); *(characterString + characterStringLength) = u'\0'; return characterString; }
        char32_t*& stringResize(char32_t*& characterString, const unsigned long characterStringLength) { characterString = pointerReallocateMemory(characterString, (characterStringLength + 1uL) * sizeof(char32_t)); *(characterString + characterStringLength) = U'\0'; return characterString; }
        signed char*& stringResize(signed char*& characterString, const unsigned long characterStringLength) { characterString = pointerReallocateMemory(characterString, (characterStringLength + 1uL) * sizeof(signed char)); *(characterString + characterStringLength) = '\0'; return characterString; }
        unsigned char*& stringResize(unsigned char*& characterString, const unsigned long characterStringLength) { characterString = pointerReallocateMemory(characterString, (characterStringLength + 1uL) * sizeof(unsigned char)); *(characterString + characterStringLength) = '\0'; return characterString; }
        wchar_t*& stringResize(wchar_t*& characterString, const unsigned long characterStringLength) { characterString = pointerReallocateMemory(characterString, (characterStringLength + 1uL) * sizeof(wchar_t)); *(characterString + characterStringLength) = L'\0'; return characterString; }

        // Source Concatenate
        char*& stringSourceConcatenate(char*& characterString, char characterStringConcatenation[], const unsigned long characterStringLength, unsigned long characterStringConcatenationLength) { stringResize(characterString, characterStringConcatenationLength + characterStringLength); while (characterStringConcatenationLength) { characterStringConcatenationLength -= 1uL; *(characterString + characterStringConcatenationLength + characterStringLength) = *(characterStringConcatenation + characterStringConcatenationLength); } *(characterString + characterStringLength) = *characterStringConcatenation; return characterString; }
        char*& stringSourceConcatenate(char*& characterString, char characterStringConcatenation[], const unsigned long characterStringLength) { return stringSourceConcatenate(characterString, characterStringConcatenation, characterStringLength, stringLength(characterStringConcatenation)); }
        char*& stringSourceConcatenate(char*& characterString, char characterStringConcatenation[]) { return stringSourceConcatenate(characterString, characterStringConcatenation, stringLength(characterString), stringLength(characterStringConcatenation)); }
        char*& stringSourceConcatenate(char*& characterString, const char characterStringConcatenation[], const unsigned long characterStringLength, const unsigned long characterStringConcatenationLength) { return stringSourceConcatenate(characterString, (char*) characterStringConcatenation, characterStringLength, characterStringConcatenationLength); }
        char*& stringSourceConcatenate(char*& characterString, const char characterStringConcatenation[], const unsigned long characterStringLength) { return stringSourceConcatenate(characterString, (char*) characterStringConcatenation, characterStringLength, stringLength(characterStringConcatenation)); }
        char*& stringSourceConcatenate(char*& characterString, const char characterStringConcatenation[]) { return stringSourceConcatenate(characterString, (char*) characterStringConcatenation, stringLength(characterString), stringLength(characterStringConcatenation)); }

        char8_t*& stringSourceConcatenate(char8_t*& characterString, char8_t characterStringConcatenation[], const unsigned long characterStringLength, unsigned long characterStringConcatenationLength) { stringResize(characterString, characterStringConcatenationLength + characterStringLength); while (characterStringConcatenationLength) { characterStringConcatenationLength -= 1uL; *(characterString + characterStringConcatenationLength + characterStringLength) = *(characterStringConcatenation + characterStringConcatenationLength); } *(characterString + characterStringLength) = *characterStringConcatenation; return characterString; }
        char8_t*& stringSourceConcatenate(char8_t*& characterString, char8_t characterStringConcatenation[], const unsigned long characterStringLength) { return stringSourceConcatenate(characterString, characterStringConcatenation, characterStringLength, stringLength(characterStringConcatenation)); }
        char8_t*& stringSourceConcatenate(char8_t*& characterString, char8_t characterStringConcatenation[]) { return stringSourceConcatenate(characterString, characterStringConcatenation, stringLength(characterString), stringLength(characterStringConcatenation)); }
        char8_t*& stringSourceConcatenate(char8_t*& characterString, const char8_t characterStringConcatenation[], const unsigned long characterStringLength, const unsigned long characterStringConcatenationLength) { return stringSourceConcatenate(characterString, (char8_t*) characterStringConcatenation, characterStringLength, characterStringConcatenationLength); }
        char8_t*& stringSourceConcatenate(char8_t*& characterString, const char8_t characterStringConcatenation[], const unsigned long characterStringLength) { return stringSourceConcatenate(characterString, (char8_t*) characterStringConcatenation, characterStringLength, stringLength(characterStringConcatenation)); }
        char8_t*& stringSourceConcatenate(char8_t*& characterString, const char8_t characterStringConcatenation[]) { return stringSourceConcatenate(characterString, (char8_t*) characterStringConcatenation, stringLength(characterString), stringLength(characterStringConcatenation)); }

        char16_t*& stringSourceConcatenate(char16_t*& characterString, char16_t characterStringConcatenation[], const unsigned long characterStringLength, unsigned long characterStringConcatenationLength) { stringResize(characterString, characterStringConcatenationLength + characterStringLength); while (characterStringConcatenationLength) { characterStringConcatenationLength -= 1uL; *(characterString + characterStringConcatenationLength + characterStringLength) = *(characterStringConcatenation + characterStringConcatenationLength); } *(characterString + characterStringLength) = *characterStringConcatenation; return characterString; }
        char16_t*& stringSourceConcatenate(char16_t*& characterString, char16_t characterStringConcatenation[], const unsigned long characterStringLength) { return stringSourceConcatenate(characterString, characterStringConcatenation, characterStringLength, stringLength(characterStringConcatenation)); }
        char16_t*& stringSourceConcatenate(char16_t*& characterString, char16_t characterStringConcatenation[]) { return stringSourceConcatenate(characterString, characterStringConcatenation, stringLength(characterString), stringLength(characterStringConcatenation)); }
        char16_t*& stringSourceConcatenate(char16_t*& characterString, const char16_t characterStringConcatenation[], const unsigned long characterStringLength, const unsigned long characterStringConcatenationLength) { return stringSourceConcatenate(characterString, (char16_t*) characterStringConcatenation, characterStringLength, characterStringConcatenationLength); }
        char16_t*& stringSourceConcatenate(char16_t*& characterString, const char16_t characterStringConcatenation[], const unsigned long characterStringLength) { return stringSourceConcatenate(characterString, (char16_t*) characterStringConcatenation, characterStringLength, stringLength(characterStringConcatenation)); }
        char16_t*& stringSourceConcatenate(char16_t*& characterString, const char16_t characterStringConcatenation[]) { return stringSourceConcatenate(characterString, (char16_t*) characterStringConcatenation, stringLength(characterString), stringLength(characterStringConcatenation)); }

        char32_t*& stringSourceConcatenate(char32_t*& characterString, char32_t characterStringConcatenation[], const unsigned long characterStringLength, unsigned long characterStringConcatenationLength) { stringResize(characterString, characterStringConcatenationLength + characterStringLength); while (characterStringConcatenationLength) { characterStringConcatenationLength -= 1uL; *(characterString + characterStringConcatenationLength + characterStringLength) = *(characterStringConcatenation + characterStringConcatenationLength); } *(characterString + characterStringLength) = *characterStringConcatenation; return characterString; }
        char32_t*& stringSourceConcatenate(char32_t*& characterString, char32_t characterStringConcatenation[], const unsigned long characterStringLength) { return stringSourceConcatenate(characterString, characterStringConcatenation, characterStringLength, stringLength(characterStringConcatenation)); }
        char32_t*& stringSourceConcatenate(char32_t*& characterString, char32_t characterStringConcatenation[]) { return stringSourceConcatenate(characterString, characterStringConcatenation, stringLength(characterString), stringLength(characterStringConcatenation)); }
        char32_t*& stringSourceConcatenate(char32_t*& characterString, const char32_t characterStringConcatenation[], const unsigned long characterStringLength, const unsigned long characterStringConcatenationLength) { return stringSourceConcatenate(characterString, (char32_t*) characterStringConcatenation, characterStringLength, characterStringConcatenationLength); }
        char32_t*& stringSourceConcatenate(char32_t*& characterString, const char32_t characterStringConcatenation[], const unsigned long characterStringLength) { return stringSourceConcatenate(characterString, (char32_t*) characterStringConcatenation, characterStringLength, stringLength(characterStringConcatenation)); }
        char32_t*& stringSourceConcatenate(char32_t*& characterString, const char32_t characterStringConcatenation[]) { return stringSourceConcatenate(characterString, (char32_t*) characterStringConcatenation, stringLength(characterString), stringLength(characterStringConcatenation)); }

        signed char*& stringSourceConcatenate(signed char*& characterString, signed char characterStringConcatenation[], const unsigned long characterStringLength, unsigned long characterStringConcatenationLength) { stringResize(characterString, characterStringConcatenationLength + characterStringLength); while (characterStringConcatenationLength) { characterStringConcatenationLength -= 1uL; *(characterString + characterStringConcatenationLength + characterStringLength) = *(characterStringConcatenation + characterStringConcatenationLength); } *(characterString + characterStringLength) = *characterStringConcatenation; return characterString; }
        signed char*& stringSourceConcatenate(signed char*& characterString, signed char characterStringConcatenation[], const unsigned long characterStringLength) { return stringSourceConcatenate(characterString, characterStringConcatenation, characterStringLength, stringLength(characterStringConcatenation)); }
        signed char*& stringSourceConcatenate(signed char*& characterString, signed char characterStringConcatenation[]) { return stringSourceConcatenate(characterString, characterStringConcatenation, stringLength(characterString), stringLength(characterStringConcatenation)); }
        signed char*& stringSourceConcatenate(signed char*& characterString, const signed char characterStringConcatenation[], const unsigned long characterStringLength, const unsigned long characterStringConcatenationLength) { return stringSourceConcatenate(characterString, (signed char*) characterStringConcatenation, characterStringLength, characterStringConcatenationLength); }
        signed char*& stringSourceConcatenate(signed char*& characterString, const signed char characterStringConcatenation[], const unsigned long characterStringLength) { return stringSourceConcatenate(characterString, (signed char*) characterStringConcatenation, characterStringLength, stringLength(characterStringConcatenation)); }
        signed char*& stringSourceConcatenate(signed char*& characterString, const signed char characterStringConcatenation[]) { return stringSourceConcatenate(characterString, (signed char*) characterStringConcatenation, stringLength(characterString), stringLength(characterStringConcatenation)); }

        unsigned char*& stringSourceConcatenate(unsigned char*& characterString, unsigned char characterStringConcatenation[], const unsigned long characterStringLength, unsigned long characterStringConcatenationLength) { stringResize(characterString, characterStringConcatenationLength + characterStringLength); while (characterStringConcatenationLength) { characterStringConcatenationLength -= 1uL; *(characterString + characterStringConcatenationLength + characterStringLength) = *(characterStringConcatenation + characterStringConcatenationLength); } *(characterString + characterStringLength) = *characterStringConcatenation; return characterString; }
        unsigned char*& stringSourceConcatenate(unsigned char*& characterString, unsigned char characterStringConcatenation[], const unsigned long characterStringLength) { return stringSourceConcatenate(characterString, characterStringConcatenation, characterStringLength, stringLength(characterStringConcatenation)); }
        unsigned char*& stringSourceConcatenate(unsigned char*& characterString, unsigned char characterStringConcatenation[]) { return stringSourceConcatenate(characterString, characterStringConcatenation, stringLength(characterString), stringLength(characterStringConcatenation)); }
        unsigned char*& stringSourceConcatenate(unsigned char*& characterString, const unsigned char characterStringConcatenation[], const unsigned long characterStringLength, const unsigned long characterStringConcatenationLength) { return stringSourceConcatenate(characterString, (unsigned char*) characterStringConcatenation, characterStringLength, characterStringConcatenationLength); }
        unsigned char*& stringSourceConcatenate(unsigned char*& characterString, const unsigned char characterStringConcatenation[], const unsigned long characterStringLength) { return stringSourceConcatenate(characterString, (unsigned char*) characterStringConcatenation, characterStringLength, stringLength(characterStringConcatenation)); }
        unsigned char*& stringSourceConcatenate(unsigned char*& characterString, const unsigned char characterStringConcatenation[]) { return stringSourceConcatenate(characterString, (unsigned char*) characterStringConcatenation, stringLength(characterString), stringLength(characterStringConcatenation)); }

        wchar_t*& stringSourceConcatenate(wchar_t*& characterString, wchar_t characterStringConcatenation[], const unsigned long characterStringLength, unsigned long characterStringConcatenationLength) { stringResize(characterString, characterStringConcatenationLength + characterStringLength); while (characterStringConcatenationLength) { characterStringConcatenationLength -= 1uL; *(characterString + characterStringConcatenationLength + characterStringLength) = *(characterStringConcatenation + characterStringConcatenationLength); } *(characterString + characterStringLength) = *characterStringConcatenation; return characterString; }
        wchar_t*& stringSourceConcatenate(wchar_t*& characterString, wchar_t characterStringConcatenation[], const unsigned long characterStringLength) { return stringSourceConcatenate(characterString, characterStringConcatenation, characterStringLength, stringLength(characterStringConcatenation)); }
        wchar_t*& stringSourceConcatenate(wchar_t*& characterString, wchar_t characterStringConcatenation[]) { return stringSourceConcatenate(characterString, characterStringConcatenation, stringLength(characterString), stringLength(characterStringConcatenation)); }
        wchar_t*& stringSourceConcatenate(wchar_t*& characterString, const wchar_t characterStringConcatenation[], const unsigned long characterStringLength, const unsigned long characterStringConcatenationLength) { return stringSourceConcatenate(characterString, (wchar_t*) characterStringConcatenation, characterStringLength, characterStringConcatenationLength); }
        wchar_t*& stringSourceConcatenate(wchar_t*& characterString, const wchar_t characterStringConcatenation[], const unsigned long characterStringLength) { return stringSourceConcatenate(characterString, (wchar_t*) characterStringConcatenation, characterStringLength, stringLength(characterStringConcatenation)); }
        wchar_t*& stringSourceConcatenate(wchar_t*& characterString, const wchar_t characterStringConcatenation[]) { return stringSourceConcatenate(characterString, (wchar_t*) characterStringConcatenation, stringLength(characterString), stringLength(characterStringConcatenation)); }

        // Concatenate
        char* stringConcatenate(char characterStringA[], char characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { char *characterString = null; stringSourceConcatenate(characterString, characterStringA, 0uL, characterStringALength); stringSourceConcatenate(characterString, characterStringB, characterStringALength, characterStringBLength); return characterString; }
        char* stringConcatenate(char characterStringA[], char characterStringB[], const unsigned long characterStringALength) { return stringConcatenate(characterStringA, characterStringB, characterStringALength, stringLength(characterStringB)); }
        char* stringConcatenate(char characterStringA[], char characterStringB[]) { return stringConcatenate(characterStringA, characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        char* stringConcatenate(char characterStringA[], const char characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate(characterStringA, (char*) characterStringB, characterStringALength, characterStringBLength); }
        char* stringConcatenate(char characterStringA[], const char characterStringB[], const unsigned long characterStringALength) { return stringConcatenate(characterStringA, (char*) characterStringB, characterStringALength, stringLength(characterStringB)); }
        char* stringConcatenate(char characterStringA[], const char characterStringB[]) { return stringConcatenate(characterStringA, (char*) characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        char* stringConcatenate(const char characterStringA[], char characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate((char*) characterStringA, characterStringB, characterStringALength, characterStringBLength); }
        char* stringConcatenate(const char characterStringA[], char characterStringB[], const unsigned long characterStringALength) { return stringConcatenate((char*) characterStringA, characterStringB, characterStringALength, stringLength(characterStringB)); }
        char* stringConcatenate(const char characterStringA[], char characterStringB[]) { return stringConcatenate((char*) characterStringA, characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        char* stringConcatenate(const char characterStringA[], const char characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate((char*) characterStringA, (char*) characterStringB, characterStringALength, characterStringBLength); }
        char* stringConcatenate(const char characterStringA[], const char characterStringB[], const unsigned long characterStringALength) { return stringConcatenate((char*) characterStringA, (char*) characterStringB, characterStringALength, stringLength(characterStringB)); }
        char* stringConcatenate(const char characterStringA[], const char characterStringB[]) { return stringConcatenate((char*) characterStringA, (char*) characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }

        char8_t* stringConcatenate(char8_t characterStringA[], char8_t characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { char8_t *characterString = (char8_t*) (void*) null; stringSourceConcatenate(characterString, characterStringA, 0uL, characterStringALength); stringSourceConcatenate(characterString, characterStringB, characterStringALength, characterStringBLength); return characterString; }
        char8_t* stringConcatenate(char8_t characterStringA[], char8_t characterStringB[], const unsigned long characterStringALength) { return stringConcatenate(characterStringA, characterStringB, characterStringALength, stringLength(characterStringB)); }
        char8_t* stringConcatenate(char8_t characterStringA[], char8_t characterStringB[]) { return stringConcatenate(characterStringA, characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        char8_t* stringConcatenate(char8_t characterStringA[], const char8_t characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate(characterStringA, (char8_t*) characterStringB, characterStringALength, characterStringBLength); }
        char8_t* stringConcatenate(char8_t characterStringA[], const char8_t characterStringB[], const unsigned long characterStringALength) { return stringConcatenate(characterStringA, (char8_t*) characterStringB, characterStringALength, stringLength(characterStringB)); }
        char8_t* stringConcatenate(char8_t characterStringA[], const char8_t characterStringB[]) { return stringConcatenate(characterStringA, (char8_t*) characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        char8_t* stringConcatenate(const char8_t characterStringA[], char8_t characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate((char8_t*) characterStringA, characterStringB, characterStringALength, characterStringBLength); }
        char8_t* stringConcatenate(const char8_t characterStringA[], char8_t characterStringB[], const unsigned long characterStringALength) { return stringConcatenate((char8_t*) characterStringA, characterStringB, characterStringALength, stringLength(characterStringB)); }
        char8_t* stringConcatenate(const char8_t characterStringA[], char8_t characterStringB[]) { return stringConcatenate((char8_t*) characterStringA, characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        char8_t* stringConcatenate(const char8_t characterStringA[], const char8_t characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate((char8_t*) characterStringA, (char8_t*) characterStringB, characterStringALength, characterStringBLength); }
        char8_t* stringConcatenate(const char8_t characterStringA[], const char8_t characterStringB[], const unsigned long characterStringALength) { return stringConcatenate((char8_t*) characterStringA, (char8_t*) characterStringB, characterStringALength, stringLength(characterStringB)); }
        char8_t* stringConcatenate(const char8_t characterStringA[], const char8_t characterStringB[]) { return stringConcatenate((char8_t*) characterStringA, (char8_t*) characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }

        char16_t* stringConcatenate(char16_t characterStringA[], char16_t characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { char16_t *characterString = (char16_t*) (void*) null; stringSourceConcatenate(characterString, characterStringA, 0uL, characterStringALength); stringSourceConcatenate(characterString, characterStringB, characterStringALength, characterStringBLength); return characterString; }
        char16_t* stringConcatenate(char16_t characterStringA[], char16_t characterStringB[], const unsigned long characterStringALength) { return stringConcatenate(characterStringA, characterStringB, characterStringALength, stringLength(characterStringB)); }
        char16_t* stringConcatenate(char16_t characterStringA[], char16_t characterStringB[]) { return stringConcatenate(characterStringA, characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        char16_t* stringConcatenate(char16_t characterStringA[], const char16_t characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate(characterStringA, (char16_t*) characterStringB, characterStringALength, characterStringBLength); }
        char16_t* stringConcatenate(char16_t characterStringA[], const char16_t characterStringB[], const unsigned long characterStringALength) { return stringConcatenate(characterStringA, (char16_t*) characterStringB, characterStringALength, stringLength(characterStringB)); }
        char16_t* stringConcatenate(char16_t characterStringA[], const char16_t characterStringB[]) { return stringConcatenate(characterStringA, (char16_t*) characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        char16_t* stringConcatenate(const char16_t characterStringA[], char16_t characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate((char16_t*) characterStringA, characterStringB, characterStringALength, characterStringBLength); }
        char16_t* stringConcatenate(const char16_t characterStringA[], char16_t characterStringB[], const unsigned long characterStringALength) { return stringConcatenate((char16_t*) characterStringA, characterStringB, characterStringALength, stringLength(characterStringB)); }
        char16_t* stringConcatenate(const char16_t characterStringA[], char16_t characterStringB[]) { return stringConcatenate((char16_t*) characterStringA, characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        char16_t* stringConcatenate(const char16_t characterStringA[], const char16_t characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate((char16_t*) characterStringA, (char16_t*) characterStringB, characterStringALength, characterStringBLength); }
        char16_t* stringConcatenate(const char16_t characterStringA[], const char16_t characterStringB[], const unsigned long characterStringALength) { return stringConcatenate((char16_t*) characterStringA, (char16_t*) characterStringB, characterStringALength, stringLength(characterStringB)); }
        char16_t* stringConcatenate(const char16_t characterStringA[], const char16_t characterStringB[]) { return stringConcatenate((char16_t*) characterStringA, (char16_t*) characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }

        char32_t* stringConcatenate(char32_t characterStringA[], char32_t characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { char32_t *characterString = (char32_t*) (void*) null; stringSourceConcatenate(characterString, characterStringA, 0uL, characterStringALength); stringSourceConcatenate(characterString, characterStringB, characterStringALength, characterStringBLength); return characterString; }
        char32_t* stringConcatenate(char32_t characterStringA[], char32_t characterStringB[], const unsigned long characterStringALength) { return stringConcatenate(characterStringA, characterStringB, characterStringALength, stringLength(characterStringB)); }
        char32_t* stringConcatenate(char32_t characterStringA[], char32_t characterStringB[]) { return stringConcatenate(characterStringA, characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        char32_t* stringConcatenate(char32_t characterStringA[], const char32_t characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate(characterStringA, (char32_t*) characterStringB, characterStringALength, characterStringBLength); }
        char32_t* stringConcatenate(char32_t characterStringA[], const char32_t characterStringB[], const unsigned long characterStringALength) { return stringConcatenate(characterStringA, (char32_t*) characterStringB, characterStringALength, stringLength(characterStringB)); }
        char32_t* stringConcatenate(char32_t characterStringA[], const char32_t characterStringB[]) { return stringConcatenate(characterStringA, (char32_t*) characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        char32_t* stringConcatenate(const char32_t characterStringA[], char32_t characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate((char32_t*) characterStringA, characterStringB, characterStringALength, characterStringBLength); }
        char32_t* stringConcatenate(const char32_t characterStringA[], char32_t characterStringB[], const unsigned long characterStringALength) { return stringConcatenate((char32_t*) characterStringA, characterStringB, characterStringALength, stringLength(characterStringB)); }
        char32_t* stringConcatenate(const char32_t characterStringA[], char32_t characterStringB[]) { return stringConcatenate((char32_t*) characterStringA, characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        char32_t* stringConcatenate(const char32_t characterStringA[], const char32_t characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate((char32_t*) characterStringA, (char32_t*) characterStringB, characterStringALength, characterStringBLength); }
        char32_t* stringConcatenate(const char32_t characterStringA[], const char32_t characterStringB[], const unsigned long characterStringALength) { return stringConcatenate((char32_t*) characterStringA, (char32_t*) characterStringB, characterStringALength, stringLength(characterStringB)); }
        char32_t* stringConcatenate(const char32_t characterStringA[], const char32_t characterStringB[]) { return stringConcatenate((char32_t*) characterStringA, (char32_t*) characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }

        signed char* stringConcatenate(signed char characterStringA[], signed char characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { signed char *characterString = null; stringSourceConcatenate(characterString, characterStringA, 0uL, characterStringALength); stringSourceConcatenate(characterString, characterStringB, characterStringALength, characterStringBLength); return characterString; }
        signed char* stringConcatenate(signed char characterStringA[], signed char characterStringB[], const unsigned long characterStringALength) { return stringConcatenate(characterStringA, characterStringB, characterStringALength, stringLength(characterStringB)); }
        signed char* stringConcatenate(signed char characterStringA[], signed char characterStringB[]) { return stringConcatenate(characterStringA, characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        signed char* stringConcatenate(signed char characterStringA[], const signed char characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate(characterStringA, (signed char*) characterStringB, characterStringALength, characterStringBLength); }
        signed char* stringConcatenate(signed char characterStringA[], const signed char characterStringB[], const unsigned long characterStringALength) { return stringConcatenate(characterStringA, (signed char*) characterStringB, characterStringALength, stringLength(characterStringB)); }
        signed char* stringConcatenate(signed char characterStringA[], const signed char characterStringB[]) { return stringConcatenate(characterStringA, (signed char*) characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        signed char* stringConcatenate(const signed char characterStringA[], signed char characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate((signed char*) characterStringA, characterStringB, characterStringALength, characterStringBLength); }
        signed char* stringConcatenate(const signed char characterStringA[], signed char characterStringB[], const unsigned long characterStringALength) { return stringConcatenate((signed char*) characterStringA, characterStringB, characterStringALength, stringLength(characterStringB)); }
        signed char* stringConcatenate(const signed char characterStringA[], signed char characterStringB[]) { return stringConcatenate((signed char*) characterStringA, characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        signed char* stringConcatenate(const signed char characterStringA[], const signed char characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate((signed char*) characterStringA, (signed char*) characterStringB, characterStringALength, characterStringBLength); }
        signed char* stringConcatenate(const signed char characterStringA[], const signed char characterStringB[], const unsigned long characterStringALength) { return stringConcatenate((signed char*) characterStringA, (signed char*) characterStringB, characterStringALength, stringLength(characterStringB)); }
        signed char* stringConcatenate(const signed char characterStringA[], const signed char characterStringB[]) { return stringConcatenate((signed char*) characterStringA, (signed char*) characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }

        unsigned char* stringConcatenate(unsigned char characterStringA[], unsigned char characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { unsigned char *characterString = null; stringSourceConcatenate(characterString, characterStringA, 0uL, characterStringALength); stringSourceConcatenate(characterString, characterStringB, characterStringALength, characterStringBLength); return characterString; }
        unsigned char* stringConcatenate(unsigned char characterStringA[], unsigned char characterStringB[], const unsigned long characterStringALength) { return stringConcatenate(characterStringA, characterStringB, characterStringALength, stringLength(characterStringB)); }
        unsigned char* stringConcatenate(unsigned char characterStringA[], unsigned char characterStringB[]) { return stringConcatenate(characterStringA, characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        unsigned char* stringConcatenate(unsigned char characterStringA[], const unsigned char characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate(characterStringA, (unsigned char*) characterStringB, characterStringALength, characterStringBLength); }
        unsigned char* stringConcatenate(unsigned char characterStringA[], const unsigned char characterStringB[], const unsigned long characterStringALength) { return stringConcatenate(characterStringA, (unsigned char*) characterStringB, characterStringALength, stringLength(characterStringB)); }
        unsigned char* stringConcatenate(unsigned char characterStringA[], const unsigned char characterStringB[]) { return stringConcatenate(characterStringA, (unsigned char*) characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        unsigned char* stringConcatenate(const unsigned char characterStringA[], unsigned char characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate((unsigned char*) characterStringA, characterStringB, characterStringALength, characterStringBLength); }
        unsigned char* stringConcatenate(const unsigned char characterStringA[], unsigned char characterStringB[], const unsigned long characterStringALength) { return stringConcatenate((unsigned char*) characterStringA, characterStringB, characterStringALength, stringLength(characterStringB)); }
        unsigned char* stringConcatenate(const unsigned char characterStringA[], unsigned char characterStringB[]) { return stringConcatenate((unsigned char*) characterStringA, characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        unsigned char* stringConcatenate(const unsigned char characterStringA[], const unsigned char characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate((unsigned char*) characterStringA, (unsigned char*) characterStringB, characterStringALength, characterStringBLength); }
        unsigned char* stringConcatenate(const unsigned char characterStringA[], const unsigned char characterStringB[], const unsigned long characterStringALength) { return stringConcatenate((unsigned char*) characterStringA, (unsigned char*) characterStringB, characterStringALength, stringLength(characterStringB)); }
        unsigned char* stringConcatenate(const unsigned char characterStringA[], const unsigned char characterStringB[]) { return stringConcatenate((unsigned char*) characterStringA, (unsigned char*) characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }

        wchar_t* stringConcatenate(wchar_t characterStringA[], wchar_t characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { wchar_t *characterString = (wchar_t*) (void*) null; stringSourceConcatenate(characterString, characterStringA, 0uL, characterStringALength); stringSourceConcatenate(characterString, characterStringB, characterStringALength, characterStringBLength); return characterString; }
        wchar_t* stringConcatenate(wchar_t characterStringA[], wchar_t characterStringB[], const unsigned long characterStringALength) { return stringConcatenate(characterStringA, characterStringB, characterStringALength, stringLength(characterStringB)); }
        wchar_t* stringConcatenate(wchar_t characterStringA[], wchar_t characterStringB[]) { return stringConcatenate(characterStringA, characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        wchar_t* stringConcatenate(wchar_t characterStringA[], const wchar_t characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate(characterStringA, (wchar_t*) characterStringB, characterStringALength, characterStringBLength); }
        wchar_t* stringConcatenate(wchar_t characterStringA[], const wchar_t characterStringB[], const unsigned long characterStringALength) { return stringConcatenate(characterStringA, (wchar_t*) characterStringB, characterStringALength, stringLength(characterStringB)); }
        wchar_t* stringConcatenate(wchar_t characterStringA[], const wchar_t characterStringB[]) { return stringConcatenate(characterStringA, (wchar_t*) characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        wchar_t* stringConcatenate(const wchar_t characterStringA[], wchar_t characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate((wchar_t*) characterStringA, characterStringB, characterStringALength, characterStringBLength); }
        wchar_t* stringConcatenate(const wchar_t characterStringA[], wchar_t characterStringB[], const unsigned long characterStringALength) { return stringConcatenate((wchar_t*) characterStringA, characterStringB, characterStringALength, stringLength(characterStringB)); }
        wchar_t* stringConcatenate(const wchar_t characterStringA[], wchar_t characterStringB[]) { return stringConcatenate((wchar_t*) characterStringA, characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
        wchar_t* stringConcatenate(const wchar_t characterStringA[], const wchar_t characterStringB[], const unsigned long characterStringALength, const unsigned long characterStringBLength) { return stringConcatenate((wchar_t*) characterStringA, (wchar_t*) characterStringB, characterStringALength, characterStringBLength); }
        wchar_t* stringConcatenate(const wchar_t characterStringA[], const wchar_t characterStringB[], const unsigned long characterStringALength) { return stringConcatenate((wchar_t*) characterStringA, (wchar_t*) characterStringB, characterStringALength, stringLength(characterStringB)); }
        wchar_t* stringConcatenate(const wchar_t characterStringA[], const wchar_t characterStringB[]) { return stringConcatenate((wchar_t*) characterStringA, (wchar_t*) characterStringB, stringLength(characterStringA), stringLength(characterStringB)); }
