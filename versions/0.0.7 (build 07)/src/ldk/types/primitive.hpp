/* ... --- NOTE (Lapys) -> Guard against re-implementing this source into the same environment. */
#ifndef LAPYS
    /* Definition > Primitive
            --- NOTE (Lapys) -> Small container for all native plain or POD types.
            --- WARN (Lapys) ->
                - Does not store pointers.
                - Non-performant in run-time arithmetic.
                - Only use within restricted environments (e.g.: function parameters as an abstraction for the 17+ native types).
    */
    typedef struct primitive {
        // ...
        friend LapysDevelopmentKit::Types::boolean;
        friend LapysDevelopmentKit::Types::object;
        friend LapysDevelopmentKit::Types::size;

        // [...]
        private:
            // Initialization > (Type, Value)
            enum : unsigned char {integral_type, rational_type} type : 8u;
            const void *value;

        // [...]
        protected:
            /* Definition > ... --- NOTE (Lapys) -> Abstraction for the biggest types of each distinct type of data to prevent information corruption or slicing. */
            typedef long double rational;
            typedef long long integral;

            typedef long double plain; // NOTE (Lapys) -> Represents all (abstracted) types.

            /* Phases > (Initiate, Terminate) */
            void initiate(const boolean argument) { this -> type = this -> integral_type; pointer__allocate_memory(this -> value, sizeof(integral)); *((integral*) this -> value) = argument; }
            void initiate(const char argument) { this -> type = this -> integral_type; pointer__allocate_memory(this -> value, sizeof(integral)); *((integral*) this -> value) = argument; }
            void initiate(const char8_t argument) { this -> type = this -> integral_type; pointer__allocate_memory(this -> value, sizeof(integral)); *((integral*) this -> value) = argument; }
            void initiate(const char16_t argument) { this -> type = this -> integral_type; pointer__allocate_memory(this -> value, sizeof(integral)); *((integral*) this -> value) = argument; }
            void initiate(const char32_t argument) { this -> type = this -> integral_type; pointer__allocate_memory(this -> value, sizeof(integral)); *((integral*) this -> value) = argument; }
            void initiate(const double argument) { this -> type = this -> rational_type; pointer__allocate_memory(this -> value, sizeof(rational)); *((rational*) this -> value) = argument; }
            void initiate(const float argument) { this -> type = this -> rational_type; pointer__allocate_memory(this -> value, sizeof(rational)); *((rational*) this -> value) = argument; }
            void initiate(const int argument) { this -> type = this -> integral_type; pointer__allocate_memory(this -> value, sizeof(integral)); *((integral*) this -> value) = argument; }
            void initiate(const long argument) { this -> type = this -> integral_type; pointer__allocate_memory(this -> value, sizeof(integral)); *((integral*) this -> value) = argument; }
            void initiate(const long double argument) { this -> type = this -> rational_type; pointer__allocate_memory(this -> value, sizeof(rational)); *((rational*) this -> value) = argument; }
            void initiate(const long long argument) { this -> type = this -> integral_type; pointer__allocate_memory(this -> value, sizeof(integral)); *((integral*) this -> value) = argument; }
            void initiate(const short argument) { this -> type = this -> integral_type; pointer__allocate_memory(this -> value, sizeof(integral)); *((integral*) this -> value) = argument; }
            void initiate(const signed char argument) { this -> type = this -> integral_type; pointer__allocate_memory(this -> value, sizeof(integral)); *((integral*) this -> value) = argument; }
            void initiate(const unsigned char argument) { this -> type = this -> integral_type; pointer__allocate_memory(this -> value, sizeof(integral)); *((integral*) this -> value) = argument; }
            void initiate(const unsigned int argument) { this -> type = this -> integral_type; pointer__allocate_memory(this -> value, sizeof(integral)); *((integral*) this -> value) = argument; }
            void initiate(const unsigned long argument) { this -> type = this -> integral_type; pointer__allocate_memory(this -> value, sizeof(integral)); *((integral*) this -> value) = argument; }
            void initiate(const unsigned long long argument) { this -> type = this -> integral_type; pointer__allocate_memory(this -> value, sizeof(integral)); *((integral*) this -> value) = argument; }
            void initiate(const unsigned short argument) { this -> type = this -> integral_type; pointer__allocate_memory(this -> value, sizeof(integral)); *((integral*) this -> value) = argument; }
            void initiate(const wchar_t argument) { this -> type = this -> integral_type; pointer__allocate_memory(this -> value, sizeof(integral)); *((integral*) this -> value) = argument; }
            void initiate(const primitive& argument) { switch (argument.type) { case argument.integral_type: this -> initiate(*((integral*) argument.value)); break; case argument.rational_type: this -> initiate(*((rational*) argument.value)); break; } }

            void terminate() { pointer__free_memory(this -> value); }

        // [...]
        public:
            // [Constructor]
            inline primitive() : value{NULL} {}
            primitive(const boolean argument) { this -> initiate(argument); }
            primitive(const char argument) { this -> initiate(argument); }
            primitive(const char8_t argument) { this -> initiate(argument); }
            primitive(const char16_t argument) { this -> initiate(argument); }
            primitive(const char32_t argument) { this -> initiate(argument); }
            primitive(const double argument) { this -> initiate(argument); }
            primitive(const float argument) { this -> initiate(argument); }
            primitive(const int argument) { this -> initiate(argument); }
            primitive(const long argument) { this -> initiate(argument); }
            primitive(const long double argument) { this -> initiate(argument); }
            primitive(const long long argument) { this -> initiate(argument); }
            primitive(const short argument) { this -> initiate(argument); }
            primitive(const signed char argument) { this -> initiate(argument); }
            primitive(const unsigned char argument) { this -> initiate(argument); }
            primitive(const unsigned int argument) { this -> initiate(argument); }
            primitive(const unsigned long argument) { this -> initiate(argument); }
            primitive(const unsigned long long argument) { this -> initiate(argument); }
            primitive(const unsigned short argument) { this -> initiate(argument); }
            primitive(const wchar_t argument) { this -> initiate(argument); }

            primitive(primitive& argument) { this -> initiate((const primitive&) argument); }
            primitive(primitive&& argument) { this -> initiate((const primitive&) argument); }
            primitive(const primitive& argument) { this -> initiate(argument); }
            primitive(const primitive&& argument) { this -> initiate((const primitive&) argument); }

            primitive(size&); primitive(size&&); primitive(const size&); primitive(const size&&);

            // [Destructor]
            ~primitive() { this -> terminate(); }

            // [Operator] --- NOTE (Lapys) -> Integer arithmetic forcefully coerces non-integral types to integers before operation.
                // [+]
                primitive operator +(const boolean argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) + argument; case this -> rational_type: return *((rational*) this -> value) + argument; } return primitive(); }
                friend primitive operator +(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                primitive operator +(const char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) + argument; case this -> rational_type: return *((rational*) this -> value) + argument; } return primitive(); }
                friend primitive operator +(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                primitive operator +(const char8_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) + argument; case this -> rational_type: return *((rational*) this -> value) + argument; } return primitive(); }
                friend primitive operator +(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                primitive operator +(const char16_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) + argument; case this -> rational_type: return *((rational*) this -> value) + argument; } return primitive(); }
                friend primitive operator +(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                primitive operator +(const char32_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) + argument; case this -> rational_type: return *((rational*) this -> value) + argument; } return primitive(); }
                friend primitive operator +(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                primitive operator +(const double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) + argument; case this -> rational_type: return *((rational*) this -> value) + argument; } return primitive(); }
                friend primitive operator +(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                primitive operator +(const float argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) + argument; case this -> rational_type: return *((rational*) this -> value) + argument; } return primitive(); }
                friend primitive operator +(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                primitive operator +(const int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) + argument; case this -> rational_type: return *((rational*) this -> value) + argument; } return primitive(); }
                friend primitive operator +(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                primitive operator +(const long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) + argument; case this -> rational_type: return *((rational*) this -> value) + argument; } return primitive(); }
                friend primitive operator +(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                primitive operator +(const long double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) + argument; case this -> rational_type: return *((rational*) this -> value) + argument; } return primitive(); }
                friend primitive operator +(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                primitive operator +(const long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) + argument; case this -> rational_type: return *((rational*) this -> value) + argument; } return primitive(); }
                friend primitive operator +(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                primitive operator +(const short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) + argument; case this -> rational_type: return *((rational*) this -> value) + argument; } return primitive(); }
                friend primitive operator +(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                primitive operator +(const signed char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) + argument; case this -> rational_type: return *((rational*) this -> value) + argument; } return primitive(); }
                friend primitive operator +(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                primitive operator +(const unsigned char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) + argument; case this -> rational_type: return *((rational*) this -> value) + argument; } return primitive(); }
                friend primitive operator +(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                primitive operator +(const unsigned int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) + argument; case this -> rational_type: return *((rational*) this -> value) + argument; } return primitive(); }
                friend primitive operator +(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                primitive operator +(const unsigned long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) + argument; case this -> rational_type: return *((rational*) this -> value) + argument; } return primitive(); }
                friend primitive operator +(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                primitive operator +(const unsigned long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) + argument; case this -> rational_type: return *((rational*) this -> value) + argument; } return primitive(); }
                friend primitive operator +(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                primitive operator +(const unsigned short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) + argument; case this -> rational_type: return *((rational*) this -> value) + argument; } return primitive(); }
                friend primitive operator +(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                primitive operator +(const wchar_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) + argument; case this -> rational_type: return *((rational*) this -> value) + argument; } return primitive(); }
                friend primitive operator +(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator +(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA + *((integral*) argumentB.value); case argumentB.rational_type: return argumentA + *((rational*) argumentB.value); } return primitive(); }

                primitive operator +(primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) + *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) + *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) + *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) + *((rational*) argument.value); } } return primitive(); }
                primitive operator +(primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) + *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) + *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) + *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) + *((rational*) argument.value); } } return primitive(); }
                primitive operator +(const primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) + *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) + *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) + *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) + *((rational*) argument.value); } } return primitive(); }
                primitive operator +(const primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) + *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) + *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) + *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) + *((rational*) argument.value); } } return primitive(); }

                // [-]
                primitive operator -(const boolean argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) - argument; case this -> rational_type: return *((rational*) this -> value) - argument; } return primitive(); }
                friend primitive operator -(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                primitive operator -(const char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) - argument; case this -> rational_type: return *((rational*) this -> value) - argument; } return primitive(); }
                friend primitive operator -(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                primitive operator -(const char8_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) - argument; case this -> rational_type: return *((rational*) this -> value) - argument; } return primitive(); }
                friend primitive operator -(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                primitive operator -(const char16_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) - argument; case this -> rational_type: return *((rational*) this -> value) - argument; } return primitive(); }
                friend primitive operator -(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                primitive operator -(const char32_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) - argument; case this -> rational_type: return *((rational*) this -> value) - argument; } return primitive(); }
                friend primitive operator -(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                primitive operator -(const double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) - argument; case this -> rational_type: return *((rational*) this -> value) - argument; } return primitive(); }
                friend primitive operator -(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                primitive operator -(const float argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) - argument; case this -> rational_type: return *((rational*) this -> value) - argument; } return primitive(); }
                friend primitive operator -(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                primitive operator -(const int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) - argument; case this -> rational_type: return *((rational*) this -> value) - argument; } return primitive(); }
                friend primitive operator -(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                primitive operator -(const long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) - argument; case this -> rational_type: return *((rational*) this -> value) - argument; } return primitive(); }
                friend primitive operator -(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                primitive operator -(const long double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) - argument; case this -> rational_type: return *((rational*) this -> value) - argument; } return primitive(); }
                friend primitive operator -(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                primitive operator -(const long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) - argument; case this -> rational_type: return *((rational*) this -> value) - argument; } return primitive(); }
                friend primitive operator -(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                primitive operator -(const short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) - argument; case this -> rational_type: return *((rational*) this -> value) - argument; } return primitive(); }
                friend primitive operator -(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                primitive operator -(const signed char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) - argument; case this -> rational_type: return *((rational*) this -> value) - argument; } return primitive(); }
                friend primitive operator -(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                primitive operator -(const unsigned char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) - argument; case this -> rational_type: return *((rational*) this -> value) - argument; } return primitive(); }
                friend primitive operator -(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                primitive operator -(const unsigned int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) - argument; case this -> rational_type: return *((rational*) this -> value) - argument; } return primitive(); }
                friend primitive operator -(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                primitive operator -(const unsigned long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) - argument; case this -> rational_type: return *((rational*) this -> value) - argument; } return primitive(); }
                friend primitive operator -(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                primitive operator -(const unsigned long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) - argument; case this -> rational_type: return *((rational*) this -> value) - argument; } return primitive(); }
                friend primitive operator -(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                primitive operator -(const unsigned short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) - argument; case this -> rational_type: return *((rational*) this -> value) - argument; } return primitive(); }
                friend primitive operator -(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                primitive operator -(const wchar_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) - argument; case this -> rational_type: return *((rational*) this -> value) - argument; } return primitive(); }
                friend primitive operator -(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator -(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA - *((integral*) argumentB.value); case argumentB.rational_type: return argumentA - *((rational*) argumentB.value); } return primitive(); }

                primitive operator -(primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) - *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) - *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) - *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) - *((rational*) argument.value); } } return primitive(); }
                primitive operator -(primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) - *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) - *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) - *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) - *((rational*) argument.value); } } return primitive(); }
                primitive operator -(const primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) - *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) - *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) - *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) - *((rational*) argument.value); } } return primitive(); }
                primitive operator -(const primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) - *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) - *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) - *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) - *((rational*) argument.value); } } return primitive(); }

                // [*]
                primitive operator *(const boolean argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) * argument; case this -> rational_type: return *((rational*) this -> value) * argument; } return primitive(); }
                friend primitive operator *(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                primitive operator *(const char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) * argument; case this -> rational_type: return *((rational*) this -> value) * argument; } return primitive(); }
                friend primitive operator *(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                primitive operator *(const char8_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) * argument; case this -> rational_type: return *((rational*) this -> value) * argument; } return primitive(); }
                friend primitive operator *(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                primitive operator *(const char16_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) * argument; case this -> rational_type: return *((rational*) this -> value) * argument; } return primitive(); }
                friend primitive operator *(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                primitive operator *(const char32_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) * argument; case this -> rational_type: return *((rational*) this -> value) * argument; } return primitive(); }
                friend primitive operator *(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                primitive operator *(const double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) * argument; case this -> rational_type: return *((rational*) this -> value) * argument; } return primitive(); }
                friend primitive operator *(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                primitive operator *(const float argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) * argument; case this -> rational_type: return *((rational*) this -> value) * argument; } return primitive(); }
                friend primitive operator *(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                primitive operator *(const int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) * argument; case this -> rational_type: return *((rational*) this -> value) * argument; } return primitive(); }
                friend primitive operator *(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                primitive operator *(const long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) * argument; case this -> rational_type: return *((rational*) this -> value) * argument; } return primitive(); }
                friend primitive operator *(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                primitive operator *(const long double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) * argument; case this -> rational_type: return *((rational*) this -> value) * argument; } return primitive(); }
                friend primitive operator *(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                primitive operator *(const long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) * argument; case this -> rational_type: return *((rational*) this -> value) * argument; } return primitive(); }
                friend primitive operator *(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                primitive operator *(const short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) * argument; case this -> rational_type: return *((rational*) this -> value) * argument; } return primitive(); }
                friend primitive operator *(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                primitive operator *(const signed char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) * argument; case this -> rational_type: return *((rational*) this -> value) * argument; } return primitive(); }
                friend primitive operator *(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                primitive operator *(const unsigned char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) * argument; case this -> rational_type: return *((rational*) this -> value) * argument; } return primitive(); }
                friend primitive operator *(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                primitive operator *(const unsigned int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) * argument; case this -> rational_type: return *((rational*) this -> value) * argument; } return primitive(); }
                friend primitive operator *(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                primitive operator *(const unsigned long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) * argument; case this -> rational_type: return *((rational*) this -> value) * argument; } return primitive(); }
                friend primitive operator *(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                primitive operator *(const unsigned long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) * argument; case this -> rational_type: return *((rational*) this -> value) * argument; } return primitive(); }
                friend primitive operator *(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                primitive operator *(const unsigned short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) * argument; case this -> rational_type: return *((rational*) this -> value) * argument; } return primitive(); }
                friend primitive operator *(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                primitive operator *(const wchar_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) * argument; case this -> rational_type: return *((rational*) this -> value) * argument; } return primitive(); }
                friend primitive operator *(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator *(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA * *((integral*) argumentB.value); case argumentB.rational_type: return argumentA * *((rational*) argumentB.value); } return primitive(); }

                primitive operator *(primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) * *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) * *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) * *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) * *((rational*) argument.value); } } return primitive(); }
                primitive operator *(primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) * *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) * *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) * *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) * *((rational*) argument.value); } } return primitive(); }
                primitive operator *(const primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) * *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) * *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) * *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) * *((rational*) argument.value); } } return primitive(); }
                primitive operator *(const primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) * *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) * *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) * *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) * *((rational*) argument.value); } } return primitive(); }

                // [/]
                primitive operator /(const boolean argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) / argument; case this -> rational_type: return *((rational*) this -> value) / argument; } return primitive(); }
                friend primitive operator /(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                primitive operator /(const char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) / argument; case this -> rational_type: return *((rational*) this -> value) / argument; } return primitive(); }
                friend primitive operator /(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                primitive operator /(const char8_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) / argument; case this -> rational_type: return *((rational*) this -> value) / argument; } return primitive(); }
                friend primitive operator /(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                primitive operator /(const char16_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) / argument; case this -> rational_type: return *((rational*) this -> value) / argument; } return primitive(); }
                friend primitive operator /(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                primitive operator /(const char32_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) / argument; case this -> rational_type: return *((rational*) this -> value) / argument; } return primitive(); }
                friend primitive operator /(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                primitive operator /(const double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) / argument; case this -> rational_type: return *((rational*) this -> value) / argument; } return primitive(); }
                friend primitive operator /(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                primitive operator /(const float argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) / argument; case this -> rational_type: return *((rational*) this -> value) / argument; } return primitive(); }
                friend primitive operator /(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                primitive operator /(const int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) / argument; case this -> rational_type: return *((rational*) this -> value) / argument; } return primitive(); }
                friend primitive operator /(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                primitive operator /(const long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) / argument; case this -> rational_type: return *((rational*) this -> value) / argument; } return primitive(); }
                friend primitive operator /(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                primitive operator /(const long double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) / argument; case this -> rational_type: return *((rational*) this -> value) / argument; } return primitive(); }
                friend primitive operator /(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                primitive operator /(const long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) / argument; case this -> rational_type: return *((rational*) this -> value) / argument; } return primitive(); }
                friend primitive operator /(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                primitive operator /(const short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) / argument; case this -> rational_type: return *((rational*) this -> value) / argument; } return primitive(); }
                friend primitive operator /(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                primitive operator /(const signed char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) / argument; case this -> rational_type: return *((rational*) this -> value) / argument; } return primitive(); }
                friend primitive operator /(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                primitive operator /(const unsigned char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) / argument; case this -> rational_type: return *((rational*) this -> value) / argument; } return primitive(); }
                friend primitive operator /(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                primitive operator /(const unsigned int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) / argument; case this -> rational_type: return *((rational*) this -> value) / argument; } return primitive(); }
                friend primitive operator /(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                primitive operator /(const unsigned long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) / argument; case this -> rational_type: return *((rational*) this -> value) / argument; } return primitive(); }
                friend primitive operator /(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                primitive operator /(const unsigned long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) / argument; case this -> rational_type: return *((rational*) this -> value) / argument; } return primitive(); }
                friend primitive operator /(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                primitive operator /(const unsigned short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) / argument; case this -> rational_type: return *((rational*) this -> value) / argument; } return primitive(); }
                friend primitive operator /(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                primitive operator /(const wchar_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) / argument; case this -> rational_type: return *((rational*) this -> value) / argument; } return primitive(); }
                friend primitive operator /(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator /(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA / *((integral*) argumentB.value); case argumentB.rational_type: return argumentA / *((rational*) argumentB.value); } return primitive(); }

                primitive operator /(primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) / *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) / *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) / *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) / *((rational*) argument.value); } } return primitive(); }
                primitive operator /(primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) / *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) / *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) / *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) / *((rational*) argument.value); } } return primitive(); }
                primitive operator /(const primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) / *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) / *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) / *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) / *((rational*) argument.value); } } return primitive(); }
                primitive operator /(const primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) / *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) / *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) / *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) / *((rational*) argument.value); } } return primitive(); }

                // [%]
                primitive operator %(const boolean argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) % argument; case this -> rational_type: return mod(*((rational*) this -> value), argument); } return primitive(); }
                friend primitive operator %(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                primitive operator %(const char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) % argument; case this -> rational_type: return mod(*((rational*) this -> value), argument); } return primitive(); }
                friend primitive operator %(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                primitive operator %(const char8_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) % argument; case this -> rational_type: return mod(*((rational*) this -> value), argument); } return primitive(); }
                friend primitive operator %(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                primitive operator %(const char16_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) % argument; case this -> rational_type: return mod(*((rational*) this -> value), argument); } return primitive(); }
                friend primitive operator %(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                primitive operator %(const char32_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) % argument; case this -> rational_type: return mod(*((rational*) this -> value), argument); } return primitive(); }
                friend primitive operator %(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                primitive operator %(const double argument) const { switch (this -> type) { case this -> integral_type: return mod(*((integral*) this -> value), argument); case this -> rational_type: return mod(*((rational*) this -> value), argument); } return primitive(); }
                friend primitive operator %(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return mod(argumentA, *((integral*) argumentB.value)); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return mod(argumentA, *((integral*) argumentB.value)); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return mod(argumentA, *((integral*) argumentB.value)); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return mod(argumentA, *((integral*) argumentB.value)); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                primitive operator %(const float argument) const { switch (this -> type) { case this -> integral_type: return mod(*((integral*) this -> value), argument); case this -> rational_type: return mod(*((rational*) this -> value), argument); } return primitive(); }
                friend primitive operator %(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return mod(argumentA, *((integral*) argumentB.value)); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return mod(argumentA, *((integral*) argumentB.value)); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return mod(argumentA, *((integral*) argumentB.value)); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return mod(argumentA, *((integral*) argumentB.value)); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                primitive operator %(const int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) % argument; case this -> rational_type: return mod(*((rational*) this -> value), argument); } return primitive(); }
                friend primitive operator %(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                primitive operator %(const long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) % argument; case this -> rational_type: return mod(*((rational*) this -> value), argument); } return primitive(); }
                friend primitive operator %(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                primitive operator %(const long double argument) const { switch (this -> type) { case this -> integral_type: return mod(*((integral*) this -> value), argument); case this -> rational_type: return mod(*((rational*) this -> value), argument); } return primitive(); }
                friend primitive operator %(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return mod(argumentA, *((integral*) argumentB.value)); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return mod(argumentA, *((integral*) argumentB.value)); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return mod(argumentA, *((integral*) argumentB.value)); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return mod(argumentA, *((integral*) argumentB.value)); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                primitive operator %(const long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) % argument; case this -> rational_type: return mod(*((rational*) this -> value), argument); } return primitive(); }
                friend primitive operator %(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                primitive operator %(const short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) % argument; case this -> rational_type: return mod(*((rational*) this -> value), argument); } return primitive(); }
                friend primitive operator %(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                primitive operator %(const signed char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) % argument; case this -> rational_type: return mod(*((rational*) this -> value), argument); } return primitive(); }
                friend primitive operator %(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                primitive operator %(const unsigned char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) % argument; case this -> rational_type: return mod(*((rational*) this -> value), argument); } return primitive(); }
                friend primitive operator %(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                primitive operator %(const unsigned int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) % argument; case this -> rational_type: return mod(*((rational*) this -> value), argument); } return primitive(); }
                friend primitive operator %(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                primitive operator %(const unsigned long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) % argument; case this -> rational_type: return mod(*((rational*) this -> value), argument); } return primitive(); }
                friend primitive operator %(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                primitive operator %(const unsigned long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) % argument; case this -> rational_type: return mod(*((rational*) this -> value), argument); } return primitive(); }
                friend primitive operator %(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                primitive operator %(const unsigned short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) % argument; case this -> rational_type: return mod(*((rational*) this -> value), argument); } return primitive(); }
                friend primitive operator %(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                primitive operator %(const wchar_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) % argument; case this -> rational_type: return mod(*((rational*) this -> value), argument); } return primitive(); }
                friend primitive operator %(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }
                friend primitive operator %(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA % *((integral*) argumentB.value); case argumentB.rational_type: return mod(argumentA, *((rational*) argumentB.value)); } return primitive(); }

                primitive operator %(primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) % *((integral*) argument.value); case argument.rational_type: return mod(*((integral*) this -> value), *((rational*) argument.value)); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return mod(*((rational*) this -> value), *((integral*) argument.value)); case argument.rational_type: return mod(*((rational*) this -> value), *((rational*) argument.value)); } } return primitive(); }
                primitive operator %(primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) % *((integral*) argument.value); case argument.rational_type: return mod(*((integral*) this -> value), *((rational*) argument.value)); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return mod(*((rational*) this -> value), *((integral*) argument.value)); case argument.rational_type: return mod(*((rational*) this -> value), *((rational*) argument.value)); } } return primitive(); }
                primitive operator %(const primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) % *((integral*) argument.value); case argument.rational_type: return mod(*((integral*) this -> value), *((rational*) argument.value)); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return mod(*((rational*) this -> value), *((integral*) argument.value)); case argument.rational_type: return mod(*((rational*) this -> value), *((rational*) argument.value)); } } return primitive(); }
                primitive operator %(const primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) % *((integral*) argument.value); case argument.rational_type: return mod(*((integral*) this -> value), *((rational*) argument.value)); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return mod(*((rational*) this -> value), *((integral*) argument.value)); case argument.rational_type: return mod(*((rational*) this -> value), *((rational*) argument.value)); } } return primitive(); }

                // [^]
                primitive operator ^(const boolean argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) ^ argument; } return primitive(); }
                friend primitive operator ^(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator ^(const char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) ^ argument; } return primitive(); }
                friend primitive operator ^(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator ^(const char8_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) ^ argument; } return primitive(); }
                friend primitive operator ^(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator ^(const char16_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) ^ argument; } return primitive(); }
                friend primitive operator ^(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator ^(const char32_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) ^ argument; } return primitive(); }
                friend primitive operator ^(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator ^(const double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ (long) argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) ^ (long) argument; } return primitive(); }
                friend primitive operator ^(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long) argumentA) ^ *((integral*) argumentB.value); case argumentB.rational_type: return ((long) argumentA) ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long) argumentA) ^ *((integral*) argumentB.value); case argumentB.rational_type: return ((long) argumentA) ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long) argumentA) ^ *((integral*) argumentB.value); case argumentB.rational_type: return ((long) argumentA) ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long) argumentA) ^ *((integral*) argumentB.value); case argumentB.rational_type: return ((long) argumentA) ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator ^(const float argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ (int) argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) ^ (int) argument; } return primitive(); }
                friend primitive operator ^(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((int) argumentA) ^ *((integral*) argumentB.value); case argumentB.rational_type: return ((int) argumentA) ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((int) argumentA) ^ *((integral*) argumentB.value); case argumentB.rational_type: return ((int) argumentA) ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((int) argumentA) ^ *((integral*) argumentB.value); case argumentB.rational_type: return ((int) argumentA) ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((int) argumentA) ^ *((integral*) argumentB.value); case argumentB.rational_type: return ((int) argumentA) ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator ^(const int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) ^ argument; } return primitive(); }
                friend primitive operator ^(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator ^(const long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) ^ argument; } return primitive(); }
                friend primitive operator ^(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator ^(const long double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ (long long) argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) ^ (long long) argument; } return primitive(); }
                friend primitive operator ^(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long long) argumentA) ^ *((integral*) argumentB.value); case argumentB.rational_type: return ((long long) argumentA) ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long long) argumentA) ^ *((integral*) argumentB.value); case argumentB.rational_type: return ((long long) argumentA) ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long long) argumentA) ^ *((integral*) argumentB.value); case argumentB.rational_type: return ((long long) argumentA) ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long long) argumentA) ^ *((integral*) argumentB.value); case argumentB.rational_type: return ((long long) argumentA) ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator ^(const long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) ^ argument; } return primitive(); }
                friend primitive operator ^(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator ^(const short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) ^ argument; } return primitive(); }
                friend primitive operator ^(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator ^(const signed char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) ^ argument; } return primitive(); }
                friend primitive operator ^(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator ^(const unsigned char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) ^ argument; } return primitive(); }
                friend primitive operator ^(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator ^(const unsigned int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) ^ argument; } return primitive(); }
                friend primitive operator ^(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator ^(const unsigned long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) ^ argument; } return primitive(); }
                friend primitive operator ^(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator ^(const unsigned long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) ^ argument; } return primitive(); }
                friend primitive operator ^(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator ^(const unsigned short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) ^ argument; } return primitive(); }
                friend primitive operator ^(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator ^(const wchar_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) ^ argument; } return primitive(); }
                friend primitive operator ^(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator ^(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA ^ *((integral*) argumentB.value); case argumentB.rational_type: return argumentA ^ (integral) *((rational*) argumentB.value); } return primitive(); }

                primitive operator ^(primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) ^ *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) ^ (integral) *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return ((integral) *((rational*) this -> value)) ^ *((integral*) argument.value); case argument.rational_type: return ((integral) *((rational*) this -> value)) ^ (integral) *((rational*) argument.value); } } return primitive(); }
                primitive operator ^(primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) ^ *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) ^ (integral) *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return ((integral) *((rational*) this -> value)) ^ *((integral*) argument.value); case argument.rational_type: return ((integral) *((rational*) this -> value)) ^ (integral) *((rational*) argument.value); } } return primitive(); }
                primitive operator ^(const primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) ^ *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) ^ (integral) *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return ((integral) *((rational*) this -> value)) ^ *((integral*) argument.value); case argument.rational_type: return ((integral) *((rational*) this -> value)) ^ (integral) *((rational*) argument.value); } } return primitive(); }
                primitive operator ^(const primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) ^ *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) ^ (integral) *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return ((integral) *((rational*) this -> value)) ^ *((integral*) argument.value); case argument.rational_type: return ((integral) *((rational*) this -> value)) ^ (integral) *((rational*) argument.value); } } return primitive(); }

                // [&]
                primitive operator &(const boolean argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) & argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) & argument; } return primitive(); }
                friend primitive operator &(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator &(const char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) & argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) & argument; } return primitive(); }
                friend primitive operator &(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator &(const char8_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) & argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) & argument; } return primitive(); }
                friend primitive operator &(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator &(const char16_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) & argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) & argument; } return primitive(); }
                friend primitive operator &(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator &(const char32_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) & argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) & argument; } return primitive(); }
                friend primitive operator &(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator &(const double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) & (long) argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) & (long) argument; } return primitive(); }
                friend primitive operator &(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long) argumentA) & *((integral*) argumentB.value); case argumentB.rational_type: return ((long) argumentA) & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long) argumentA) & *((integral*) argumentB.value); case argumentB.rational_type: return ((long) argumentA) & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long) argumentA) & *((integral*) argumentB.value); case argumentB.rational_type: return ((long) argumentA) & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long) argumentA) & *((integral*) argumentB.value); case argumentB.rational_type: return ((long) argumentA) & (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator &(const float argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) & (int) argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) & (int) argument; } return primitive(); }
                friend primitive operator &(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((int) argumentA) & *((integral*) argumentB.value); case argumentB.rational_type: return ((int) argumentA) & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((int) argumentA) & *((integral*) argumentB.value); case argumentB.rational_type: return ((int) argumentA) & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((int) argumentA) & *((integral*) argumentB.value); case argumentB.rational_type: return ((int) argumentA) & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((int) argumentA) & *((integral*) argumentB.value); case argumentB.rational_type: return ((int) argumentA) & (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator &(const int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) & argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) & argument; } return primitive(); }
                friend primitive operator &(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator &(const long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) & argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) & argument; } return primitive(); }
                friend primitive operator &(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator &(const long double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) & (long long) argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) & (long long) argument; } return primitive(); }
                friend primitive operator &(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long long) argumentA) & *((integral*) argumentB.value); case argumentB.rational_type: return ((long long) argumentA) & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long long) argumentA) & *((integral*) argumentB.value); case argumentB.rational_type: return ((long long) argumentA) & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long long) argumentA) & *((integral*) argumentB.value); case argumentB.rational_type: return ((long long) argumentA) & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long long) argumentA) & *((integral*) argumentB.value); case argumentB.rational_type: return ((long long) argumentA) & (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator &(const long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) & argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) & argument; } return primitive(); }
                friend primitive operator &(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator &(const short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) & argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) & argument; } return primitive(); }
                friend primitive operator &(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator &(const signed char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) & argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) & argument; } return primitive(); }
                friend primitive operator &(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator &(const unsigned char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) & argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) & argument; } return primitive(); }
                friend primitive operator &(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator &(const unsigned int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) & argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) & argument; } return primitive(); }
                friend primitive operator &(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator &(const unsigned long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) & argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) & argument; } return primitive(); }
                friend primitive operator &(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator &(const unsigned long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) & argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) & argument; } return primitive(); }
                friend primitive operator &(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator &(const unsigned short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) & argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) & argument; } return primitive(); }
                friend primitive operator &(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator &(const wchar_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) & argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) & argument; } return primitive(); }
                friend primitive operator &(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator &(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA & *((integral*) argumentB.value); case argumentB.rational_type: return argumentA & (integral) *((rational*) argumentB.value); } return primitive(); }

                primitive operator &(primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) & *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) & (integral) *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return ((integral) *((rational*) this -> value)) & *((integral*) argument.value); case argument.rational_type: return ((integral) *((rational*) this -> value)) & (integral) *((rational*) argument.value); } } return primitive(); }
                primitive operator &(primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) & *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) & (integral) *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return ((integral) *((rational*) this -> value)) & *((integral*) argument.value); case argument.rational_type: return ((integral) *((rational*) this -> value)) & (integral) *((rational*) argument.value); } } return primitive(); }
                primitive operator &(const primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) & *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) & (integral) *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return ((integral) *((rational*) this -> value)) & *((integral*) argument.value); case argument.rational_type: return ((integral) *((rational*) this -> value)) & (integral) *((rational*) argument.value); } } return primitive(); }
                primitive operator &(const primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) & *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) & (integral) *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return ((integral) *((rational*) this -> value)) & *((integral*) argument.value); case argument.rational_type: return ((integral) *((rational*) this -> value)) & (integral) *((rational*) argument.value); } } return primitive(); }

                // [|]
                primitive operator |(const boolean argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) | argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) | argument; } return primitive(); }
                friend primitive operator |(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator |(const char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) | argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) | argument; } return primitive(); }
                friend primitive operator |(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator |(const char8_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) | argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) | argument; } return primitive(); }
                friend primitive operator |(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator |(const char16_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) | argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) | argument; } return primitive(); }
                friend primitive operator |(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator |(const char32_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) | argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) | argument; } return primitive(); }
                friend primitive operator |(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator |(const double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) | (long) argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) | (long) argument; } return primitive(); }
                friend primitive operator |(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long) argumentA) | *((integral*) argumentB.value); case argumentB.rational_type: return ((long) argumentA) | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long) argumentA) | *((integral*) argumentB.value); case argumentB.rational_type: return ((long) argumentA) | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long) argumentA) | *((integral*) argumentB.value); case argumentB.rational_type: return ((long) argumentA) | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long) argumentA) | *((integral*) argumentB.value); case argumentB.rational_type: return ((long) argumentA) | (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator |(const float argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) | (int) argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) | (int) argument; } return primitive(); }
                friend primitive operator |(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((int) argumentA) | *((integral*) argumentB.value); case argumentB.rational_type: return ((int) argumentA) | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((int) argumentA) | *((integral*) argumentB.value); case argumentB.rational_type: return ((int) argumentA) | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((int) argumentA) | *((integral*) argumentB.value); case argumentB.rational_type: return ((int) argumentA) | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((int) argumentA) | *((integral*) argumentB.value); case argumentB.rational_type: return ((int) argumentA) | (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator |(const int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) | argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) | argument; } return primitive(); }
                friend primitive operator |(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator |(const long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) | argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) | argument; } return primitive(); }
                friend primitive operator |(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator |(const long double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) | (long long) argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) | (long long) argument; } return primitive(); }
                friend primitive operator |(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long long) argumentA) | *((integral*) argumentB.value); case argumentB.rational_type: return ((long long) argumentA) | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long long) argumentA) | *((integral*) argumentB.value); case argumentB.rational_type: return ((long long) argumentA) | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long long) argumentA) | *((integral*) argumentB.value); case argumentB.rational_type: return ((long long) argumentA) | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long long) argumentA) | *((integral*) argumentB.value); case argumentB.rational_type: return ((long long) argumentA) | (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator |(const long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) | argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) | argument; } return primitive(); }
                friend primitive operator |(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator |(const short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) | argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) | argument; } return primitive(); }
                friend primitive operator |(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator |(const signed char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) | argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) | argument; } return primitive(); }
                friend primitive operator |(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator |(const unsigned char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) | argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) | argument; } return primitive(); }
                friend primitive operator |(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator |(const unsigned int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) | argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) | argument; } return primitive(); }
                friend primitive operator |(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator |(const unsigned long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) | argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) | argument; } return primitive(); }
                friend primitive operator |(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator |(const unsigned long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) | argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) | argument; } return primitive(); }
                friend primitive operator |(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator |(const unsigned short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) | argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) | argument; } return primitive(); }
                friend primitive operator |(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator |(const wchar_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) | argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) | argument; } return primitive(); }
                friend primitive operator |(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator |(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA | *((integral*) argumentB.value); case argumentB.rational_type: return argumentA | (integral) *((rational*) argumentB.value); } return primitive(); }

                primitive operator |(primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) | *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) | (integral) *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return ((integral) *((rational*) this -> value)) | *((integral*) argument.value); case argument.rational_type: return ((integral) *((rational*) this -> value)) | (integral) *((rational*) argument.value); } } return primitive(); }
                primitive operator |(primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) | *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) | (integral) *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return ((integral) *((rational*) this -> value)) | *((integral*) argument.value); case argument.rational_type: return ((integral) *((rational*) this -> value)) | (integral) *((rational*) argument.value); } } return primitive(); }
                primitive operator |(const primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) | *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) | (integral) *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return ((integral) *((rational*) this -> value)) | *((integral*) argument.value); case argument.rational_type: return ((integral) *((rational*) this -> value)) | (integral) *((rational*) argument.value); } } return primitive(); }
                primitive operator |(const primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) | *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) | (integral) *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return ((integral) *((rational*) this -> value)) | *((integral*) argument.value); case argument.rational_type: return ((integral) *((rational*) this -> value)) | (integral) *((rational*) argument.value); } } return primitive(); }

                // [~]
                primitive operator ~() const { switch (this -> type) { case this -> integral_type: return ~*((integral*) this -> value); case this -> rational_type: return ~((integral) *((rational*) this -> value)); } return primitive(); }

                // [!]
                inline boolean operator !() const { switch (this -> type) { case this -> integral_type: return !*((integral*) this -> value); case this -> rational_type: return !*((rational*) this -> value); } return true; }

                // [=]
                primitive& operator =(const boolean argument) { this -> terminate(); this -> initiate(argument); return *this; }
                primitive& operator =(const char argument) { this -> terminate(); this -> initiate(argument); return *this; }
                primitive& operator =(const char8_t argument) { this -> terminate(); this -> initiate(argument); return *this; }
                primitive& operator =(const char16_t argument) { this -> terminate(); this -> initiate(argument); return *this; }
                primitive& operator =(const char32_t argument) { this -> terminate(); this -> initiate(argument); return *this; }
                primitive& operator =(const double argument) { this -> terminate(); this -> initiate(argument); return *this; }
                primitive& operator =(const float argument) { this -> terminate(); this -> initiate(argument); return *this; }
                primitive& operator =(const int argument) { this -> terminate(); this -> initiate(argument); return *this; }
                primitive& operator =(const long argument) { this -> terminate(); this -> initiate(argument); return *this; }
                primitive& operator =(const long double argument) { this -> terminate(); this -> initiate(argument); return *this; }
                primitive& operator =(const long long argument) { this -> terminate(); this -> initiate(argument); return *this; }
                primitive& operator =(const short argument) { this -> terminate(); this -> initiate(argument); return *this; }
                primitive& operator =(const signed char argument) { this -> terminate(); this -> initiate(argument); return *this; }
                primitive& operator =(const unsigned char argument) { this -> terminate(); this -> initiate(argument); return *this; }
                primitive& operator =(const unsigned int argument) { this -> terminate(); this -> initiate(argument); return *this; }
                primitive& operator =(const unsigned long argument) { this -> terminate(); this -> initiate(argument); return *this; }
                primitive& operator =(const unsigned long long argument) { this -> terminate(); this -> initiate(argument); return *this; }
                primitive& operator =(const unsigned short argument) { this -> terminate(); this -> initiate(argument); return *this; }
                primitive& operator =(const wchar_t argument) { this -> terminate(); this -> initiate(argument); return *this; }

                primitive& operator =(primitive& argument) { this -> terminate(); this -> initiate((const primitive&) argument); return *this; }
                primitive& operator =(primitive&& argument) { this -> terminate(); this -> initiate((const primitive&) argument); return *this; }
                primitive& operator =(const primitive& argument) { this -> terminate(); this -> initiate(argument); return *this; }
                primitive& operator =(const primitive&& argument) { this -> terminate(); this -> initiate((const primitive&) argument); return *this; }

                primitive& operator =(size&); primitive& operator =(size&&);
                primitive& operator =(const size&); primitive& operator =(const size&&);

                // [<]
                inline boolean operator <(const boolean argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) < argument; case this -> rational_type: return *((rational*) this -> value) < argument; } return false; }
                inline boolean operator <(const char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) < argument; case this -> rational_type: return *((rational*) this -> value) < argument; } return false; }
                inline boolean operator <(const char8_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) < argument; case this -> rational_type: return *((rational*) this -> value) < argument; } return false; }
                inline boolean operator <(const char16_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) < argument; case this -> rational_type: return *((rational*) this -> value) < argument; } return false; }
                inline boolean operator <(const char32_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) < argument; case this -> rational_type: return *((rational*) this -> value) < argument; } return false; }
                inline boolean operator <(const double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) < argument; case this -> rational_type: return *((rational*) this -> value) < argument; } return false; }
                inline boolean operator <(const float argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) < argument; case this -> rational_type: return *((rational*) this -> value) < argument; } return false; }
                inline boolean operator <(const int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) < argument; case this -> rational_type: return *((rational*) this -> value) < argument; } return false; }
                inline boolean operator <(const long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) < argument; case this -> rational_type: return *((rational*) this -> value) < argument; } return false; }
                inline boolean operator <(const long double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) < argument; case this -> rational_type: return *((rational*) this -> value) < argument; } return false; }
                inline boolean operator <(const long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) < argument; case this -> rational_type: return *((rational*) this -> value) < argument; } return false; }
                inline boolean operator <(const short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) < argument; case this -> rational_type: return *((rational*) this -> value) < argument; } return false; }
                inline boolean operator <(const signed char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) < argument; case this -> rational_type: return *((rational*) this -> value) < argument; } return false; }
                inline boolean operator <(const unsigned char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) < argument; case this -> rational_type: return *((rational*) this -> value) < argument; } return false; }
                inline boolean operator <(const unsigned int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) < argument; case this -> rational_type: return *((rational*) this -> value) < argument; } return false; }
                inline boolean operator <(const unsigned long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) < argument; case this -> rational_type: return *((rational*) this -> value) < argument; } return false; }
                inline boolean operator <(const unsigned long long argument) const { switch (this -> type) { case this -> integral_type: return ((unsigned long long) *((integral*) this -> value)) < argument; case this -> rational_type: return *((rational*) this -> value) < argument; } return false; }
                inline boolean operator <(const unsigned short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) < argument; case this -> rational_type: return *((rational*) this -> value) < argument; } return false; }
                inline boolean operator <(const wchar_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) < argument; case this -> rational_type: return *((rational*) this -> value) < argument; } return false; }

                inline boolean operator <(primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) < *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) < *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) < *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) < *((rational*) argument.value); } } return false; }
                inline boolean operator <(primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) < *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) < *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) < *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) < *((rational*) argument.value); } } return false; }
                inline boolean operator <(const primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) < *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) < *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) < *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) < *((rational*) argument.value); } } return false; }
                inline boolean operator <(const primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) < *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) < *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) < *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) < *((rational*) argument.value); } } return false; }

                // [>]
                inline boolean operator >(const boolean argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) > argument; case this -> rational_type: return *((rational*) this -> value) > argument; } return false; }
                inline boolean operator >(const char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) > argument; case this -> rational_type: return *((rational*) this -> value) > argument; } return false; }
                inline boolean operator >(const char8_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) > argument; case this -> rational_type: return *((rational*) this -> value) > argument; } return false; }
                inline boolean operator >(const char16_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) > argument; case this -> rational_type: return *((rational*) this -> value) > argument; } return false; }
                inline boolean operator >(const char32_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) > argument; case this -> rational_type: return *((rational*) this -> value) > argument; } return false; }
                inline boolean operator >(const double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) > argument; case this -> rational_type: return *((rational*) this -> value) > argument; } return false; }
                inline boolean operator >(const float argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) > argument; case this -> rational_type: return *((rational*) this -> value) > argument; } return false; }
                inline boolean operator >(const int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) > argument; case this -> rational_type: return *((rational*) this -> value) > argument; } return false; }
                inline boolean operator >(const long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) > argument; case this -> rational_type: return *((rational*) this -> value) > argument; } return false; }
                inline boolean operator >(const long double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) > argument; case this -> rational_type: return *((rational*) this -> value) > argument; } return false; }
                inline boolean operator >(const long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) > argument; case this -> rational_type: return *((rational*) this -> value) > argument; } return false; }
                inline boolean operator >(const short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) > argument; case this -> rational_type: return *((rational*) this -> value) > argument; } return false; }
                inline boolean operator >(const signed char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) > argument; case this -> rational_type: return *((rational*) this -> value) > argument; } return false; }
                inline boolean operator >(const unsigned char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) > argument; case this -> rational_type: return *((rational*) this -> value) > argument; } return false; }
                inline boolean operator >(const unsigned int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) > argument; case this -> rational_type: return *((rational*) this -> value) > argument; } return false; }
                inline boolean operator >(const unsigned long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) > argument; case this -> rational_type: return *((rational*) this -> value) > argument; } return false; }
                inline boolean operator >(const unsigned long long argument) const { switch (this -> type) { case this -> integral_type: return ((unsigned long long) *((integral*) this -> value)) > argument; case this -> rational_type: return *((rational*) this -> value) > argument; } return false; }
                inline boolean operator >(const unsigned short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) > argument; case this -> rational_type: return *((rational*) this -> value) > argument; } return false; }
                inline boolean operator >(const wchar_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) > argument; case this -> rational_type: return *((rational*) this -> value) > argument; } return false; }

                inline boolean operator >(primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) > *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) > *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) > *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) > *((rational*) argument.value); } } return false; }
                inline boolean operator >(primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) > *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) > *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) > *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) > *((rational*) argument.value); } } return false; }
                inline boolean operator >(const primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) > *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) > *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) > *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) > *((rational*) argument.value); } } return false; }
                inline boolean operator >(const primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) > *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) > *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) > *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) > *((rational*) argument.value); } } return false; }

                // [+=]
                inline primitive& operator +=(const boolean argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) += argument; break; case this -> rational_type: *((rational*) this -> value) += argument; break; } return *this; }
                inline friend boolean& operator +=(boolean& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator +=(boolean& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator +=(boolean& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator +=(boolean& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator +=(boolean&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator +=(boolean&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator +=(boolean&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator +=(boolean&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator +=(const char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) += argument; break; case this -> rational_type: *((rational*) this -> value) += argument; break; } return *this; }
                inline friend char& operator +=(char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator +=(char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator +=(char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator +=(char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator +=(char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator +=(char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator +=(char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator +=(char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator +=(const char8_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) += argument; break; case this -> rational_type: *((rational*) this -> value) += argument; break; } return *this; }
                inline friend char8_t& operator +=(char8_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator +=(char8_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator +=(char8_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator +=(char8_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator +=(char8_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator +=(char8_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator +=(char8_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator +=(char8_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator +=(const char16_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) += argument; break; case this -> rational_type: *((rational*) this -> value) += argument; break; } return *this; }
                inline friend char16_t& operator +=(char16_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator +=(char16_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator +=(char16_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator +=(char16_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator +=(char16_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator +=(char16_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator +=(char16_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator +=(char16_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator +=(const char32_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) += argument; break; case this -> rational_type: *((rational*) this -> value) += argument; break; } return *this; }
                inline friend char32_t& operator +=(char32_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator +=(char32_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator +=(char32_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator +=(char32_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator +=(char32_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator +=(char32_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator +=(char32_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator +=(char32_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator +=(const double argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) += argument; break; case this -> rational_type: *((rational*) this -> value) += argument; break; } return *this; }
                inline friend double& operator +=(double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator +=(double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator +=(double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator +=(double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator +=(double&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator +=(double&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator +=(double&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator +=(double&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator +=(const float argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) += argument; break; case this -> rational_type: *((rational*) this -> value) += argument; break; } return *this; }
                inline friend float& operator +=(float& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator +=(float& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator +=(float& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator +=(float& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator +=(float&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator +=(float&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator +=(float&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator +=(float&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator +=(const int argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) += argument; break; case this -> rational_type: *((rational*) this -> value) += argument; break; } return *this; }
                inline friend int& operator +=(int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator +=(int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator +=(int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator +=(int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator +=(int&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator +=(int&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator +=(int&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator +=(int&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator +=(const long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) += argument; break; case this -> rational_type: *((rational*) this -> value) += argument; break; } return *this; }
                inline friend long& operator +=(long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator +=(long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator +=(long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator +=(long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator +=(long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator +=(long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator +=(long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator +=(long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator +=(const long double argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) += argument; break; case this -> rational_type: *((rational*) this -> value) += argument; break; } return *this; }
                inline friend long double& operator +=(long double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator +=(long double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator +=(long double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator +=(long double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator +=(long double&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator +=(long double&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator +=(long double&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator +=(long double&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator +=(const long long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) += argument; break; case this -> rational_type: *((rational*) this -> value) += argument; break; } return *this; }
                inline friend long long& operator +=(long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator +=(long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator +=(long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator +=(long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator +=(long long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator +=(long long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator +=(long long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator +=(long long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator +=(const short argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) += argument; break; case this -> rational_type: *((rational*) this -> value) += argument; break; } return *this; }
                inline friend short& operator +=(short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator +=(short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator +=(short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator +=(short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator +=(short&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator +=(short&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator +=(short&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator +=(short&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator +=(const signed char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) += argument; break; case this -> rational_type: *((rational*) this -> value) += argument; break; } return *this; }
                inline friend signed char& operator +=(signed char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator +=(signed char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator +=(signed char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator +=(signed char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator +=(signed char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator +=(signed char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator +=(signed char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator +=(signed char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator +=(const unsigned char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) += argument; break; case this -> rational_type: *((rational*) this -> value) += argument; break; } return *this; }
                inline friend unsigned char& operator +=(unsigned char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator +=(unsigned char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator +=(unsigned char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator +=(unsigned char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator +=(unsigned char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator +=(unsigned char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator +=(unsigned char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator +=(unsigned char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator +=(const unsigned int argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) += argument; break; case this -> rational_type: *((rational*) this -> value) += argument; break; } return *this; }
                inline friend unsigned int& operator +=(unsigned int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator +=(unsigned int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator +=(unsigned int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator +=(unsigned int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator +=(unsigned int&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator +=(unsigned int&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator +=(unsigned int&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator +=(unsigned int&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator +=(const unsigned long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) += argument; break; case this -> rational_type: *((rational*) this -> value) += argument; break; } return *this; }
                inline friend unsigned long& operator +=(unsigned long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator +=(unsigned long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator +=(unsigned long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator +=(unsigned long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator +=(unsigned long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator +=(unsigned long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator +=(unsigned long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator +=(unsigned long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator +=(const unsigned long long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) += argument; break; case this -> rational_type: *((rational*) this -> value) += argument; break; } return *this; }
                inline friend unsigned long long& operator +=(unsigned long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator +=(unsigned long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator +=(unsigned long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator +=(unsigned long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator +=(unsigned long long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator +=(unsigned long long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator +=(unsigned long long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator +=(unsigned long long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator +=(const unsigned short argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) += argument; break; case this -> rational_type: *((rational*) this -> value) += argument; break; } return *this; }
                inline friend unsigned short& operator +=(unsigned short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator +=(unsigned short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator +=(unsigned short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator +=(unsigned short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator +=(unsigned short&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator +=(unsigned short&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator +=(unsigned short&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator +=(unsigned short&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator +=(const wchar_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) += argument; break; case this -> rational_type: *((rational*) this -> value) += argument; break; } return *this; }
                inline friend wchar_t& operator +=(wchar_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator +=(wchar_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator +=(wchar_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator +=(wchar_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator +=(wchar_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator +=(wchar_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator +=(wchar_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator +=(wchar_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA += *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA += *((rational*) argumentB.value); break; } return argumentA; }

                // [-=]
                inline primitive& operator -=(const boolean argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) -= argument; break; case this -> rational_type: *((rational*) this -> value) -= argument; break; } return *this; }
                inline friend boolean& operator -=(boolean& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator -=(boolean& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator -=(boolean& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator -=(boolean& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator -=(boolean&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator -=(boolean&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator -=(boolean&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator -=(boolean&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator -=(const char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) -= argument; break; case this -> rational_type: *((rational*) this -> value) -= argument; break; } return *this; }
                inline friend char& operator -=(char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator -=(char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator -=(char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator -=(char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator -=(char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator -=(char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator -=(char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator -=(char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator -=(const char8_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) -= argument; break; case this -> rational_type: *((rational*) this -> value) -= argument; break; } return *this; }
                inline friend char8_t& operator -=(char8_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator -=(char8_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator -=(char8_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator -=(char8_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator -=(char8_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator -=(char8_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator -=(char8_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator -=(char8_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator -=(const char16_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) -= argument; break; case this -> rational_type: *((rational*) this -> value) -= argument; break; } return *this; }
                inline friend char16_t& operator -=(char16_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator -=(char16_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator -=(char16_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator -=(char16_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator -=(char16_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator -=(char16_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator -=(char16_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator -=(char16_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator -=(const char32_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) -= argument; break; case this -> rational_type: *((rational*) this -> value) -= argument; break; } return *this; }
                inline friend char32_t& operator -=(char32_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator -=(char32_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator -=(char32_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator -=(char32_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator -=(char32_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator -=(char32_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator -=(char32_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator -=(char32_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator -=(const double argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) -= argument; break; case this -> rational_type: *((rational*) this -> value) -= argument; break; } return *this; }
                inline friend double& operator -=(double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator -=(double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator -=(double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator -=(double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator -=(double&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator -=(double&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator -=(double&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator -=(double&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator -=(const float argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) -= argument; break; case this -> rational_type: *((rational*) this -> value) -= argument; break; } return *this; }
                inline friend float& operator -=(float& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator -=(float& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator -=(float& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator -=(float& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator -=(float&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator -=(float&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator -=(float&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator -=(float&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator -=(const int argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) -= argument; break; case this -> rational_type: *((rational*) this -> value) -= argument; break; } return *this; }
                inline friend int& operator -=(int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator -=(int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator -=(int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator -=(int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator -=(int&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator -=(int&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator -=(int&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator -=(int&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator -=(const long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) -= argument; break; case this -> rational_type: *((rational*) this -> value) -= argument; break; } return *this; }
                inline friend long& operator -=(long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator -=(long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator -=(long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator -=(long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator -=(long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator -=(long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator -=(long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator -=(long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator -=(const long double argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) -= argument; break; case this -> rational_type: *((rational*) this -> value) -= argument; break; } return *this; }
                inline friend long double& operator -=(long double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator -=(long double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator -=(long double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator -=(long double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator -=(long double&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator -=(long double&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator -=(long double&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator -=(long double&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator -=(const long long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) -= argument; break; case this -> rational_type: *((rational*) this -> value) -= argument; break; } return *this; }
                inline friend long long& operator -=(long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator -=(long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator -=(long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator -=(long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator -=(long long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator -=(long long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator -=(long long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator -=(long long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator -=(const short argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) -= argument; break; case this -> rational_type: *((rational*) this -> value) -= argument; break; } return *this; }
                inline friend short& operator -=(short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator -=(short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator -=(short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator -=(short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator -=(short&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator -=(short&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator -=(short&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator -=(short&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator -=(const signed char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) -= argument; break; case this -> rational_type: *((rational*) this -> value) -= argument; break; } return *this; }
                inline friend signed char& operator -=(signed char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator -=(signed char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator -=(signed char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator -=(signed char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator -=(signed char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator -=(signed char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator -=(signed char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator -=(signed char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator -=(const unsigned char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) -= argument; break; case this -> rational_type: *((rational*) this -> value) -= argument; break; } return *this; }
                inline friend unsigned char& operator -=(unsigned char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator -=(unsigned char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator -=(unsigned char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator -=(unsigned char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator -=(unsigned char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator -=(unsigned char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator -=(unsigned char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator -=(unsigned char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator -=(const unsigned int argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) -= argument; break; case this -> rational_type: *((rational*) this -> value) -= argument; break; } return *this; }
                inline friend unsigned int& operator -=(unsigned int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator -=(unsigned int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator -=(unsigned int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator -=(unsigned int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator -=(unsigned int&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator -=(unsigned int&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator -=(unsigned int&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator -=(unsigned int&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator -=(const unsigned long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) -= argument; break; case this -> rational_type: *((rational*) this -> value) -= argument; break; } return *this; }
                inline friend unsigned long& operator -=(unsigned long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator -=(unsigned long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator -=(unsigned long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator -=(unsigned long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator -=(unsigned long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator -=(unsigned long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator -=(unsigned long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator -=(unsigned long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator -=(const unsigned long long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) -= argument; break; case this -> rational_type: *((rational*) this -> value) -= argument; break; } return *this; }
                inline friend unsigned long long& operator -=(unsigned long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator -=(unsigned long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator -=(unsigned long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator -=(unsigned long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator -=(unsigned long long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator -=(unsigned long long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator -=(unsigned long long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator -=(unsigned long long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator -=(const unsigned short argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) -= argument; break; case this -> rational_type: *((rational*) this -> value) -= argument; break; } return *this; }
                inline friend unsigned short& operator -=(unsigned short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator -=(unsigned short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator -=(unsigned short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator -=(unsigned short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator -=(unsigned short&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator -=(unsigned short&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator -=(unsigned short&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator -=(unsigned short&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator -=(const wchar_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) -= argument; break; case this -> rational_type: *((rational*) this -> value) -= argument; break; } return *this; }
                inline friend wchar_t& operator -=(wchar_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator -=(wchar_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator -=(wchar_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator -=(wchar_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator -=(wchar_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator -=(wchar_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator -=(wchar_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator -=(wchar_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA -= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA -= *((rational*) argumentB.value); break; } return argumentA; }

                // [*=]
                inline primitive& operator *=(const boolean argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) *= argument; break; case this -> rational_type: *((rational*) this -> value) *= argument; break; } return *this; }
                inline friend boolean& operator *=(boolean& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator *=(boolean& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator *=(boolean& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator *=(boolean& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator *=(boolean&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator *=(boolean&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator *=(boolean&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator *=(boolean&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator *=(const char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) *= argument; break; case this -> rational_type: *((rational*) this -> value) *= argument; break; } return *this; }
                inline friend char& operator *=(char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator *=(char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator *=(char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator *=(char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator *=(char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator *=(char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator *=(char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator *=(char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator *=(const char8_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) *= argument; break; case this -> rational_type: *((rational*) this -> value) *= argument; break; } return *this; }
                inline friend char8_t& operator *=(char8_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator *=(char8_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator *=(char8_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator *=(char8_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator *=(char8_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator *=(char8_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator *=(char8_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator *=(char8_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator *=(const char16_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) *= argument; break; case this -> rational_type: *((rational*) this -> value) *= argument; break; } return *this; }
                inline friend char16_t& operator *=(char16_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator *=(char16_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator *=(char16_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator *=(char16_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator *=(char16_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator *=(char16_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator *=(char16_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator *=(char16_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator *=(const char32_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) *= argument; break; case this -> rational_type: *((rational*) this -> value) *= argument; break; } return *this; }
                inline friend char32_t& operator *=(char32_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator *=(char32_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator *=(char32_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator *=(char32_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator *=(char32_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator *=(char32_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator *=(char32_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator *=(char32_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator *=(const double argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) *= argument; break; case this -> rational_type: *((rational*) this -> value) *= argument; break; } return *this; }
                inline friend double& operator *=(double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator *=(double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator *=(double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator *=(double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator *=(double&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator *=(double&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator *=(double&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator *=(double&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator *=(const float argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) *= argument; break; case this -> rational_type: *((rational*) this -> value) *= argument; break; } return *this; }
                inline friend float& operator *=(float& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator *=(float& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator *=(float& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator *=(float& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator *=(float&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator *=(float&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator *=(float&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator *=(float&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator *=(const int argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) *= argument; break; case this -> rational_type: *((rational*) this -> value) *= argument; break; } return *this; }
                inline friend int& operator *=(int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator *=(int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator *=(int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator *=(int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator *=(int&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator *=(int&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator *=(int&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator *=(int&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator *=(const long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) *= argument; break; case this -> rational_type: *((rational*) this -> value) *= argument; break; } return *this; }
                inline friend long& operator *=(long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator *=(long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator *=(long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator *=(long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator *=(long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator *=(long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator *=(long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator *=(long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator *=(const long double argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) *= argument; break; case this -> rational_type: *((rational*) this -> value) *= argument; break; } return *this; }
                inline friend long double& operator *=(long double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator *=(long double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator *=(long double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator *=(long double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator *=(long double&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator *=(long double&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator *=(long double&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator *=(long double&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator *=(const long long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) *= argument; break; case this -> rational_type: *((rational*) this -> value) *= argument; break; } return *this; }
                inline friend long long& operator *=(long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator *=(long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator *=(long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator *=(long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator *=(long long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator *=(long long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator *=(long long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator *=(long long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator *=(const short argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) *= argument; break; case this -> rational_type: *((rational*) this -> value) *= argument; break; } return *this; }
                inline friend short& operator *=(short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator *=(short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator *=(short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator *=(short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator *=(short&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator *=(short&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator *=(short&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator *=(short&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator *=(const signed char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) *= argument; break; case this -> rational_type: *((rational*) this -> value) *= argument; break; } return *this; }
                inline friend signed char& operator *=(signed char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator *=(signed char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator *=(signed char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator *=(signed char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator *=(signed char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator *=(signed char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator *=(signed char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator *=(signed char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator *=(const unsigned char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) *= argument; break; case this -> rational_type: *((rational*) this -> value) *= argument; break; } return *this; }
                inline friend unsigned char& operator *=(unsigned char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator *=(unsigned char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator *=(unsigned char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator *=(unsigned char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator *=(unsigned char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator *=(unsigned char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator *=(unsigned char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator *=(unsigned char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator *=(const unsigned int argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) *= argument; break; case this -> rational_type: *((rational*) this -> value) *= argument; break; } return *this; }
                inline friend unsigned int& operator *=(unsigned int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator *=(unsigned int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator *=(unsigned int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator *=(unsigned int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator *=(unsigned int&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator *=(unsigned int&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator *=(unsigned int&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator *=(unsigned int&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator *=(const unsigned long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) *= argument; break; case this -> rational_type: *((rational*) this -> value) *= argument; break; } return *this; }
                inline friend unsigned long& operator *=(unsigned long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator *=(unsigned long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator *=(unsigned long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator *=(unsigned long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator *=(unsigned long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator *=(unsigned long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator *=(unsigned long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator *=(unsigned long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator *=(const unsigned long long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) *= argument; break; case this -> rational_type: *((rational*) this -> value) *= argument; break; } return *this; }
                inline friend unsigned long long& operator *=(unsigned long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator *=(unsigned long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator *=(unsigned long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator *=(unsigned long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator *=(unsigned long long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator *=(unsigned long long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator *=(unsigned long long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator *=(unsigned long long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator *=(const unsigned short argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) *= argument; break; case this -> rational_type: *((rational*) this -> value) *= argument; break; } return *this; }
                inline friend unsigned short& operator *=(unsigned short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator *=(unsigned short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator *=(unsigned short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator *=(unsigned short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator *=(unsigned short&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator *=(unsigned short&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator *=(unsigned short&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator *=(unsigned short&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator *=(const wchar_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) *= argument; break; case this -> rational_type: *((rational*) this -> value) *= argument; break; } return *this; }
                inline friend wchar_t& operator *=(wchar_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator *=(wchar_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator *=(wchar_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator *=(wchar_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator *=(wchar_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator *=(wchar_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator *=(wchar_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator *=(wchar_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA *= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA *= *((rational*) argumentB.value); break; } return argumentA; }

                // [/=]
                inline primitive& operator /=(const boolean argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) /= argument; break; case this -> rational_type: *((rational*) this -> value) /= argument; break; } return *this; }
                inline friend boolean& operator /=(boolean& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator /=(boolean& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator /=(boolean& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator /=(boolean& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator /=(boolean&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator /=(boolean&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator /=(boolean&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator /=(boolean&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator /=(const char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) /= argument; break; case this -> rational_type: *((rational*) this -> value) /= argument; break; } return *this; }
                inline friend char& operator /=(char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator /=(char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator /=(char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator /=(char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator /=(char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator /=(char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator /=(char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator /=(char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator /=(const char8_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) /= argument; break; case this -> rational_type: *((rational*) this -> value) /= argument; break; } return *this; }
                inline friend char8_t& operator /=(char8_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator /=(char8_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator /=(char8_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator /=(char8_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator /=(char8_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator /=(char8_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator /=(char8_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator /=(char8_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator /=(const char16_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) /= argument; break; case this -> rational_type: *((rational*) this -> value) /= argument; break; } return *this; }
                inline friend char16_t& operator /=(char16_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator /=(char16_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator /=(char16_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator /=(char16_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator /=(char16_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator /=(char16_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator /=(char16_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator /=(char16_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator /=(const char32_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) /= argument; break; case this -> rational_type: *((rational*) this -> value) /= argument; break; } return *this; }
                inline friend char32_t& operator /=(char32_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator /=(char32_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator /=(char32_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator /=(char32_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator /=(char32_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator /=(char32_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator /=(char32_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator /=(char32_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator /=(const double argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) /= argument; break; case this -> rational_type: *((rational*) this -> value) /= argument; break; } return *this; }
                inline friend double& operator /=(double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator /=(double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator /=(double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator /=(double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator /=(double&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator /=(double&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator /=(double&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator /=(double&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator /=(const float argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) /= argument; break; case this -> rational_type: *((rational*) this -> value) /= argument; break; } return *this; }
                inline friend float& operator /=(float& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator /=(float& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator /=(float& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator /=(float& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator /=(float&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator /=(float&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator /=(float&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator /=(float&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator /=(const int argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) /= argument; break; case this -> rational_type: *((rational*) this -> value) /= argument; break; } return *this; }
                inline friend int& operator /=(int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator /=(int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator /=(int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator /=(int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator /=(int&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator /=(int&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator /=(int&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator /=(int&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator /=(const long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) /= argument; break; case this -> rational_type: *((rational*) this -> value) /= argument; break; } return *this; }
                inline friend long& operator /=(long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator /=(long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator /=(long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator /=(long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator /=(long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator /=(long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator /=(long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator /=(long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator /=(const long double argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) /= argument; break; case this -> rational_type: *((rational*) this -> value) /= argument; break; } return *this; }
                inline friend long double& operator /=(long double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator /=(long double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator /=(long double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator /=(long double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator /=(long double&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator /=(long double&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator /=(long double&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator /=(long double&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator /=(const long long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) /= argument; break; case this -> rational_type: *((rational*) this -> value) /= argument; break; } return *this; }
                inline friend long long& operator /=(long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator /=(long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator /=(long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator /=(long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator /=(long long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator /=(long long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator /=(long long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator /=(long long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator /=(const short argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) /= argument; break; case this -> rational_type: *((rational*) this -> value) /= argument; break; } return *this; }
                inline friend short& operator /=(short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator /=(short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator /=(short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator /=(short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator /=(short&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator /=(short&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator /=(short&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator /=(short&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator /=(const signed char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) /= argument; break; case this -> rational_type: *((rational*) this -> value) /= argument; break; } return *this; }
                inline friend signed char& operator /=(signed char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator /=(signed char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator /=(signed char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator /=(signed char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator /=(signed char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator /=(signed char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator /=(signed char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator /=(signed char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator /=(const unsigned char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) /= argument; break; case this -> rational_type: *((rational*) this -> value) /= argument; break; } return *this; }
                inline friend unsigned char& operator /=(unsigned char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator /=(unsigned char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator /=(unsigned char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator /=(unsigned char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator /=(unsigned char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator /=(unsigned char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator /=(unsigned char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator /=(unsigned char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator /=(const unsigned int argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) /= argument; break; case this -> rational_type: *((rational*) this -> value) /= argument; break; } return *this; }
                inline friend unsigned int& operator /=(unsigned int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator /=(unsigned int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator /=(unsigned int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator /=(unsigned int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator /=(unsigned int&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator /=(unsigned int&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator /=(unsigned int&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator /=(unsigned int&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator /=(const unsigned long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) /= argument; break; case this -> rational_type: *((rational*) this -> value) /= argument; break; } return *this; }
                inline friend unsigned long& operator /=(unsigned long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator /=(unsigned long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator /=(unsigned long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator /=(unsigned long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator /=(unsigned long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator /=(unsigned long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator /=(unsigned long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator /=(unsigned long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator /=(const unsigned long long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) /= argument; break; case this -> rational_type: *((rational*) this -> value) /= argument; break; } return *this; }
                inline friend unsigned long long& operator /=(unsigned long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator /=(unsigned long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator /=(unsigned long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator /=(unsigned long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator /=(unsigned long long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator /=(unsigned long long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator /=(unsigned long long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator /=(unsigned long long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator /=(const unsigned short argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) /= argument; break; case this -> rational_type: *((rational*) this -> value) /= argument; break; } return *this; }
                inline friend unsigned short& operator /=(unsigned short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator /=(unsigned short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator /=(unsigned short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator /=(unsigned short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator /=(unsigned short&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator /=(unsigned short&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator /=(unsigned short&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator /=(unsigned short&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator /=(const wchar_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) /= argument; break; case this -> rational_type: *((rational*) this -> value) /= argument; break; } return *this; }
                inline friend wchar_t& operator /=(wchar_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator /=(wchar_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator /=(wchar_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator /=(wchar_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator /=(wchar_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator /=(wchar_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator /=(wchar_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator /=(wchar_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA /= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA /= *((rational*) argumentB.value); break; } return argumentA; }

                // [%=]
                inline primitive& operator %=(const boolean argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) %= argument; break; case this -> rational_type: *((rational*) this -> value) = mod(*((rational*) this -> value), argument); break; } return *this; }
                inline friend boolean& operator %=(boolean& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend boolean& operator %=(boolean& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend boolean& operator %=(boolean& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend boolean& operator %=(boolean& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend boolean& operator %=(boolean&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend boolean& operator %=(boolean&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend boolean& operator %=(boolean&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend boolean& operator %=(boolean&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }

                inline primitive& operator %=(const char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) %= argument; break; case this -> rational_type: *((rational*) this -> value) = mod(*((rational*) this -> value), argument); break; } return *this; }
                inline friend char& operator %=(char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char& operator %=(char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char& operator %=(char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char& operator %=(char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char& operator %=(char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char& operator %=(char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char& operator %=(char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char& operator %=(char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }

                inline primitive& operator %=(const char8_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) %= argument; break; case this -> rational_type: *((rational*) this -> value) = mod(*((rational*) this -> value), argument); break; } return *this; }
                inline friend char8_t& operator %=(char8_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char8_t& operator %=(char8_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char8_t& operator %=(char8_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char8_t& operator %=(char8_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char8_t& operator %=(char8_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char8_t& operator %=(char8_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char8_t& operator %=(char8_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char8_t& operator %=(char8_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }

                inline primitive& operator %=(const char16_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) %= argument; break; case this -> rational_type: *((rational*) this -> value) = mod(*((rational*) this -> value), argument); break; } return *this; }
                inline friend char16_t& operator %=(char16_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char16_t& operator %=(char16_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char16_t& operator %=(char16_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char16_t& operator %=(char16_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char16_t& operator %=(char16_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char16_t& operator %=(char16_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char16_t& operator %=(char16_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char16_t& operator %=(char16_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }

                inline primitive& operator %=(const char32_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) %= argument; break; case this -> rational_type: *((rational*) this -> value) = mod(*((rational*) this -> value), argument); break; } return *this; }
                inline friend char32_t& operator %=(char32_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char32_t& operator %=(char32_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char32_t& operator %=(char32_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char32_t& operator %=(char32_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char32_t& operator %=(char32_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char32_t& operator %=(char32_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char32_t& operator %=(char32_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend char32_t& operator %=(char32_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }

                inline primitive& operator %=(const double argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) = mod(*((integral*) this -> value), argument); break; case this -> rational_type: *((rational*) this -> value) = mod(*((rational*) this -> value), argument); break; } return *this; }
                inline friend double& operator %=(double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend double& operator %=(double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend double& operator %=(double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend double& operator %=(double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend double& operator %=(double&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend double& operator %=(double&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend double& operator %=(double&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend double& operator %=(double&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }

                inline primitive& operator %=(const float argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) = mod(*((integral*) this -> value), argument); break; case this -> rational_type: *((rational*) this -> value) = mod(*((rational*) this -> value), argument); break; } return *this; }
                inline friend float& operator %=(float& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend float& operator %=(float& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend float& operator %=(float& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend float& operator %=(float& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend float& operator %=(float&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend float& operator %=(float&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend float& operator %=(float&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend float& operator %=(float&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }

                inline primitive& operator %=(const int argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) %= argument; break; case this -> rational_type: *((rational*) this -> value) = mod(*((rational*) this -> value), argument); break; } return *this; }
                inline friend int& operator %=(int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend int& operator %=(int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend int& operator %=(int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend int& operator %=(int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend int& operator %=(int&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend int& operator %=(int&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend int& operator %=(int&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend int& operator %=(int&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }

                inline primitive& operator %=(const long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) %= argument; break; case this -> rational_type: *((rational*) this -> value) = mod(*((rational*) this -> value), argument); break; } return *this; }
                inline friend long& operator %=(long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long& operator %=(long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long& operator %=(long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long& operator %=(long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long& operator %=(long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long& operator %=(long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long& operator %=(long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long& operator %=(long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }

                inline primitive& operator %=(const long double argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) = mod(*((integral*) this -> value), argument); break; case this -> rational_type: *((rational*) this -> value) = mod(*((rational*) this -> value), argument); break; } return *this; }
                inline friend long double& operator %=(long double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long double& operator %=(long double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long double& operator %=(long double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long double& operator %=(long double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long double& operator %=(long double&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long double& operator %=(long double&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long double& operator %=(long double&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long double& operator %=(long double&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = mod(argumentA, *((integral*) argumentB.value)); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }

                inline primitive& operator %=(const long long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) %= argument; break; case this -> rational_type: *((rational*) this -> value) = mod(*((rational*) this -> value), argument); break; } return *this; }
                inline friend long long& operator %=(long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long long& operator %=(long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long long& operator %=(long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long long& operator %=(long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long long& operator %=(long long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long long& operator %=(long long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long long& operator %=(long long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend long long& operator %=(long long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }

                inline primitive& operator %=(const short argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) %= argument; break; case this -> rational_type: *((rational*) this -> value) = mod(*((rational*) this -> value), argument); break; } return *this; }
                inline friend short& operator %=(short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend short& operator %=(short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend short& operator %=(short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend short& operator %=(short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend short& operator %=(short&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend short& operator %=(short&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend short& operator %=(short&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend short& operator %=(short&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }

                inline primitive& operator %=(const signed char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) %= argument; break; case this -> rational_type: *((rational*) this -> value) = mod(*((rational*) this -> value), argument); break; } return *this; }
                inline friend signed char& operator %=(signed char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend signed char& operator %=(signed char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend signed char& operator %=(signed char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend signed char& operator %=(signed char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend signed char& operator %=(signed char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend signed char& operator %=(signed char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend signed char& operator %=(signed char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend signed char& operator %=(signed char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }

                inline primitive& operator %=(const unsigned char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) %= argument; break; case this -> rational_type: *((rational*) this -> value) = mod(*((rational*) this -> value), argument); break; } return *this; }
                inline friend unsigned char& operator %=(unsigned char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned char& operator %=(unsigned char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned char& operator %=(unsigned char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned char& operator %=(unsigned char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned char& operator %=(unsigned char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned char& operator %=(unsigned char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned char& operator %=(unsigned char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned char& operator %=(unsigned char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }

                inline primitive& operator %=(const unsigned int argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) %= argument; break; case this -> rational_type: *((rational*) this -> value) = mod(*((rational*) this -> value), argument); break; } return *this; }
                inline friend unsigned int& operator %=(unsigned int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned int& operator %=(unsigned int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned int& operator %=(unsigned int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned int& operator %=(unsigned int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned int& operator %=(unsigned int&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned int& operator %=(unsigned int&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned int& operator %=(unsigned int&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned int& operator %=(unsigned int&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }

                inline primitive& operator %=(const unsigned long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) %= argument; break; case this -> rational_type: *((rational*) this -> value) = mod(*((rational*) this -> value), argument); break; } return *this; }
                inline friend unsigned long& operator %=(unsigned long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned long& operator %=(unsigned long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned long& operator %=(unsigned long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned long& operator %=(unsigned long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned long& operator %=(unsigned long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned long& operator %=(unsigned long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned long& operator %=(unsigned long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned long& operator %=(unsigned long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }

                inline primitive& operator %=(const unsigned long long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) %= argument; break; case this -> rational_type: *((rational*) this -> value) = mod(*((rational*) this -> value), argument); break; } return *this; }
                inline friend unsigned long long& operator %=(unsigned long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned long long& operator %=(unsigned long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned long long& operator %=(unsigned long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned long long& operator %=(unsigned long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned long long& operator %=(unsigned long long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned long long& operator %=(unsigned long long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned long long& operator %=(unsigned long long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned long long& operator %=(unsigned long long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }

                inline primitive& operator %=(const unsigned short argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) %= argument; break; case this -> rational_type: *((rational*) this -> value) = mod(*((rational*) this -> value), argument); break; } return *this; }
                inline friend unsigned short& operator %=(unsigned short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned short& operator %=(unsigned short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned short& operator %=(unsigned short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned short& operator %=(unsigned short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned short& operator %=(unsigned short&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned short& operator %=(unsigned short&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned short& operator %=(unsigned short&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend unsigned short& operator %=(unsigned short&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }

                inline primitive& operator %=(const wchar_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) %= argument; break; case this -> rational_type: *((rational*) this -> value) = mod(*((rational*) this -> value), argument); break; } return *this; }
                inline friend wchar_t& operator %=(wchar_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend wchar_t& operator %=(wchar_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend wchar_t& operator %=(wchar_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend wchar_t& operator %=(wchar_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend wchar_t& operator %=(wchar_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend wchar_t& operator %=(wchar_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend wchar_t& operator %=(wchar_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }
                inline friend wchar_t& operator %=(wchar_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA %= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = mod(argumentA, *((rational*) argumentB.value)); break; } return argumentA; }

                // [^=]
                inline primitive& operator ^=(const boolean argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) ^= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) ^ argument; break; } return *this; }
                inline friend boolean& operator ^=(boolean& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator ^=(boolean& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator ^=(boolean& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator ^=(boolean& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator ^=(boolean&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator ^=(boolean&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator ^=(boolean&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator ^=(boolean&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator ^=(const char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) ^= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) ^ argument; break; } return *this; }
                inline friend char& operator ^=(char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator ^=(char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator ^=(char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator ^=(char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator ^=(char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator ^=(char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator ^=(char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator ^=(char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator ^=(const char8_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) ^= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) ^ argument; break; } return *this; }
                inline friend char8_t& operator ^=(char8_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator ^=(char8_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator ^=(char8_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator ^=(char8_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator ^=(char8_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator ^=(char8_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator ^=(char8_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator ^=(char8_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator ^=(const char16_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) ^= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) ^ argument; break; } return *this; }
                inline friend char16_t& operator ^=(char16_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator ^=(char16_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator ^=(char16_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator ^=(char16_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator ^=(char16_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator ^=(char16_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator ^=(char16_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator ^=(char16_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator ^=(const char32_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) ^= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) ^ argument; break; } return *this; }
                inline friend char32_t& operator ^=(char32_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator ^=(char32_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator ^=(char32_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator ^=(char32_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator ^=(char32_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator ^=(char32_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator ^=(char32_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator ^=(char32_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator ^=(const double argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) = *((integral*) this -> value) ^ (long) argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) ^ (long) argument; break; } return *this; }
                inline friend double& operator ^=(double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator ^=(double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator ^=(double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator ^=(double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator ^=(double&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator ^=(double&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator ^=(double&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator ^=(double&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator ^=(const float argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) = *((integral*) this -> value) ^ (int) argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) ^ (int) argument; break; } return *this; }
                inline friend float& operator ^=(float& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator ^=(float& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator ^=(float& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator ^=(float& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator ^=(float&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator ^=(float&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator ^=(float&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator ^=(float&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator ^=(const int argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) ^= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) ^ argument; break; } return *this; }
                inline friend int& operator ^=(int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator ^=(int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator ^=(int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator ^=(int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator ^=(int&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator ^=(int&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator ^=(int&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator ^=(int&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator ^=(const long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) ^= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) ^ argument; break; } return *this; }
                inline friend long& operator ^=(long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator ^=(long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator ^=(long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator ^=(long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator ^=(long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator ^=(long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator ^=(long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator ^=(long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator ^=(const long double argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) = *((integral*) this -> value) ^ (long long) argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) ^ (long long) argument; break; } return *this; }
                inline friend long double& operator ^=(long double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator ^=(long double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator ^=(long double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator ^=(long double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator ^=(long double&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator ^=(long double&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator ^=(long double&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator ^=(long double&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) ^ *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator ^=(const long long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) ^= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) ^ argument; break; } return *this; }
                inline friend long long& operator ^=(long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator ^=(long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator ^=(long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator ^=(long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator ^=(long long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator ^=(long long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator ^=(long long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator ^=(long long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator ^=(const short argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) ^= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) ^ argument; break; } return *this; }
                inline friend short& operator ^=(short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator ^=(short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator ^=(short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator ^=(short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator ^=(short&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator ^=(short&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator ^=(short&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator ^=(short&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator ^=(const signed char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) ^= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) ^ argument; break; } return *this; }
                inline friend signed char& operator ^=(signed char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator ^=(signed char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator ^=(signed char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator ^=(signed char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator ^=(signed char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator ^=(signed char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator ^=(signed char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator ^=(signed char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator ^=(const unsigned char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) ^= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) ^ argument; break; } return *this; }
                inline friend unsigned char& operator ^=(unsigned char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator ^=(unsigned char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator ^=(unsigned char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator ^=(unsigned char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator ^=(unsigned char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator ^=(unsigned char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator ^=(unsigned char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator ^=(unsigned char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator ^=(const unsigned int argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) ^= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) ^ argument; break; } return *this; }
                inline friend unsigned int& operator ^=(unsigned int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator ^=(unsigned int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator ^=(unsigned int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator ^=(unsigned int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator ^=(unsigned int&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator ^=(unsigned int&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator ^=(unsigned int&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator ^=(unsigned int&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator ^=(const unsigned long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) ^= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) ^ argument; break; } return *this; }
                inline friend unsigned long& operator ^=(unsigned long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator ^=(unsigned long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator ^=(unsigned long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator ^=(unsigned long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator ^=(unsigned long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator ^=(unsigned long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator ^=(unsigned long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator ^=(unsigned long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator ^=(const unsigned long long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) ^= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) ^ argument; break; } return *this; }
                inline friend unsigned long long& operator ^=(unsigned long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator ^=(unsigned long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator ^=(unsigned long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator ^=(unsigned long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator ^=(unsigned long long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator ^=(unsigned long long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator ^=(unsigned long long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator ^=(unsigned long long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator ^=(const unsigned short argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) ^= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) ^ argument; break; } return *this; }
                inline friend unsigned short& operator ^=(unsigned short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator ^=(unsigned short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator ^=(unsigned short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator ^=(unsigned short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator ^=(unsigned short&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator ^=(unsigned short&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator ^=(unsigned short&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator ^=(unsigned short&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator ^=(const wchar_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) ^= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) ^ argument; break; } return *this; }
                inline friend wchar_t& operator ^=(wchar_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator ^=(wchar_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator ^=(wchar_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator ^=(wchar_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator ^=(wchar_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator ^=(wchar_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator ^=(wchar_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator ^=(wchar_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA ^= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA ^ (integral) *((rational*) argumentB.value); break; } return argumentA; }

                // [&=]
                inline primitive& operator &=(const boolean argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) &= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) & argument; break; } return *this; }
                inline friend boolean& operator &=(boolean& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator &=(boolean& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator &=(boolean& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator &=(boolean& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator &=(boolean&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator &=(boolean&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator &=(boolean&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator &=(boolean&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator &=(const char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) &= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) & argument; break; } return *this; }
                inline friend char& operator &=(char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator &=(char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator &=(char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator &=(char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator &=(char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator &=(char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator &=(char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator &=(char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator &=(const char8_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) &= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) & argument; break; } return *this; }
                inline friend char8_t& operator &=(char8_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator &=(char8_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator &=(char8_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator &=(char8_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator &=(char8_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator &=(char8_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator &=(char8_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator &=(char8_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator &=(const char16_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) &= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) & argument; break; } return *this; }
                inline friend char16_t& operator &=(char16_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator &=(char16_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator &=(char16_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator &=(char16_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator &=(char16_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator &=(char16_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator &=(char16_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator &=(char16_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator &=(const char32_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) &= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) & argument; break; } return *this; }
                inline friend char32_t& operator &=(char32_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator &=(char32_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator &=(char32_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator &=(char32_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator &=(char32_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator &=(char32_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator &=(char32_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator &=(char32_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator &=(const double argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) = *((integral*) this -> value) & (long) argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) & (long) argument; break; } return *this; }
                inline friend double& operator &=(double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator &=(double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator &=(double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator &=(double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator &=(double&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator &=(double&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator &=(double&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator &=(double&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator &=(const float argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) = *((integral*) this -> value) & (int) argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) & (int) argument; break; } return *this; }
                inline friend float& operator &=(float& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator &=(float& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator &=(float& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator &=(float& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator &=(float&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator &=(float&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator &=(float&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator &=(float&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator &=(const int argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) &= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) & argument; break; } return *this; }
                inline friend int& operator &=(int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator &=(int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator &=(int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator &=(int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator &=(int&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator &=(int&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator &=(int&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator &=(int&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator &=(const long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) &= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) & argument; break; } return *this; }
                inline friend long& operator &=(long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator &=(long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator &=(long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator &=(long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator &=(long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator &=(long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator &=(long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator &=(long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator &=(const long double argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) = *((integral*) this -> value) & (long long) argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) & (long long) argument; break; } return *this; }
                inline friend long double& operator &=(long double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator &=(long double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator &=(long double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator &=(long double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator &=(long double&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator &=(long double&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator &=(long double&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator &=(long double&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) & *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) & (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator &=(const long long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) &= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) & argument; break; } return *this; }
                inline friend long long& operator &=(long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator &=(long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator &=(long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator &=(long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator &=(long long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator &=(long long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator &=(long long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator &=(long long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator &=(const short argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) &= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) & argument; break; } return *this; }
                inline friend short& operator &=(short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator &=(short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator &=(short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator &=(short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator &=(short&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator &=(short&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator &=(short&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator &=(short&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator &=(const signed char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) &= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) & argument; break; } return *this; }
                inline friend signed char& operator &=(signed char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator &=(signed char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator &=(signed char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator &=(signed char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator &=(signed char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator &=(signed char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator &=(signed char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator &=(signed char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator &=(const unsigned char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) &= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) & argument; break; } return *this; }
                inline friend unsigned char& operator &=(unsigned char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator &=(unsigned char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator &=(unsigned char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator &=(unsigned char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator &=(unsigned char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator &=(unsigned char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator &=(unsigned char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator &=(unsigned char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator &=(const unsigned int argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) &= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) & argument; break; } return *this; }
                inline friend unsigned int& operator &=(unsigned int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator &=(unsigned int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator &=(unsigned int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator &=(unsigned int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator &=(unsigned int&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator &=(unsigned int&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator &=(unsigned int&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator &=(unsigned int&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator &=(const unsigned long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) &= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) & argument; break; } return *this; }
                inline friend unsigned long& operator &=(unsigned long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator &=(unsigned long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator &=(unsigned long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator &=(unsigned long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator &=(unsigned long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator &=(unsigned long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator &=(unsigned long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator &=(unsigned long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator &=(const unsigned long long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) &= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) & argument; break; } return *this; }
                inline friend unsigned long long& operator &=(unsigned long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator &=(unsigned long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator &=(unsigned long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator &=(unsigned long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator &=(unsigned long long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator &=(unsigned long long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator &=(unsigned long long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator &=(unsigned long long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator &=(const unsigned short argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) &= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) & argument; break; } return *this; }
                inline friend unsigned short& operator &=(unsigned short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator &=(unsigned short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator &=(unsigned short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator &=(unsigned short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator &=(unsigned short&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator &=(unsigned short&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator &=(unsigned short&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator &=(unsigned short&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator &=(const wchar_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) &= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) & argument; break; } return *this; }
                inline friend wchar_t& operator &=(wchar_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator &=(wchar_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator &=(wchar_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator &=(wchar_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator &=(wchar_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator &=(wchar_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator &=(wchar_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator &=(wchar_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA &= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA & (integral) *((rational*) argumentB.value); break; } return argumentA; }

                // [|=]
                inline primitive& operator |=(const boolean argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) |= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) | argument; break; } return *this; }
                inline friend boolean& operator |=(boolean& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator |=(boolean& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator |=(boolean& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator |=(boolean& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator |=(boolean&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator |=(boolean&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator |=(boolean&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator |=(boolean&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator |=(const char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) |= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) | argument; break; } return *this; }
                inline friend char& operator |=(char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator |=(char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator |=(char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator |=(char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator |=(char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator |=(char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator |=(char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator |=(char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator |=(const char8_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) |= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) | argument; break; } return *this; }
                inline friend char8_t& operator |=(char8_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator |=(char8_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator |=(char8_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator |=(char8_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator |=(char8_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator |=(char8_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator |=(char8_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator |=(char8_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator |=(const char16_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) |= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) | argument; break; } return *this; }
                inline friend char16_t& operator |=(char16_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator |=(char16_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator |=(char16_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator |=(char16_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator |=(char16_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator |=(char16_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator |=(char16_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator |=(char16_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator |=(const char32_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) |= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) | argument; break; } return *this; }
                inline friend char32_t& operator |=(char32_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator |=(char32_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator |=(char32_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator |=(char32_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator |=(char32_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator |=(char32_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator |=(char32_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator |=(char32_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator |=(const double argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) = *((integral*) this -> value) | (long) argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) | (long) argument; break; } return *this; }
                inline friend double& operator |=(double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator |=(double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator |=(double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator |=(double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator |=(double&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator |=(double&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator |=(double&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator |=(double&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator |=(const float argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) = *((integral*) this -> value) | (int) argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) | (int) argument; break; } return *this; }
                inline friend float& operator |=(float& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator |=(float& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator |=(float& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator |=(float& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator |=(float&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator |=(float&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator |=(float&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator |=(float&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator |=(const int argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) |= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) | argument; break; } return *this; }
                inline friend int& operator |=(int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator |=(int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator |=(int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator |=(int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator |=(int&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator |=(int&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator |=(int&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator |=(int&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator |=(const long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) |= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) | argument; break; } return *this; }
                inline friend long& operator |=(long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator |=(long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator |=(long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator |=(long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator |=(long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator |=(long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator |=(long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator |=(long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator |=(const long double argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) = *((integral*) this -> value) | (long long) argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) | (long long) argument; break; } return *this; }
                inline friend long double& operator |=(long double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator |=(long double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator |=(long double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator |=(long double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator |=(long double&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator |=(long double&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator |=(long double&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator |=(long double&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) | *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) | (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator |=(const long long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) |= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) | argument; break; } return *this; }
                inline friend long long& operator |=(long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator |=(long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator |=(long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator |=(long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator |=(long long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator |=(long long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator |=(long long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator |=(long long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator |=(const short argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) |= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) | argument; break; } return *this; }
                inline friend short& operator |=(short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator |=(short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator |=(short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator |=(short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator |=(short&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator |=(short&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator |=(short&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator |=(short&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator |=(const signed char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) |= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) | argument; break; } return *this; }
                inline friend signed char& operator |=(signed char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator |=(signed char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator |=(signed char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator |=(signed char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator |=(signed char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator |=(signed char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator |=(signed char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator |=(signed char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator |=(const unsigned char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) |= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) | argument; break; } return *this; }
                inline friend unsigned char& operator |=(unsigned char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator |=(unsigned char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator |=(unsigned char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator |=(unsigned char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator |=(unsigned char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator |=(unsigned char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator |=(unsigned char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator |=(unsigned char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator |=(const unsigned int argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) |= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) | argument; break; } return *this; }
                inline friend unsigned int& operator |=(unsigned int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator |=(unsigned int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator |=(unsigned int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator |=(unsigned int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator |=(unsigned int&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator |=(unsigned int&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator |=(unsigned int&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator |=(unsigned int&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator |=(const unsigned long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) |= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) | argument; break; } return *this; }
                inline friend unsigned long& operator |=(unsigned long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator |=(unsigned long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator |=(unsigned long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator |=(unsigned long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator |=(unsigned long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator |=(unsigned long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator |=(unsigned long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator |=(unsigned long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator |=(const unsigned long long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) |= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) | argument; break; } return *this; }
                inline friend unsigned long long& operator |=(unsigned long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator |=(unsigned long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator |=(unsigned long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator |=(unsigned long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator |=(unsigned long long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator |=(unsigned long long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator |=(unsigned long long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator |=(unsigned long long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator |=(const unsigned short argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) |= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) | argument; break; } return *this; }
                inline friend unsigned short& operator |=(unsigned short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator |=(unsigned short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator |=(unsigned short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator |=(unsigned short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator |=(unsigned short&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator |=(unsigned short&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator |=(unsigned short&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator |=(unsigned short&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator |=(const wchar_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) |= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) | argument; break; } return *this; }
                inline friend wchar_t& operator |=(wchar_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator |=(wchar_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator |=(wchar_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator |=(wchar_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator |=(wchar_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator |=(wchar_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator |=(wchar_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator |=(wchar_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA |= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA | (integral) *((rational*) argumentB.value); break; } return argumentA; }

                // [<<]
                primitive operator <<(const boolean argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) << argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) << argument; } return primitive(); }
                friend primitive operator <<(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator <<(const char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) << argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) << argument; } return primitive(); }
                friend primitive operator <<(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator <<(const char8_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) << argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) << argument; } return primitive(); }
                friend primitive operator <<(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator <<(const char16_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) << argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) << argument; } return primitive(); }
                friend primitive operator <<(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator <<(const char32_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) << argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) << argument; } return primitive(); }
                friend primitive operator <<(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator <<(const double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) << (long) argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) << (long) argument; } return primitive(); }
                friend primitive operator <<(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long) argumentA) << *((integral*) argumentB.value); case argumentB.rational_type: return ((long) argumentA) << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long) argumentA) << *((integral*) argumentB.value); case argumentB.rational_type: return ((long) argumentA) << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long) argumentA) << *((integral*) argumentB.value); case argumentB.rational_type: return ((long) argumentA) << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long) argumentA) << *((integral*) argumentB.value); case argumentB.rational_type: return ((long) argumentA) << (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator <<(const float argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) << (int) argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) << (int) argument; } return primitive(); }
                friend primitive operator <<(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((int) argumentA) << *((integral*) argumentB.value); case argumentB.rational_type: return ((int) argumentA) << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((int) argumentA) << *((integral*) argumentB.value); case argumentB.rational_type: return ((int) argumentA) << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((int) argumentA) << *((integral*) argumentB.value); case argumentB.rational_type: return ((int) argumentA) << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((int) argumentA) << *((integral*) argumentB.value); case argumentB.rational_type: return ((int) argumentA) << (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator <<(const int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) << argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) << argument; } return primitive(); }
                friend primitive operator <<(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator <<(const long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) << argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) << argument; } return primitive(); }
                friend primitive operator <<(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator <<(const long double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) << (long long) argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) << (long long) argument; } return primitive(); }
                friend primitive operator <<(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long long) argumentA) << *((integral*) argumentB.value); case argumentB.rational_type: return ((long long) argumentA) << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long long) argumentA) << *((integral*) argumentB.value); case argumentB.rational_type: return ((long long) argumentA) << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long long) argumentA) << *((integral*) argumentB.value); case argumentB.rational_type: return ((long long) argumentA) << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long long) argumentA) << *((integral*) argumentB.value); case argumentB.rational_type: return ((long long) argumentA) << (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator <<(const long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) << argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) << argument; } return primitive(); }
                friend primitive operator <<(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator <<(const short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) << argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) << argument; } return primitive(); }
                friend primitive operator <<(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator <<(const signed char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) << argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) << argument; } return primitive(); }
                friend primitive operator <<(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator <<(const unsigned char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) << argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) << argument; } return primitive(); }
                friend primitive operator <<(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator <<(const unsigned int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) << argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) << argument; } return primitive(); }
                friend primitive operator <<(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator <<(const unsigned long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) << argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) << argument; } return primitive(); }
                friend primitive operator <<(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator <<(const unsigned long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) << argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) << argument; } return primitive(); }
                friend primitive operator <<(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator <<(const unsigned short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) << argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) << argument; } return primitive(); }
                friend primitive operator <<(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator <<(const wchar_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) << argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) << argument; } return primitive(); }
                friend primitive operator <<(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator <<(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA << *((integral*) argumentB.value); case argumentB.rational_type: return argumentA << (integral) *((rational*) argumentB.value); } return primitive(); }

                primitive operator <<(primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) << *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) << (integral) *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return ((integral) *((rational*) this -> value)) << *((integral*) argument.value); case argument.rational_type: return ((integral) *((rational*) this -> value)) << (integral) *((rational*) argument.value); } } return primitive(); }
                primitive operator <<(primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) << *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) << (integral) *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return ((integral) *((rational*) this -> value)) << *((integral*) argument.value); case argument.rational_type: return ((integral) *((rational*) this -> value)) << (integral) *((rational*) argument.value); } } return primitive(); }
                primitive operator <<(const primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) << *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) << (integral) *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return ((integral) *((rational*) this -> value)) << *((integral*) argument.value); case argument.rational_type: return ((integral) *((rational*) this -> value)) << (integral) *((rational*) argument.value); } } return primitive(); }
                primitive operator <<(const primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) << *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) << (integral) *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return ((integral) *((rational*) this -> value)) << *((integral*) argument.value); case argument.rational_type: return ((integral) *((rational*) this -> value)) << (integral) *((rational*) argument.value); } } return primitive(); }

                // [>>]
                primitive operator >>(const boolean argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >> argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) >> argument; } return primitive(); }
                friend primitive operator >>(const boolean argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const boolean argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const boolean argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const boolean argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator >>(const char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >> argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) >> argument; } return primitive(); }
                friend primitive operator >>(const char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator >>(const char8_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >> argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) >> argument; } return primitive(); }
                friend primitive operator >>(const char8_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const char8_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const char8_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const char8_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator >>(const char16_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >> argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) >> argument; } return primitive(); }
                friend primitive operator >>(const char16_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const char16_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const char16_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const char16_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator >>(const char32_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >> argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) >> argument; } return primitive(); }
                friend primitive operator >>(const char32_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const char32_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const char32_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const char32_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator >>(const double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >> (long) argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) >> (long) argument; } return primitive(); }
                friend primitive operator >>(const double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long) argumentA) >> *((integral*) argumentB.value); case argumentB.rational_type: return ((long) argumentA) >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long) argumentA) >> *((integral*) argumentB.value); case argumentB.rational_type: return ((long) argumentA) >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long) argumentA) >> *((integral*) argumentB.value); case argumentB.rational_type: return ((long) argumentA) >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long) argumentA) >> *((integral*) argumentB.value); case argumentB.rational_type: return ((long) argumentA) >> (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator >>(const float argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >> (int) argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) >> (int) argument; } return primitive(); }
                friend primitive operator >>(const float argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((int) argumentA) >> *((integral*) argumentB.value); case argumentB.rational_type: return ((int) argumentA) >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const float argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((int) argumentA) >> *((integral*) argumentB.value); case argumentB.rational_type: return ((int) argumentA) >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const float argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((int) argumentA) >> *((integral*) argumentB.value); case argumentB.rational_type: return ((int) argumentA) >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const float argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((int) argumentA) >> *((integral*) argumentB.value); case argumentB.rational_type: return ((int) argumentA) >> (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator >>(const int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >> argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) >> argument; } return primitive(); }
                friend primitive operator >>(const int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator >>(const long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >> argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) >> argument; } return primitive(); }
                friend primitive operator >>(const long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator >>(const long double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >> (long long) argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) >> (long long) argument; } return primitive(); }
                friend primitive operator >>(const long double argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long long) argumentA) >> *((integral*) argumentB.value); case argumentB.rational_type: return ((long long) argumentA) >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const long double argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long long) argumentA) >> *((integral*) argumentB.value); case argumentB.rational_type: return ((long long) argumentA) >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const long double argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long long) argumentA) >> *((integral*) argumentB.value); case argumentB.rational_type: return ((long long) argumentA) >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const long double argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return ((long long) argumentA) >> *((integral*) argumentB.value); case argumentB.rational_type: return ((long long) argumentA) >> (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator >>(const long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >> argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) >> argument; } return primitive(); }
                friend primitive operator >>(const long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator >>(const short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >> argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) >> argument; } return primitive(); }
                friend primitive operator >>(const short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator >>(const signed char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >> argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) >> argument; } return primitive(); }
                friend primitive operator >>(const signed char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const signed char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const signed char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const signed char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator >>(const unsigned char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >> argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) >> argument; } return primitive(); }
                friend primitive operator >>(const unsigned char argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const unsigned char argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const unsigned char argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const unsigned char argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator >>(const unsigned int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >> argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) >> argument; } return primitive(); }
                friend primitive operator >>(const unsigned int argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const unsigned int argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const unsigned int argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const unsigned int argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator >>(const unsigned long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >> argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) >> argument; } return primitive(); }
                friend primitive operator >>(const unsigned long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const unsigned long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const unsigned long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const unsigned long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator >>(const unsigned long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >> argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) >> argument; } return primitive(); }
                friend primitive operator >>(const unsigned long long argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const unsigned long long argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const unsigned long long argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const unsigned long long argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator >>(const unsigned short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >> argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) >> argument; } return primitive(); }
                friend primitive operator >>(const unsigned short argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const unsigned short argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const unsigned short argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const unsigned short argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                primitive operator >>(const wchar_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >> argument; case this -> rational_type: return ((integral) *((rational*) this -> value)) >> argument; } return primitive(); }
                friend primitive operator >>(const wchar_t argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const wchar_t argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const wchar_t argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }
                friend primitive operator >>(const wchar_t argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: return argumentA >> *((integral*) argumentB.value); case argumentB.rational_type: return argumentA >> (integral) *((rational*) argumentB.value); } return primitive(); }

                primitive operator >>(primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) >> *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) >> (integral) *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return ((integral) *((rational*) this -> value)) >> *((integral*) argument.value); case argument.rational_type: return ((integral) *((rational*) this -> value)) >> (integral) *((rational*) argument.value); } } return primitive(); }
                primitive operator >>(primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) >> *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) >> (integral) *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return ((integral) *((rational*) this -> value)) >> *((integral*) argument.value); case argument.rational_type: return ((integral) *((rational*) this -> value)) >> (integral) *((rational*) argument.value); } } return primitive(); }
                primitive operator >>(const primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) >> *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) >> (integral) *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return ((integral) *((rational*) this -> value)) >> *((integral*) argument.value); case argument.rational_type: return ((integral) *((rational*) this -> value)) >> (integral) *((rational*) argument.value); } } return primitive(); }
                primitive operator >>(const primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) >> *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) >> (integral) *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return ((integral) *((rational*) this -> value)) >> *((integral*) argument.value); case argument.rational_type: return ((integral) *((rational*) this -> value)) >> (integral) *((rational*) argument.value); } } return primitive(); }

                // [>>=]
                inline primitive& operator >>=(const boolean argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) >>= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) >> argument; break; } return *this; }
                inline friend boolean& operator >>=(boolean& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator >>=(boolean& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator >>=(boolean& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator >>=(boolean& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator >>=(boolean&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator >>=(boolean&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator >>=(boolean&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator >>=(boolean&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator >>=(const char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) >>= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) >> argument; break; } return *this; }
                inline friend char& operator >>=(char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator >>=(char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator >>=(char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator >>=(char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator >>=(char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator >>=(char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator >>=(char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator >>=(char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator >>=(const char8_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) >>= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) >> argument; break; } return *this; }
                inline friend char8_t& operator >>=(char8_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator >>=(char8_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator >>=(char8_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator >>=(char8_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator >>=(char8_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator >>=(char8_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator >>=(char8_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator >>=(char8_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator >>=(const char16_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) >>= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) >> argument; break; } return *this; }
                inline friend char16_t& operator >>=(char16_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator >>=(char16_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator >>=(char16_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator >>=(char16_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator >>=(char16_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator >>=(char16_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator >>=(char16_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator >>=(char16_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator >>=(const char32_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) >>= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) >> argument; break; } return *this; }
                inline friend char32_t& operator >>=(char32_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator >>=(char32_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator >>=(char32_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator >>=(char32_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator >>=(char32_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator >>=(char32_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator >>=(char32_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator >>=(char32_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator >>=(const double argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) = *((integral*) this -> value) >> (long) argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) >> (long) argument; break; } return *this; }
                inline friend double& operator >>=(double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator >>=(double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator >>=(double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator >>=(double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator >>=(double&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator >>=(double&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator >>=(double&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator >>=(double&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator >>=(const float argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) = *((integral*) this -> value) >> (int) argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) >> (int) argument; break; } return *this; }
                inline friend float& operator >>=(float& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator >>=(float& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator >>=(float& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator >>=(float& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator >>=(float&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator >>=(float&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator >>=(float&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator >>=(float&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator >>=(const int argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) >>= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) >> argument; break; } return *this; }
                inline friend int& operator >>=(int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator >>=(int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator >>=(int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator >>=(int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator >>=(int&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator >>=(int&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator >>=(int&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator >>=(int&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator >>=(const long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) >>= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) >> argument; break; } return *this; }
                inline friend long& operator >>=(long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator >>=(long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator >>=(long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator >>=(long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator >>=(long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator >>=(long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator >>=(long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator >>=(long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator >>=(const long double argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) = *((integral*) this -> value) >> (long long) argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) >> (long long) argument; break; } return *this; }
                inline friend long double& operator >>=(long double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator >>=(long double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator >>=(long double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator >>=(long double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator >>=(long double&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator >>=(long double&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator >>=(long double&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator >>=(long double&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) >> *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) >> (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator >>=(const long long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) >>= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) >> argument; break; } return *this; }
                inline friend long long& operator >>=(long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator >>=(long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator >>=(long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator >>=(long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator >>=(long long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator >>=(long long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator >>=(long long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator >>=(long long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator >>=(const short argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) >>= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) >> argument; break; } return *this; }
                inline friend short& operator >>=(short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator >>=(short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator >>=(short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator >>=(short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator >>=(short&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator >>=(short&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator >>=(short&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator >>=(short&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator >>=(const signed char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) >>= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) >> argument; break; } return *this; }
                inline friend signed char& operator >>=(signed char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator >>=(signed char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator >>=(signed char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator >>=(signed char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator >>=(signed char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator >>=(signed char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator >>=(signed char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator >>=(signed char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator >>=(const unsigned char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) >>= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) >> argument; break; } return *this; }
                inline friend unsigned char& operator >>=(unsigned char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator >>=(unsigned char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator >>=(unsigned char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator >>=(unsigned char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator >>=(unsigned char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator >>=(unsigned char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator >>=(unsigned char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator >>=(unsigned char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator >>=(const unsigned int argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) >>= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) >> argument; break; } return *this; }
                inline friend unsigned int& operator >>=(unsigned int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator >>=(unsigned int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator >>=(unsigned int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator >>=(unsigned int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator >>=(unsigned int&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator >>=(unsigned int&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator >>=(unsigned int&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator >>=(unsigned int&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator >>=(const unsigned long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) >>= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) >> argument; break; } return *this; }
                inline friend unsigned long& operator >>=(unsigned long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator >>=(unsigned long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator >>=(unsigned long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator >>=(unsigned long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator >>=(unsigned long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator >>=(unsigned long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator >>=(unsigned long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator >>=(unsigned long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator >>=(const unsigned long long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) >>= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) >> argument; break; } return *this; }
                inline friend unsigned long long& operator >>=(unsigned long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator >>=(unsigned long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator >>=(unsigned long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator >>=(unsigned long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator >>=(unsigned long long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator >>=(unsigned long long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator >>=(unsigned long long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator >>=(unsigned long long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator >>=(const unsigned short argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) >>= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) >> argument; break; } return *this; }
                inline friend unsigned short& operator >>=(unsigned short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator >>=(unsigned short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator >>=(unsigned short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator >>=(unsigned short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator >>=(unsigned short&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator >>=(unsigned short&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator >>=(unsigned short&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator >>=(unsigned short&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator >>=(const wchar_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) >>= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) >> argument; break; } return *this; }
                inline friend wchar_t& operator >>=(wchar_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator >>=(wchar_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator >>=(wchar_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator >>=(wchar_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator >>=(wchar_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator >>=(wchar_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator >>=(wchar_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator >>=(wchar_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA >>= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA >> (integral) *((rational*) argumentB.value); break; } return argumentA; }

                // [<<=]
                inline primitive& operator <<=(const boolean argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) <<= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) << argument; break; } return *this; }
                inline friend boolean& operator <<=(boolean& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator <<=(boolean& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator <<=(boolean& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator <<=(boolean& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator <<=(boolean&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator <<=(boolean&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator <<=(boolean&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend boolean& operator <<=(boolean&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator <<=(const char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) <<= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) << argument; break; } return *this; }
                inline friend char& operator <<=(char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator <<=(char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator <<=(char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator <<=(char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator <<=(char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator <<=(char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator <<=(char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char& operator <<=(char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator <<=(const char8_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) <<= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) << argument; break; } return *this; }
                inline friend char8_t& operator <<=(char8_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator <<=(char8_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator <<=(char8_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator <<=(char8_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator <<=(char8_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator <<=(char8_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator <<=(char8_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char8_t& operator <<=(char8_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator <<=(const char16_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) <<= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) << argument; break; } return *this; }
                inline friend char16_t& operator <<=(char16_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator <<=(char16_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator <<=(char16_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator <<=(char16_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator <<=(char16_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator <<=(char16_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator <<=(char16_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char16_t& operator <<=(char16_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator <<=(const char32_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) <<= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) << argument; break; } return *this; }
                inline friend char32_t& operator <<=(char32_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator <<=(char32_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator <<=(char32_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator <<=(char32_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator <<=(char32_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator <<=(char32_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator <<=(char32_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend char32_t& operator <<=(char32_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator <<=(const double argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) = *((integral*) this -> value) << (long) argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) << (long) argument; break; } return *this; }
                inline friend double& operator <<=(double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator <<=(double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator <<=(double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator <<=(double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator <<=(double&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator <<=(double&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator <<=(double&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend double& operator <<=(double&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator <<=(const float argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) = *((integral*) this -> value) << (int) argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) << (int) argument; break; } return *this; }
                inline friend float& operator <<=(float& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator <<=(float& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator <<=(float& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator <<=(float& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator <<=(float&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator <<=(float&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator <<=(float&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend float& operator <<=(float&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((int) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((int) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator <<=(const int argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) <<= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) << argument; break; } return *this; }
                inline friend int& operator <<=(int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator <<=(int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator <<=(int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator <<=(int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator <<=(int&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator <<=(int&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator <<=(int&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend int& operator <<=(int&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator <<=(const long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) <<= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) << argument; break; } return *this; }
                inline friend long& operator <<=(long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator <<=(long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator <<=(long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator <<=(long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator <<=(long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator <<=(long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator <<=(long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long& operator <<=(long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator <<=(const long double argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) = *((integral*) this -> value) << (long long) argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) << (long long) argument; break; } return *this; }
                inline friend long double& operator <<=(long double& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator <<=(long double& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator <<=(long double& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator <<=(long double& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator <<=(long double&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator <<=(long double&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator <<=(long double&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long double& operator <<=(long double&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA = ((long long) argumentA) << *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = ((long long) argumentA) << (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator <<=(const long long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) <<= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) << argument; break; } return *this; }
                inline friend long long& operator <<=(long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator <<=(long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator <<=(long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator <<=(long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator <<=(long long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator <<=(long long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator <<=(long long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend long long& operator <<=(long long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator <<=(const short argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) <<= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) << argument; break; } return *this; }
                inline friend short& operator <<=(short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator <<=(short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator <<=(short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator <<=(short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator <<=(short&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator <<=(short&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator <<=(short&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend short& operator <<=(short&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator <<=(const signed char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) <<= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) << argument; break; } return *this; }
                inline friend signed char& operator <<=(signed char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator <<=(signed char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator <<=(signed char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator <<=(signed char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator <<=(signed char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator <<=(signed char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator <<=(signed char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend signed char& operator <<=(signed char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator <<=(const unsigned char argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) <<= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) << argument; break; } return *this; }
                inline friend unsigned char& operator <<=(unsigned char& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator <<=(unsigned char& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator <<=(unsigned char& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator <<=(unsigned char& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator <<=(unsigned char&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator <<=(unsigned char&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator <<=(unsigned char&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned char& operator <<=(unsigned char&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator <<=(const unsigned int argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) <<= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) << argument; break; } return *this; }
                inline friend unsigned int& operator <<=(unsigned int& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator <<=(unsigned int& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator <<=(unsigned int& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator <<=(unsigned int& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator <<=(unsigned int&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator <<=(unsigned int&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator <<=(unsigned int&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned int& operator <<=(unsigned int&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator <<=(const unsigned long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) <<= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) << argument; break; } return *this; }
                inline friend unsigned long& operator <<=(unsigned long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator <<=(unsigned long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator <<=(unsigned long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator <<=(unsigned long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator <<=(unsigned long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator <<=(unsigned long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator <<=(unsigned long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long& operator <<=(unsigned long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator <<=(const unsigned long long argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) <<= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) << argument; break; } return *this; }
                inline friend unsigned long long& operator <<=(unsigned long long& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator <<=(unsigned long long& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator <<=(unsigned long long& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator <<=(unsigned long long& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator <<=(unsigned long long&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator <<=(unsigned long long&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator <<=(unsigned long long&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned long long& operator <<=(unsigned long long&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator <<=(const unsigned short argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) <<= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) << argument; break; } return *this; }
                inline friend unsigned short& operator <<=(unsigned short& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator <<=(unsigned short& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator <<=(unsigned short& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator <<=(unsigned short& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator <<=(unsigned short&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator <<=(unsigned short&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator <<=(unsigned short&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend unsigned short& operator <<=(unsigned short&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }

                inline primitive& operator <<=(const wchar_t argument) { switch (this -> type) { case this -> integral_type: *((integral*) this -> value) <<= argument; break; case this -> rational_type: *((rational*) this -> value) = ((integral) *((rational*) this -> value)) << argument; break; } return *this; }
                inline friend wchar_t& operator <<=(wchar_t& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator <<=(wchar_t& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator <<=(wchar_t& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator <<=(wchar_t& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator <<=(wchar_t&& argumentA, primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator <<=(wchar_t&& argumentA, primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator <<=(wchar_t&& argumentA, const primitive& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }
                inline friend wchar_t& operator <<=(wchar_t&& argumentA, const primitive&& argumentB) { switch (argumentB.type) { case argumentB.integral_type: argumentA <<= *((integral*) argumentB.value); break; case argumentB.rational_type: argumentA = argumentA << (integral) *((rational*) argumentB.value); break; } return argumentA; }

                // [==]
                inline boolean operator ==(const boolean argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) == argument; case this -> rational_type: return *((rational*) this -> value) == argument; } return false; }
                inline boolean operator ==(const char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) == argument; case this -> rational_type: return *((rational*) this -> value) == argument; } return false; }
                inline boolean operator ==(const char8_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) == argument; case this -> rational_type: return *((rational*) this -> value) == argument; } return false; }
                inline boolean operator ==(const char16_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) == argument; case this -> rational_type: return *((rational*) this -> value) == argument; } return false; }
                inline boolean operator ==(const char32_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) == argument; case this -> rational_type: return *((rational*) this -> value) == argument; } return false; }
                inline boolean operator ==(const double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) == argument; case this -> rational_type: return *((rational*) this -> value) == argument; } return false; }
                inline boolean operator ==(const float argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) == argument; case this -> rational_type: return *((rational*) this -> value) == argument; } return false; }
                inline boolean operator ==(const int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) == argument; case this -> rational_type: return *((rational*) this -> value) == argument; } return false; }
                inline boolean operator ==(const long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) == argument; case this -> rational_type: return *((rational*) this -> value) == argument; } return false; }
                inline boolean operator ==(const long double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) == argument; case this -> rational_type: return *((rational*) this -> value) == argument; } return false; }
                inline boolean operator ==(const long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) == argument; case this -> rational_type: return *((rational*) this -> value) == argument; } return false; }
                inline boolean operator ==(const short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) == argument; case this -> rational_type: return *((rational*) this -> value) == argument; } return false; }
                inline boolean operator ==(const signed char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) == argument; case this -> rational_type: return *((rational*) this -> value) == argument; } return false; }
                inline boolean operator ==(const unsigned char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) == argument; case this -> rational_type: return *((rational*) this -> value) == argument; } return false; }
                inline boolean operator ==(const unsigned int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) == argument; case this -> rational_type: return *((rational*) this -> value) == argument; } return false; }
                inline boolean operator ==(const unsigned long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) == argument; case this -> rational_type: return *((rational*) this -> value) == argument; } return false; }
                inline boolean operator ==(const unsigned long long argument) const { switch (this -> type) { case this -> integral_type: return ((unsigned long long) *((integral*) this -> value)) == argument; case this -> rational_type: return *((rational*) this -> value) == argument; } return false; }
                inline boolean operator ==(const unsigned short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) == argument; case this -> rational_type: return *((rational*) this -> value) == argument; } return false; }
                inline boolean operator ==(const wchar_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) == argument; case this -> rational_type: return *((rational*) this -> value) == argument; } return false; }

                inline boolean operator ==(primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) == *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) == *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) == *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) == *((rational*) argument.value); } } return false; }
                inline boolean operator ==(primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) == *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) == *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) == *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) == *((rational*) argument.value); } } return false; }
                inline boolean operator ==(const primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) == *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) == *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) == *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) == *((rational*) argument.value); } } return false; }
                inline boolean operator ==(const primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) == *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) == *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) == *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) == *((rational*) argument.value); } } return false; }

                // [!=]
                inline boolean operator !=(const boolean argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return *((rational*) this -> value) != argument; } return false; }
                inline boolean operator !=(const char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return *((rational*) this -> value) != argument; } return false; }
                inline boolean operator !=(const char8_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return *((rational*) this -> value) != argument; } return false; }
                inline boolean operator !=(const char16_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return *((rational*) this -> value) != argument; } return false; }
                inline boolean operator !=(const char32_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return *((rational*) this -> value) != argument; } return false; }
                inline boolean operator !=(const double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) != argument; case this -> rational_type: return *((rational*) this -> value) != argument; } return false; }
                inline boolean operator !=(const float argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) != argument; case this -> rational_type: return *((rational*) this -> value) != argument; } return false; }
                inline boolean operator !=(const int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return *((rational*) this -> value) != argument; } return false; }
                inline boolean operator !=(const long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return *((rational*) this -> value) != argument; } return false; }
                inline boolean operator !=(const long double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) != argument; case this -> rational_type: return *((rational*) this -> value) != argument; } return false; }
                inline boolean operator !=(const long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return *((rational*) this -> value) != argument; } return false; }
                inline boolean operator !=(const short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return *((rational*) this -> value) != argument; } return false; }
                inline boolean operator !=(const signed char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return *((rational*) this -> value) != argument; } return false; }
                inline boolean operator !=(const unsigned char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return *((rational*) this -> value) != argument; } return false; }
                inline boolean operator !=(const unsigned int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return *((rational*) this -> value) != argument; } return false; }
                inline boolean operator !=(const unsigned long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return *((rational*) this -> value) != argument; } return false; }
                inline boolean operator !=(const unsigned long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return *((rational*) this -> value) != argument; } return false; }
                inline boolean operator !=(const unsigned short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return *((rational*) this -> value) != argument; } return false; }
                inline boolean operator !=(const wchar_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) ^ argument; case this -> rational_type: return *((rational*) this -> value) != argument; } return false; }

                inline boolean operator !=(primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) ^ *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) != *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) != *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) != *((rational*) argument.value); } } return false; }
                inline boolean operator !=(primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) ^ *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) != *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) != *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) != *((rational*) argument.value); } } return false; }
                inline boolean operator !=(const primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) ^ *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) != *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) != *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) != *((rational*) argument.value); } } return false; }
                inline boolean operator !=(const primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) ^ *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) != *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) != *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) != *((rational*) argument.value); } } return false; }

                // [<=]
                inline boolean operator <=(const boolean argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) <= argument; case this -> rational_type: return *((rational*) this -> value) <= argument; } return false; }
                inline boolean operator <=(const char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) <= argument; case this -> rational_type: return *((rational*) this -> value) <= argument; } return false; }
                inline boolean operator <=(const char8_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) <= argument; case this -> rational_type: return *((rational*) this -> value) <= argument; } return false; }
                inline boolean operator <=(const char16_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) <= argument; case this -> rational_type: return *((rational*) this -> value) <= argument; } return false; }
                inline boolean operator <=(const char32_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) <= argument; case this -> rational_type: return *((rational*) this -> value) <= argument; } return false; }
                inline boolean operator <=(const double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) <= argument; case this -> rational_type: return *((rational*) this -> value) <= argument; } return false; }
                inline boolean operator <=(const float argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) <= argument; case this -> rational_type: return *((rational*) this -> value) <= argument; } return false; }
                inline boolean operator <=(const int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) <= argument; case this -> rational_type: return *((rational*) this -> value) <= argument; } return false; }
                inline boolean operator <=(const long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) <= argument; case this -> rational_type: return *((rational*) this -> value) <= argument; } return false; }
                inline boolean operator <=(const long double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) <= argument; case this -> rational_type: return *((rational*) this -> value) <= argument; } return false; }
                inline boolean operator <=(const long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) <= argument; case this -> rational_type: return *((rational*) this -> value) <= argument; } return false; }
                inline boolean operator <=(const short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) <= argument; case this -> rational_type: return *((rational*) this -> value) <= argument; } return false; }
                inline boolean operator <=(const signed char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) <= argument; case this -> rational_type: return *((rational*) this -> value) <= argument; } return false; }
                inline boolean operator <=(const unsigned char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) <= argument; case this -> rational_type: return *((rational*) this -> value) <= argument; } return false; }
                inline boolean operator <=(const unsigned int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) <= argument; case this -> rational_type: return *((rational*) this -> value) <= argument; } return false; }
                inline boolean operator <=(const unsigned long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) <= argument; case this -> rational_type: return *((rational*) this -> value) <= argument; } return false; }
                inline boolean operator <=(const unsigned long long argument) const { switch (this -> type) { case this -> integral_type: return ((unsigned long long) *((integral*) this -> value)) <= argument; case this -> rational_type: return *((rational*) this -> value) <= argument; } return false; }
                inline boolean operator <=(const unsigned short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) <= argument; case this -> rational_type: return *((rational*) this -> value) <= argument; } return false; }
                inline boolean operator <=(const wchar_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) <= argument; case this -> rational_type: return *((rational*) this -> value) <= argument; } return false; }

                inline boolean operator <=(primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) <= *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) <= *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) <= *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) <= *((rational*) argument.value); } } return false; }
                inline boolean operator <=(primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) <= *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) <= *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) <= *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) <= *((rational*) argument.value); } } return false; }
                inline boolean operator <=(const primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) <= *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) <= *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) <= *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) <= *((rational*) argument.value); } } return false; }
                inline boolean operator <=(const primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) <= *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) <= *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) <= *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) <= *((rational*) argument.value); } } return false; }

                // [>=]
                inline boolean operator >=(const boolean argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >= argument; case this -> rational_type: return *((rational*) this -> value) >= argument; } return false; }
                inline boolean operator >=(const char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >= argument; case this -> rational_type: return *((rational*) this -> value) >= argument; } return false; }
                inline boolean operator >=(const char8_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >= argument; case this -> rational_type: return *((rational*) this -> value) >= argument; } return false; }
                inline boolean operator >=(const char16_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >= argument; case this -> rational_type: return *((rational*) this -> value) >= argument; } return false; }
                inline boolean operator >=(const char32_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >= argument; case this -> rational_type: return *((rational*) this -> value) >= argument; } return false; }
                inline boolean operator >=(const double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >= argument; case this -> rational_type: return *((rational*) this -> value) >= argument; } return false; }
                inline boolean operator >=(const float argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >= argument; case this -> rational_type: return *((rational*) this -> value) >= argument; } return false; }
                inline boolean operator >=(const int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >= argument; case this -> rational_type: return *((rational*) this -> value) >= argument; } return false; }
                inline boolean operator >=(const long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >= argument; case this -> rational_type: return *((rational*) this -> value) >= argument; } return false; }
                inline boolean operator >=(const long double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >= argument; case this -> rational_type: return *((rational*) this -> value) >= argument; } return false; }
                inline boolean operator >=(const long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >= argument; case this -> rational_type: return *((rational*) this -> value) >= argument; } return false; }
                inline boolean operator >=(const short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >= argument; case this -> rational_type: return *((rational*) this -> value) >= argument; } return false; }
                inline boolean operator >=(const signed char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >= argument; case this -> rational_type: return *((rational*) this -> value) >= argument; } return false; }
                inline boolean operator >=(const unsigned char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >= argument; case this -> rational_type: return *((rational*) this -> value) >= argument; } return false; }
                inline boolean operator >=(const unsigned int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >= argument; case this -> rational_type: return *((rational*) this -> value) >= argument; } return false; }
                inline boolean operator >=(const unsigned long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >= argument; case this -> rational_type: return *((rational*) this -> value) >= argument; } return false; }
                inline boolean operator >=(const unsigned long long argument) const { switch (this -> type) { case this -> integral_type: return ((unsigned long long) *((integral*) this -> value)) >= argument; case this -> rational_type: return *((rational*) this -> value) >= argument; } return false; }
                inline boolean operator >=(const unsigned short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >= argument; case this -> rational_type: return *((rational*) this -> value) >= argument; } return false; }
                inline boolean operator >=(const wchar_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) >= argument; case this -> rational_type: return *((rational*) this -> value) >= argument; } return false; }

                inline boolean operator >=(primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) >= *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) >= *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) >= *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) >= *((rational*) argument.value); } } return false; }
                inline boolean operator >=(primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) >= *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) >= *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) >= *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) >= *((rational*) argument.value); } } return false; }
                inline boolean operator >=(const primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) >= *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) >= *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) >= *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) >= *((rational*) argument.value); } } return false; }
                inline boolean operator >=(const primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) >= *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) >= *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) >= *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) >= *((rational*) argument.value); } } return false; }

                // [&&]
                inline boolean operator &&(const boolean argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) && argument; case this -> rational_type: return *((rational*) this -> value) && argument; } return false; }
                inline boolean operator &&(const char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) && argument; case this -> rational_type: return *((rational*) this -> value) && argument; } return false; }
                inline boolean operator &&(const char8_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) && argument; case this -> rational_type: return *((rational*) this -> value) && argument; } return false; }
                inline boolean operator &&(const char16_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) && argument; case this -> rational_type: return *((rational*) this -> value) && argument; } return false; }
                inline boolean operator &&(const char32_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) && argument; case this -> rational_type: return *((rational*) this -> value) && argument; } return false; }
                inline boolean operator &&(const double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) && argument; case this -> rational_type: return *((rational*) this -> value) && argument; } return false; }
                inline boolean operator &&(const float argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) && argument; case this -> rational_type: return *((rational*) this -> value) && argument; } return false; }
                inline boolean operator &&(const int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) && argument; case this -> rational_type: return *((rational*) this -> value) && argument; } return false; }
                inline boolean operator &&(const long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) && argument; case this -> rational_type: return *((rational*) this -> value) && argument; } return false; }
                inline boolean operator &&(const long double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) && argument; case this -> rational_type: return *((rational*) this -> value) && argument; } return false; }
                inline boolean operator &&(const long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) && argument; case this -> rational_type: return *((rational*) this -> value) && argument; } return false; }
                inline boolean operator &&(const short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) && argument; case this -> rational_type: return *((rational*) this -> value) && argument; } return false; }
                inline boolean operator &&(const signed char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) && argument; case this -> rational_type: return *((rational*) this -> value) && argument; } return false; }
                inline boolean operator &&(const unsigned char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) && argument; case this -> rational_type: return *((rational*) this -> value) && argument; } return false; }
                inline boolean operator &&(const unsigned int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) && argument; case this -> rational_type: return *((rational*) this -> value) && argument; } return false; }
                inline boolean operator &&(const unsigned long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) && argument; case this -> rational_type: return *((rational*) this -> value) && argument; } return false; }
                inline boolean operator &&(const unsigned long long argument) const { switch (this -> type) { case this -> integral_type: return ((unsigned long long) *((integral*) this -> value)) && argument; case this -> rational_type: return *((rational*) this -> value) && argument; } return false; }
                inline boolean operator &&(const unsigned short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) && argument; case this -> rational_type: return *((rational*) this -> value) && argument; } return false; }
                inline boolean operator &&(const wchar_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) && argument; case this -> rational_type: return *((rational*) this -> value) && argument; } return false; }

                inline boolean operator &&(primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) && *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) && *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) && *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) && *((rational*) argument.value); } } return false; }
                inline boolean operator &&(primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) && *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) && *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) && *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) && *((rational*) argument.value); } } return false; }
                inline boolean operator &&(const primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) && *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) && *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) && *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) && *((rational*) argument.value); } } return false; }
                inline boolean operator &&(const primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) && *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) && *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) && *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) && *((rational*) argument.value); } } return false; }

                // [||]
                inline boolean operator ||(const boolean argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) || argument; case this -> rational_type: return *((rational*) this -> value) || argument; } return false; }
                inline boolean operator ||(const char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) || argument; case this -> rational_type: return *((rational*) this -> value) || argument; } return false; }
                inline boolean operator ||(const char8_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) || argument; case this -> rational_type: return *((rational*) this -> value) || argument; } return false; }
                inline boolean operator ||(const char16_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) || argument; case this -> rational_type: return *((rational*) this -> value) || argument; } return false; }
                inline boolean operator ||(const char32_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) || argument; case this -> rational_type: return *((rational*) this -> value) || argument; } return false; }
                inline boolean operator ||(const double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) || argument; case this -> rational_type: return *((rational*) this -> value) || argument; } return false; }
                inline boolean operator ||(const float argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) || argument; case this -> rational_type: return *((rational*) this -> value) || argument; } return false; }
                inline boolean operator ||(const int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) || argument; case this -> rational_type: return *((rational*) this -> value) || argument; } return false; }
                inline boolean operator ||(const long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) || argument; case this -> rational_type: return *((rational*) this -> value) || argument; } return false; }
                inline boolean operator ||(const long double argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) || argument; case this -> rational_type: return *((rational*) this -> value) || argument; } return false; }
                inline boolean operator ||(const long long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) || argument; case this -> rational_type: return *((rational*) this -> value) || argument; } return false; }
                inline boolean operator ||(const short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) || argument; case this -> rational_type: return *((rational*) this -> value) || argument; } return false; }
                inline boolean operator ||(const signed char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) || argument; case this -> rational_type: return *((rational*) this -> value) || argument; } return false; }
                inline boolean operator ||(const unsigned char argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) || argument; case this -> rational_type: return *((rational*) this -> value) || argument; } return false; }
                inline boolean operator ||(const unsigned int argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) || argument; case this -> rational_type: return *((rational*) this -> value) || argument; } return false; }
                inline boolean operator ||(const unsigned long argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) || argument; case this -> rational_type: return *((rational*) this -> value) || argument; } return false; }
                inline boolean operator ||(const unsigned long long argument) const { switch (this -> type) { case this -> integral_type: return ((unsigned long long) *((integral*) this -> value)) || argument; case this -> rational_type: return *((rational*) this -> value) || argument; } return false; }
                inline boolean operator ||(const unsigned short argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) || argument; case this -> rational_type: return *((rational*) this -> value) || argument; } return false; }
                inline boolean operator ||(const wchar_t argument) const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value) || argument; case this -> rational_type: return *((rational*) this -> value) || argument; } return false; }

                inline boolean operator ||(primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) || *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) || *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) || *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) || *((rational*) argument.value); } } return false; }
                inline boolean operator ||(primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) || *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) || *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) || *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) || *((rational*) argument.value); } } return false; }
                inline boolean operator ||(const primitive& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) || *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) || *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) || *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) || *((rational*) argument.value); } } return false; }
                inline boolean operator ||(const primitive&& argument) const { switch (this -> type) { case this -> integral_type: switch (argument.type) { case argument.integral_type: return *((integral*) this -> value) || *((integral*) argument.value); case argument.rational_type: return *((integral*) this -> value) || *((rational*) argument.value); } case this -> rational_type: switch (argument.type) { case argument.integral_type: return *((rational*) this -> value) || *((integral*) argument.value); case argument.rational_type: return *((rational*) this -> value) || *((rational*) argument.value); } } return false; }

                // [++]
                inline primitive& operator ++() { switch (this -> type) { case this -> integral_type: (*((integral*) this -> value))++; break; case this -> rational_type: (*((rational*) this -> value))++; break; } return *this; }
                inline primitive& operator ++(int) { switch (this -> type) { case this -> integral_type: ++*((integral*) this -> value); break; case this -> rational_type: ++*((rational*) this -> value); break; } return *this; }

                // [--]
                inline primitive& operator --() { switch (this -> type) { case this -> integral_type: (*((integral*) this -> value))--; break; case this -> rational_type: (*((rational*) this -> value))--; break; } return *this; }
                inline primitive& operator --(int) { switch (this -> type) { case this -> integral_type: --*((integral*) this -> value); break; case this -> rational_type: --*((rational*) this -> value); break; } return *this; }

                // [...] --- NOTE (Lapys) -> There are intentionally multiple types to cast the `primitive` object to so as to reinforce that this class is a container and not a substitute for its types.
                inline operator boolean() const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value); case this -> rational_type: return *((rational*) this -> value); } return false; }
                inline operator char() const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value); case this -> rational_type: return *((rational*) this -> value); } return false; }
                inline operator char8_t() const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value); case this -> rational_type: return *((rational*) this -> value); } return false; }
                inline operator char16_t() const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value); case this -> rational_type: return *((rational*) this -> value); } return false; }
                inline operator char32_t() const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value); case this -> rational_type: return *((rational*) this -> value); } return false; }
                inline operator double() const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value); case this -> rational_type: return *((rational*) this -> value); } return false; }
                inline operator float() const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value); case this -> rational_type: return *((rational*) this -> value); } return false; }
                inline operator int() const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value); case this -> rational_type: return *((rational*) this -> value); } return false; }
                inline operator long() const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value); case this -> rational_type: return *((rational*) this -> value); } return false; }
                inline operator long double() const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value); case this -> rational_type: return *((rational*) this -> value); } return false; }
                inline operator long long() const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value); case this -> rational_type: return *((rational*) this -> value); } return false; }
                inline operator short() const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value); case this -> rational_type: return *((rational*) this -> value); } return false; }
                inline operator signed char() const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value); case this -> rational_type: return *((rational*) this -> value); } return false; }
                inline operator unsigned char() const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value); case this -> rational_type: return *((rational*) this -> value); } return false; }
                inline operator unsigned int() const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value); case this -> rational_type: return *((rational*) this -> value); } return false; }
                inline operator unsigned long() const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value); case this -> rational_type: return *((rational*) this -> value); } return false; }
                inline operator unsigned long long() const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value); case this -> rational_type: return *((rational*) this -> value); } return false; }
                inline operator unsigned short() const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value); case this -> rational_type: return *((rational*) this -> value); } return false; }
                inline operator wchar_t() const { switch (this -> type) { case this -> integral_type: return *((integral*) this -> value); case this -> rational_type: return *((rational*) this -> value); } return false; }
    } primitive;
#endif
