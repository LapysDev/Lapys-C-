/* Declaration > ... */
    // [Number]
    constexpr double number__absolute(double const) noexcept;
    constexpr float number__absolute(float const) noexcept;
    constexpr int number__absolute(int const) noexcept;
    long number__absolute(long const) noexcept;
    constexpr long double number__absolute(long double const) noexcept;
    constexpr short number__absolute(short const) noexcept;
    constexpr unsigned int number__absolute(unsigned int const) noexcept;
    constexpr unsigned long number__absolute(unsigned long const) noexcept;
    constexpr unsigned short number__absolute(unsigned short const) noexcept;
    constexpr double number__arc_cosine(double const);
    constexpr float number__arc_cosine(float const);
    constexpr float number__arc_cosine(int const);
    constexpr double number__arc_cosine(long const);
    constexpr long double number__arc_cosine(long double const);
    constexpr float number__arc_cosine(short const);
    constexpr float number__arc_cosine(unsigned int const);
    constexpr double number__arc_cosine(unsigned long const);
    constexpr float number__arc_cosine(unsigned short const);
    constexpr double number__arc_sine(double const);
    constexpr float number__arc_sine(float const);
    constexpr float number__arc_sine(int const);
    constexpr double number__arc_sine(long const);
    constexpr long double number__arc_sine(long double const);
    constexpr float number__arc_sine(short const);
    constexpr float number__arc_sine(unsigned int const);
    constexpr double number__arc_sine(unsigned long const);
    constexpr float number__arc_sine(unsigned short const);
    constexpr double number__arc_tangent(double const);
    constexpr float number__arc_tangent(float const);
    constexpr float number__arc_tangent(int const);
    constexpr double number__arc_tangent(long const);
    constexpr long double number__arc_tangent(long double const);
    constexpr float number__arc_tangent(short const);
    constexpr float number__arc_tangent(unsigned int const);
    constexpr double number__arc_tangent(unsigned long const);
    constexpr float number__arc_tangent(unsigned short const);
    constexpr double number__area_hyperbolic_cosine(double const);
    constexpr float number__area_hyperbolic_cosine(float const);
    constexpr float number__area_hyperbolic_cosine(int const);
    constexpr double number__area_hyperbolic_cosine(long const);
    constexpr long double number__area_hyperbolic_cosine(long double const);
    constexpr float number__area_hyperbolic_cosine(short const);
    constexpr float number__area_hyperbolic_cosine(unsigned int const);
    constexpr double number__area_hyperbolic_cosine(unsigned long const);
    constexpr float number__area_hyperbolic_cosine(unsigned short const);
    constexpr double number__area_hyperbolic_sine(double const);
    constexpr float number__area_hyperbolic_sine(float const);
    constexpr float number__area_hyperbolic_sine(int const);
    constexpr double number__area_hyperbolic_sine(long const);
    constexpr long double number__area_hyperbolic_sine(long double const);
    constexpr float number__area_hyperbolic_sine(short const);
    constexpr float number__area_hyperbolic_sine(unsigned int const);
    constexpr double number__area_hyperbolic_sine(unsigned long const);
    constexpr float number__area_hyperbolic_sine(unsigned short const);
    constexpr double number__area_hyperbolic_tangent(double const);
    constexpr float number__area_hyperbolic_tangent(float const);
    constexpr float number__area_hyperbolic_tangent(int const);
    constexpr double number__area_hyperbolic_tangent(long const);
    constexpr long double number__area_hyperbolic_tangent(long double const);
    constexpr float number__area_hyperbolic_tangent(short const);
    constexpr float number__area_hyperbolic_tangent(unsigned int const);
    constexpr double number__area_hyperbolic_tangent(unsigned long const);
    constexpr float number__area_hyperbolic_tangent(unsigned short const);
    constexpr double number__ceiling(double const) noexcept;
    constexpr float number__ceiling(float const) noexcept;
    constexpr int number__ceiling(int const) noexcept;
    constexpr long number__ceiling(long const) noexcept;
    constexpr long double number__ceiling(long double const) noexcept;
    constexpr short number__ceiling(short const) noexcept;
    constexpr unsigned int number__ceiling(unsigned int const) noexcept;
    constexpr unsigned long number__ceiling(unsigned long const) noexcept;
    constexpr unsigned short number__ceiling(unsigned short const) noexcept;
    double number__compute_indeterminate(void) noexcept;
    constexpr float number__compute_infinity(void) noexcept;
    constexpr double number__compute_nan(void) noexcept;
    constexpr double number__cosine(double const);
    constexpr float number__cosine(float const);
    constexpr float number__cosine(int const);
    constexpr double number__cosine(long const);
    long double number__cosine(long double const);
    constexpr float number__cosine(short const);
    constexpr float number__cosine(unsigned int const);
    constexpr double number__cosine(unsigned long const);
    constexpr float number__cosine(unsigned short const);
    constexpr double number__cube_root(double const) noexcept;
    constexpr float number__cube_root(float const) noexcept;
    constexpr int number__cube_root(int const) noexcept;
    constexpr long number__cube_root(long const) noexcept;
    constexpr long double number__cube_root(long double const) noexcept;
    constexpr short number__cube_root(short const) noexcept;
    constexpr unsigned int number__cube_root(unsigned int const) noexcept;
    constexpr unsigned long number__cube_root(unsigned long const) noexcept;
    constexpr unsigned short number__cube_root(unsigned short const) noexcept;
    void number__exponentiate(int const, ...) noexcept; // CHECKPOINT (Lapys)
    constexpr double number__exponentiate_eulers_number(double const);
    constexpr float number__exponentiate_eulers_number(float const);
    constexpr float number__exponentiate_eulers_number(int const);
    long double number__exponentiate_eulers_number(long const);
    long double number__exponentiate_eulers_number(long double const);
    constexpr float number__exponentiate_eulers_number(short const);
    constexpr float number__exponentiate_eulers_number(unsigned int const);
    long double number__exponentiate_eulers_number(unsigned long const);
    constexpr float number__exponentiate_eulers_number(unsigned short const);
    double number__floor(double const) noexcept;
    float number__floor(float const) noexcept;
    constexpr int number__floor(int const) noexcept;
    constexpr long number__floor(long const) noexcept;
    long double number__floor(long double const) noexcept;
    constexpr short number__floor(short const) noexcept;
    constexpr unsigned int number__floor(unsigned int const) noexcept;
    constexpr unsigned long number__floor(unsigned long const) noexcept;
    constexpr unsigned short number__floor(unsigned short const) noexcept;
    void number__is_approximate_equal(int const, ...) noexcept;
    void number__is_approximate_greater(int const, ...) noexcept;
    void number__is_approximate_lesser(int const, ...) noexcept;
    bool number__is_approximate_zero(double const, double const = DBL_EPSILON) noexcept;
    bool number__is_approximate_zero(double const, float const = FLT_EPSILON) noexcept;
    bool number__is_approximate_zero(double const, int const = 0) noexcept;
    bool number__is_approximate_zero(double const, long const = 0L) noexcept;
    bool number__is_approximate_zero(double const, long double const = LDBL_EPSILON) noexcept;
    bool number__is_approximate_zero(double const, short const = 0) noexcept;
    bool number__is_approximate_zero(double const, unsigned int const = 0u) noexcept;
    bool number__is_approximate_zero(double const, unsigned long const = 0uL) noexcept;
    bool number__is_approximate_zero(double const, unsigned short const = 0u) noexcept;
    bool number__is_approximate_zero(float const, double const = DBL_EPSILON) noexcept;
    bool number__is_approximate_zero(float const, float const = FLT_EPSILON) noexcept;
    bool number__is_approximate_zero(float const, int const = 0) noexcept;
    bool number__is_approximate_zero(float const, long const = 0L) noexcept;
    bool number__is_approximate_zero(float const, long double const = LDBL_EPSILON) noexcept;
    bool number__is_approximate_zero(float const, short const = 0) noexcept;
    bool number__is_approximate_zero(float const, unsigned int const = 0u) noexcept;
    bool number__is_approximate_zero(float const, unsigned long const = 0uL) noexcept;
    bool number__is_approximate_zero(float const, unsigned short const = 0u) noexcept;
    constexpr bool number__is_approximate_zero(int const, double const = DBL_EPSILON) noexcept;
    constexpr bool number__is_approximate_zero(int const, float const = FLT_EPSILON) noexcept;
    constexpr bool number__is_approximate_zero(int const, int const = 0) noexcept;
    constexpr bool number__is_approximate_zero(int const, long const = 0L) noexcept;
    constexpr bool number__is_approximate_zero(int const, long double const = LDBL_EPSILON) noexcept;
    constexpr bool number__is_approximate_zero(int const, short const = 0) noexcept;
    constexpr bool number__is_approximate_zero(int const, unsigned int const = 0u) noexcept;
    constexpr bool number__is_approximate_zero(int const, unsigned long const = 0uL) noexcept;
    constexpr bool number__is_approximate_zero(int const, unsigned short const = 0u) noexcept;
    constexpr bool number__is_approximate_zero(long const, double const = DBL_EPSILON) noexcept;
    constexpr bool number__is_approximate_zero(long const, float const = FLT_EPSILON) noexcept;
    constexpr bool number__is_approximate_zero(long const, int const = 0) noexcept;
    constexpr bool number__is_approximate_zero(long const, long const = 0L) noexcept;
    constexpr bool number__is_approximate_zero(long const, long double const = LDBL_EPSILON) noexcept;
    constexpr bool number__is_approximate_zero(long const, short const = 0) noexcept;
    constexpr bool number__is_approximate_zero(long const, unsigned int const = 0u) noexcept;
    constexpr bool number__is_approximate_zero(long const, unsigned long const = 0uL) noexcept;
    constexpr bool number__is_approximate_zero(long const, unsigned short const = 0u) noexcept;
    bool number__is_approximate_zero(long double const, double const = DBL_EPSILON) noexcept;
    bool number__is_approximate_zero(long double const, float const = FLT_EPSILON) noexcept;
    bool number__is_approximate_zero(long double const, int const = 0) noexcept;
    bool number__is_approximate_zero(long double const, long const = 0L) noexcept;
    bool number__is_approximate_zero(long double const, long double const = LDBL_EPSILON) noexcept;
    bool number__is_approximate_zero(long double const, short const = 0) noexcept;
    bool number__is_approximate_zero(long double const, unsigned int const = 0u) noexcept;
    bool number__is_approximate_zero(long double const, unsigned long const = 0uL) noexcept;
    bool number__is_approximate_zero(long double const, unsigned short const = 0u) noexcept;
    constexpr bool number__is_approximate_zero(short const, double const = DBL_EPSILON) noexcept;
    constexpr bool number__is_approximate_zero(short const, float const = FLT_EPSILON) noexcept;
    constexpr bool number__is_approximate_zero(short const, int const = 0) noexcept;
    constexpr bool number__is_approximate_zero(short const, long const = 0L) noexcept;
    constexpr bool number__is_approximate_zero(short const, long double const = LDBL_EPSILON) noexcept;
    constexpr bool number__is_approximate_zero(short const, short const = 0) noexcept;
    constexpr bool number__is_approximate_zero(short const, unsigned int const = 0u) noexcept;
    constexpr bool number__is_approximate_zero(short const, unsigned long const = 0uL) noexcept;
    constexpr bool number__is_approximate_zero(short const, unsigned short const = 0u) noexcept;
    constexpr bool number__is_approximate_zero(unsigned int const, double const = DBL_EPSILON) noexcept;
    constexpr bool number__is_approximate_zero(unsigned int const, float const = FLT_EPSILON) noexcept;
    constexpr bool number__is_approximate_zero(unsigned int const, int const = 0) noexcept;
    constexpr bool number__is_approximate_zero(unsigned int const, long const = 0L) noexcept;
    constexpr bool number__is_approximate_zero(unsigned int const, long double const = LDBL_EPSILON) noexcept;
    constexpr bool number__is_approximate_zero(unsigned int const, short const = 0) noexcept;
    constexpr bool number__is_approximate_zero(unsigned int const, unsigned int const = 0u) noexcept;
    constexpr bool number__is_approximate_zero(unsigned int const, unsigned long const = 0uL) noexcept;
    constexpr bool number__is_approximate_zero(unsigned int const, unsigned short const = 0u) noexcept;
    constexpr bool number__is_approximate_zero(unsigned long const, double const = DBL_EPSILON) noexcept;
    constexpr bool number__is_approximate_zero(unsigned long const, float const = FLT_EPSILON) noexcept;
    constexpr bool number__is_approximate_zero(unsigned long const, int const = 0) noexcept;
    constexpr bool number__is_approximate_zero(unsigned long const, long const = 0L) noexcept;
    constexpr bool number__is_approximate_zero(unsigned long const, long double const = LDBL_EPSILON) noexcept;
    constexpr bool number__is_approximate_zero(unsigned long const, short const = 0) noexcept;
    constexpr bool number__is_approximate_zero(unsigned long const, unsigned int const = 0u) noexcept;
    constexpr bool number__is_approximate_zero(unsigned long const, unsigned long const = 0uL) noexcept;
    constexpr bool number__is_approximate_zero(unsigned long const, unsigned short const = 0u) noexcept;
    constexpr bool number__is_approximate_zero(unsigned short const, double const = DBL_EPSILON) noexcept;
    constexpr bool number__is_approximate_zero(unsigned short const, float const = FLT_EPSILON) noexcept;
    constexpr bool number__is_approximate_zero(unsigned short const, int const = 0) noexcept;
    constexpr bool number__is_approximate_zero(unsigned short const, long const = 0L) noexcept;
    constexpr bool number__is_approximate_zero(unsigned short const, long double const = LDBL_EPSILON) noexcept;
    constexpr bool number__is_approximate_zero(unsigned short const, short const = 0) noexcept;
    constexpr bool number__is_approximate_zero(unsigned short const, unsigned int const = 0u) noexcept;
    constexpr bool number__is_approximate_zero(unsigned short const, unsigned long const = 0uL) noexcept;
    constexpr bool number__is_approximate_zero(unsigned short const, unsigned short const = 0u) noexcept;
    constexpr bool number__is_computable(double const) noexcept;
    constexpr bool number__is_computable(float const) noexcept;
    constexpr bool number__is_computable(int const) noexcept;
    constexpr bool number__is_computable(long const) noexcept;
    constexpr bool number__is_computable(long double const) noexcept;
    constexpr bool number__is_computable(short const) noexcept;
    constexpr bool number__is_computable(unsigned int const) noexcept;
    constexpr bool number__is_computable(unsigned long const) noexcept;
    constexpr bool number__is_computable(unsigned short const) noexcept;
    bool number__is_determinate(double const) noexcept;
    bool number__is_determinate(float const) noexcept;
    constexpr bool number__is_determinate(int const) noexcept;
    constexpr bool number__is_determinate(long const) noexcept;
    bool number__is_determinate(long double const) noexcept;
    constexpr bool number__is_determinate(short const) noexcept;
    constexpr bool number__is_determinate(unsigned int const) noexcept;
    constexpr bool number__is_determinate(unsigned long const) noexcept;
    constexpr bool number__is_determinate(unsigned short const) noexcept;
    bool number__is_finite(double const) noexcept;
    bool number__is_finite(float const) noexcept;
    constexpr bool number__is_finite(int const) noexcept;
    constexpr bool number__is_finite(long const) noexcept;
    bool number__is_finite(long double const) noexcept;
    constexpr bool number__is_finite(short const) noexcept;
    constexpr bool number__is_finite(unsigned int const) noexcept;
    constexpr bool number__is_finite(unsigned long const) noexcept;
    constexpr bool number__is_finite(unsigned short const) noexcept;
    constexpr bool number__is_infinite(double const) noexcept;
    constexpr bool number__is_infinite(float const) noexcept;
    constexpr bool number__is_infinite(int const) noexcept;
    constexpr bool number__is_infinite(long const) noexcept;
    constexpr bool number__is_infinite(long double const) noexcept;
    constexpr bool number__is_infinite(short const) noexcept;
    constexpr bool number__is_infinite(unsigned int const) noexcept;
    constexpr bool number__is_infinite(unsigned long const) noexcept;
    constexpr bool number__is_infinite(unsigned short const) noexcept;
    bool number__is_normalized(double const) noexcept;
    bool number__is_normalized(float const) noexcept;
    constexpr bool number__is_normalized(int const) noexcept;
    constexpr bool number__is_normalized(long const) noexcept;
    bool number__is_normalized(long double const) noexcept;
    constexpr bool number__is_normalized(short const) noexcept;
    constexpr bool number__is_normalized(unsigned int const) noexcept;
    constexpr bool number__is_normalized(unsigned long const) noexcept;
    constexpr bool number__is_normalized(unsigned short const) noexcept;
    bool number__is_safe(double const) noexcept;
    bool number__is_safe(float const) noexcept;
    constexpr bool number__is_safe(int const) noexcept;
    constexpr bool number__is_safe(long const) noexcept;
    bool number__is_safe(long double const) noexcept;
    constexpr bool number__is_safe(short const) noexcept;
    constexpr bool number__is_safe(unsigned int const) noexcept;
    constexpr bool number__is_safe(unsigned long const) noexcept;
    constexpr bool number__is_safe(unsigned short const) noexcept;
    constexpr bool number__is_uncomputable(double const) noexcept;
    constexpr bool number__is_uncomputable(float const) noexcept;
    constexpr bool number__is_uncomputable(int const) noexcept;
    constexpr bool number__is_uncomputable(long const) noexcept;
    constexpr bool number__is_uncomputable(long double const) noexcept;
    constexpr bool number__is_uncomputable(short const) noexcept;
    constexpr bool number__is_uncomputable(unsigned int const) noexcept;
    constexpr bool number__is_uncomputable(unsigned long const) noexcept;
    constexpr bool number__is_uncomputable(unsigned short const) noexcept;
    template <unsigned char = M_E> void number__logarithm(...) noexcept;
    void number__maximum(int const, ...) noexcept; // CHECKPOINT (Lapys)
    void number__minimum(int const, ...) noexcept; // CHECKPOINT (Lapys)
    void number__modulo(int const, ...) noexcept; // CHECKPOINT (Lapys)
    void number__modulo_fraction(...) noexcept;
    void number__random(...) noexcept;
    void number__root(int const, ...) noexcept;
    void number__sine(...) noexcept;
    void number__square_root(...) noexcept;
    void number__tangent(...) noexcept;
    void number__to_string(...) noexcept;
    void number__truncate(...) noexcept;

    // [Pointer]
    void pointer__allocate_heap_memory(...) noexcept;
    void pointer__allocate_stack_memory(...) noexcept;
    void pointer__free_heap_memory(...) noexcept;
    void pointer__free_stack_memory(...) noexcept;
    void pointer__map_heap_memory(...) noexcept;
    void pointer__reallocate_heap_memory(...) noexcept;
    void pointer__reallocate_stack_memory(...) noexcept;
    void pointer__source_copy_memory(...) noexcept;
    void pointer__source_move_memory(...) noexcept;
    void pointer__unmap_heap_memory(...) noexcept;
    void pointer__zero_memory(...) noexcept;

    // [String]
    void string__end(...) noexcept;
    void string__is_empty(...) noexcept;
    void string__length(...) noexcept;
    void string__start(...) noexcept;
