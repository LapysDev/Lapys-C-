/* Class > Boolean --- NOTE (Lapys) -> Base: `unsigned char`. */
class Boolean {
    // ...
    private:
        // Initialization > Value
        unsigned char value : 1u;

    // ...
    public:
        // [Constructor]
        inline Boolean() : value(0u) {}
        inline Boolean(const unsigned char argument) : value(argument ? 1u : 0u) {}
        inline Boolean(Boolean& argument) : value(argument.valueOf()) {}
        inline Boolean(const Boolean& argument) : value(argument.valueOf()) {}

        inline Boolean(Number&); inline Boolean(const Number&);
        inline Boolean(String&); inline Boolean(const String&);

        // [Destructor]
        inline ~Boolean() { this -> value = 0u; }

        // [Operator] > ... --- NOTE (Lapys) -> All non-boolean types take higher precedence.
            // [+]
            inline const Boolean operator +() const { return this -> value; }

            inline const char operator +(const char argument) const { return (this -> value ? 1 : 0) + argument; } friend inline const char operator +(const char argumentA, Boolean& argumentB) { return argumentB + argumentA; } friend inline const char operator +(const char argumentA, const Boolean& argumentB) { return argumentB + argumentA; }
            inline const char16_t operator +(const char16_t argument) const { return (this -> value ? 1u : 0u) + argument; } friend inline const char16_t operator +(const char16_t argumentA, Boolean& argumentB) { return argumentB + argumentA; } friend inline const char16_t operator +(const char16_t argumentA, const Boolean& argumentB) { return argumentB + argumentA; }
            inline const char32_t operator +(const char32_t argument) const { return (this -> value ? 1u : 0u) + argument; } friend inline const char32_t operator +(const char32_t argumentA, Boolean& argumentB) { return argumentB + argumentA; } friend inline const char32_t operator +(const char32_t argumentA, const Boolean& argumentB) { return argumentB + argumentA; }
            inline const double operator +(const double argument) const { return (this -> value ? 1.0 : 0.0) + argument; } friend inline const double operator +(const double argumentA, Boolean& argumentB) { return argumentB + argumentA; } friend inline const double operator +(const double argumentA, const Boolean& argumentB) { return argumentB + argumentA; }
            inline const float operator +(const float argument) const { return (this -> value ? 1.0f : 0.0f) + argument; } friend inline const float operator +(const float argumentA, Boolean& argumentB) { return argumentB + argumentA; } friend inline const float operator +(const float argumentA, const Boolean& argumentB) { return argumentB + argumentA; }
            inline const int operator +(const int argument) const { return (this -> value ? 1 : 0) + argument; } friend inline const int operator +(const int argumentA, Boolean& argumentB) { return argumentB + argumentA; } friend inline const int operator +(const int argumentA, const Boolean& argumentB) { return argumentB + argumentA; }
            inline const long operator +(const long argument) const { return (this -> value ? 1L : 0L) + argument; } friend inline const long operator +(const long argumentA, Boolean& argumentB) { return argumentB + argumentA; } friend inline const long operator +(const long argumentA, const Boolean& argumentB) { return argumentB + argumentA; }
            inline const long double operator +(const long double argument) const { return (this -> value ? 1.00 : 0.00) + argument; } friend inline const long double operator +(const long double argumentA, Boolean& argumentB) { return argumentB + argumentA; } friend inline const long double operator +(const long double argumentA, const Boolean& argumentB) { return argumentB + argumentA; }
            inline const long long operator +(const long long argument) const { return (this -> value ? 1LL : 0LL) + argument; } friend inline const long long operator +(const long long argumentA, Boolean& argumentB) { return argumentB + argumentA; } friend inline const long long operator +(const long long argumentA, const Boolean& argumentB) { return argumentB + argumentA; }
            inline const short operator +(const short argument) const { return (this -> value ? 1 : 0) + argument; } friend inline const short operator +(const short argumentA, Boolean& argumentB) { return argumentB + argumentA; } friend inline const short operator +(const short argumentA, const Boolean& argumentB) { return argumentB + argumentA; }
            inline const signed char operator +(const signed char argument) const { return (this -> value ? 1 : 0) + argument; } friend inline const signed char operator +(const signed char argumentA, Boolean& argumentB) { return argumentB + argumentA; } friend inline const signed char operator +(const signed char argumentA, const Boolean& argumentB) { return argumentB + argumentA; }
            inline const unsigned char operator +(const unsigned char argument) const { return this -> value + argument; } friend inline const unsigned char operator +(const unsigned char argumentA, Boolean& argumentB) { return argumentB + argumentA; } friend inline const unsigned char operator +(const unsigned char argumentA, const Boolean& argumentB) { return argumentB + argumentA; }
            inline const unsigned int operator +(const unsigned int argument) const { return this -> value + argument; } friend inline const unsigned int operator +(const unsigned int argumentA, Boolean& argumentB) { return argumentB + argumentA; } friend inline const unsigned int operator +(const unsigned int argumentA, const Boolean& argumentB) { return argumentB + argumentA; }
            inline const unsigned long operator +(const unsigned long argument) const { return (this -> value ? 1uL : 0uL) + argument; } friend inline const unsigned long operator +(const unsigned long argumentA, Boolean& argumentB) { return argumentB + argumentA; } friend inline const unsigned long operator +(const unsigned long argumentA, const Boolean& argumentB) { return argumentB + argumentA; }
            inline const unsigned long long operator +(const unsigned long long argument) const { return (this -> value ? 1uLL : 0uLL) + argument; } friend inline const unsigned long long operator +(const unsigned long long argumentA, Boolean& argumentB) { return argumentB + argumentA; } friend inline const unsigned long long operator +(const unsigned long long argumentA, const Boolean& argumentB) { return argumentB + argumentA; }
            inline const unsigned short operator +(const unsigned short argument) const { return this -> value + argument; } friend inline const unsigned short operator +(const unsigned short argumentA, Boolean& argumentB) { return argumentB + argumentA; } friend inline const unsigned short operator +(const unsigned short argumentA, const Boolean& argumentB) { return argumentB + argumentA; }
            inline const wchar_t operator +(const wchar_t argument) const { return (this -> value ? 1u : 0u) + argument; } friend inline const wchar_t operator +(const wchar_t argumentA, Boolean& argumentB) { return argumentB + argumentA; } friend inline const wchar_t operator +(const wchar_t argumentA, const Boolean& argumentB) { return argumentB + argumentA; }

            inline const Boolean operator +(Boolean& argument) const { return this -> value + argument.valueOf(); }
            inline const Boolean operator +(const Boolean& argument) const { return this -> value + argument.valueOf(); }
            inline const Number operator +(Number&); friend inline const Number operator +(Number&, Boolean&); friend inline const Number operator +(Number& argumentA, const Boolean&);
            inline const Number operator +(const Number&); friend inline const Number operator +(const Number& argumentA, Boolean&); friend inline const Number operator +(const Number& argumentA, const Boolean&);
            inline const String operator +(String&); friend inline const String operator +(String&, Boolean&); friend inline const String operator +(String& argumentA, const Boolean&);
            inline const String operator +(const String&); friend inline const String operator +(const String&, Boolean&); friend inline const String operator +(const String& argumentA, const Boolean&);

            // [-]
            inline const Boolean operator -() const { return this -> value ? -1 : 0; }

            inline const char operator -(const char argument) const { return (this -> value ? 1 : 0) - argument; } friend inline const char operator -(const char argumentA, Boolean& argumentB) { return argumentB - argumentA; } friend inline const char operator -(const char argumentA, const Boolean& argumentB) { return argumentB - argumentA; }
            inline const char16_t operator -(const char16_t argument) const { return (this -> value ? 1u : 0u) - argument; } friend inline const char16_t operator -(const char16_t argumentA, Boolean& argumentB) { return argumentB - argumentA; } friend inline const char16_t operator -(const char16_t argumentA, const Boolean& argumentB) { return argumentB - argumentA; }
            inline const char32_t operator -(const char32_t argument) const { return (this -> value ? 1u : 0u) - argument; } friend inline const char32_t operator -(const char32_t argumentA, Boolean& argumentB) { return argumentB - argumentA; } friend inline const char32_t operator -(const char32_t argumentA, const Boolean& argumentB) { return argumentB - argumentA; }
            inline const double operator -(const double argument) const { return (this -> value ? 1.0 : 0.0) - argument; } friend inline const double operator -(const double argumentA, Boolean& argumentB) { return argumentB - argumentA; } friend inline const double operator -(const double argumentA, const Boolean& argumentB) { return argumentB - argumentA; }
            inline const float operator -(const float argument) const { return (this -> value ? 1.0f : 0.0f) - argument; } friend inline const float operator -(const float argumentA, Boolean& argumentB) { return argumentB - argumentA; } friend inline const float operator -(const float argumentA, const Boolean& argumentB) { return argumentB - argumentA; }
            inline const int operator -(const int argument) const { return (this -> value ? 1 : 0) - argument; } friend inline const int operator -(const int argumentA, Boolean& argumentB) { return argumentB - argumentA; } friend inline const int operator -(const int argumentA, const Boolean& argumentB) { return argumentB - argumentA; }
            inline const long operator -(const long argument) const { return (this -> value ? 1L : 0L) - argument; } friend inline const long operator -(const long argumentA, Boolean& argumentB) { return argumentB - argumentA; } friend inline const long operator -(const long argumentA, const Boolean& argumentB) { return argumentB - argumentA; }
            inline const long double operator -(const long double argument) const { return (this -> value ? 1.00 : 0.00) - argument; } friend inline const long double operator -(const long double argumentA, Boolean& argumentB) { return argumentB - argumentA; } friend inline const long double operator -(const long double argumentA, const Boolean& argumentB) { return argumentB - argumentA; }
            inline const long long operator -(const long long argument) const { return (this -> value ? 1LL : 0LL) - argument; } friend inline const long long operator -(const long long argumentA, Boolean& argumentB) { return argumentB - argumentA; } friend inline const long long operator -(const long long argumentA, const Boolean& argumentB) { return argumentB - argumentA; }
            inline const short operator -(const short argument) const { return (this -> value ? 1 : 0) - argument; } friend inline const short operator -(const short argumentA, Boolean& argumentB) { return argumentB - argumentA; } friend inline const short operator -(const short argumentA, const Boolean& argumentB) { return argumentB - argumentA; }
            inline const signed char operator -(const signed char argument) const { return (this -> value ? 1 : 0) - argument; } friend inline const signed char operator -(const signed char argumentA, Boolean& argumentB) { return argumentB - argumentA; } friend inline const signed char operator -(const signed char argumentA, const Boolean& argumentB) { return argumentB - argumentA; }
            inline const unsigned char operator -(const unsigned char argument) const { return this -> value - argument; } friend inline const unsigned char operator -(const unsigned char argumentA, Boolean& argumentB) { return argumentB - argumentA; } friend inline const unsigned char operator -(const unsigned char argumentA, const Boolean& argumentB) { return argumentB - argumentA; }
            inline const unsigned int operator -(const unsigned int argument) const { return this -> value - argument; } friend inline const unsigned int operator -(const unsigned int argumentA, Boolean& argumentB) { return argumentB - argumentA; } friend inline const unsigned int operator -(const unsigned int argumentA, const Boolean& argumentB) { return argumentB - argumentA; }
            inline const unsigned long operator -(const unsigned long argument) const { return (this -> value ? 1uL : 0uL) - argument; } friend inline const unsigned long operator -(const unsigned long argumentA, Boolean& argumentB) { return argumentB - argumentA; } friend inline const unsigned long operator -(const unsigned long argumentA, const Boolean& argumentB) { return argumentB - argumentA; }
            inline const unsigned long long operator -(const unsigned long long argument) const { return (this -> value ? 1uLL : 0uLL) - argument; } friend inline const unsigned long long operator -(const unsigned long long argumentA, Boolean& argumentB) { return argumentB - argumentA; } friend inline const unsigned long long operator -(const unsigned long long argumentA, const Boolean& argumentB) { return argumentB - argumentA; }
            inline const unsigned short operator -(const unsigned short argument) const { return this -> value - argument; } friend inline const unsigned short operator -(const unsigned short argumentA, Boolean& argumentB) { return argumentB - argumentA; } friend inline const unsigned short operator -(const unsigned short argumentA, const Boolean& argumentB) { return argumentB - argumentA; }
            inline const wchar_t operator -(const wchar_t argument) const { return (this -> value ? 1u : 0u) - argument; } friend inline const wchar_t operator -(const wchar_t argumentA, Boolean& argumentB) { return argumentB - argumentA; } friend inline const wchar_t operator -(const wchar_t argumentA, const Boolean& argumentB) { return argumentB - argumentA; }

            inline const Boolean operator -(Boolean& argument) const { return this -> value - argument.valueOf(); }
            inline const Boolean operator -(const Boolean& argument) const { return this -> value - argument.valueOf(); }
            inline const Number operator -(Number&); friend inline const Number operator -(Number&, Boolean&); friend inline const Number operator -(Number& argumentA, const Boolean&);
            inline const Number operator -(const Number&); friend inline const Number operator -(const Number& argumentA, Boolean&); friend inline const Number operator -(const Number& argumentA, const Boolean&);

            // [*]
            inline const char operator *(const char argument) const { return (this -> value ? 1 : 0) * argument; } friend inline const char operator *(const char argumentA, Boolean& argumentB) { return argumentB * argumentA; } friend inline const char operator *(const char argumentA, const Boolean& argumentB) { return argumentB * argumentA; }
            inline const char16_t operator *(const char16_t argument) const { return (this -> value ? 1u : 0u) * argument; } friend inline const char16_t operator *(const char16_t argumentA, Boolean& argumentB) { return argumentB * argumentA; } friend inline const char16_t operator *(const char16_t argumentA, const Boolean& argumentB) { return argumentB * argumentA; }
            inline const char32_t operator *(const char32_t argument) const { return (this -> value ? 1u : 0u) * argument; } friend inline const char32_t operator *(const char32_t argumentA, Boolean& argumentB) { return argumentB * argumentA; } friend inline const char32_t operator *(const char32_t argumentA, const Boolean& argumentB) { return argumentB * argumentA; }
            inline const double operator *(const double argument) const { return (this -> value ? 1.0 : 0.0) * argument; } friend inline const double operator *(const double argumentA, Boolean& argumentB) { return argumentB * argumentA; } friend inline const double operator *(const double argumentA, const Boolean& argumentB) { return argumentB * argumentA; }
            inline const float operator *(const float argument) const { return (this -> value ? 1.0f : 0.0f) * argument; } friend inline const float operator *(const float argumentA, Boolean& argumentB) { return argumentB * argumentA; } friend inline const float operator *(const float argumentA, const Boolean& argumentB) { return argumentB * argumentA; }
            inline const int operator *(const int argument) const { return (this -> value ? 1 : 0) * argument; } friend inline const int operator *(const int argumentA, Boolean& argumentB) { return argumentB * argumentA; } friend inline const int operator *(const int argumentA, const Boolean& argumentB) { return argumentB * argumentA; }
            inline const long operator *(const long argument) const { return (this -> value ? 1L : 0L) * argument; } friend inline const long operator *(const long argumentA, Boolean& argumentB) { return argumentB * argumentA; } friend inline const long operator *(const long argumentA, const Boolean& argumentB) { return argumentB * argumentA; }
            inline const long double operator *(const long double argument) const { return (this -> value ? 1.00 : 0.00) * argument; } friend inline const long double operator *(const long double argumentA, Boolean& argumentB) { return argumentB * argumentA; } friend inline const long double operator *(const long double argumentA, const Boolean& argumentB) { return argumentB * argumentA; }
            inline const long long operator *(const long long argument) const { return (this -> value ? 1LL : 0LL) * argument; } friend inline const long long operator *(const long long argumentA, Boolean& argumentB) { return argumentB * argumentA; } friend inline const long long operator *(const long long argumentA, const Boolean& argumentB) { return argumentB * argumentA; }
            inline const short operator *(const short argument) const { return (this -> value ? 1 : 0) * argument; } friend inline const short operator *(const short argumentA, Boolean& argumentB) { return argumentB * argumentA; } friend inline const short operator *(const short argumentA, const Boolean& argumentB) { return argumentB * argumentA; }
            inline const signed char operator *(const signed char argument) const { return (this -> value ? 1 : 0) * argument; } friend inline const signed char operator *(const signed char argumentA, Boolean& argumentB) { return argumentB * argumentA; } friend inline const signed char operator *(const signed char argumentA, const Boolean& argumentB) { return argumentB * argumentA; }
            inline const unsigned char operator *(const unsigned char argument) const { return this -> value * argument; } friend inline const unsigned char operator *(const unsigned char argumentA, Boolean& argumentB) { return argumentB * argumentA; } friend inline const unsigned char operator *(const unsigned char argumentA, const Boolean& argumentB) { return argumentB * argumentA; }
            inline const unsigned int operator *(const unsigned int argument) const { return this -> value * argument; } friend inline const unsigned int operator *(const unsigned int argumentA, Boolean& argumentB) { return argumentB * argumentA; } friend inline const unsigned int operator *(const unsigned int argumentA, const Boolean& argumentB) { return argumentB * argumentA; }
            inline const unsigned long operator *(const unsigned long argument) const { return (this -> value ? 1uL : 0uL) * argument; } friend inline const unsigned long operator *(const unsigned long argumentA, Boolean& argumentB) { return argumentB * argumentA; } friend inline const unsigned long operator *(const unsigned long argumentA, const Boolean& argumentB) { return argumentB * argumentA; }
            inline const unsigned long long operator *(const unsigned long long argument) const { return (this -> value ? 1uLL : 0uLL) * argument; } friend inline const unsigned long long operator *(const unsigned long long argumentA, Boolean& argumentB) { return argumentB * argumentA; } friend inline const unsigned long long operator *(const unsigned long long argumentA, const Boolean& argumentB) { return argumentB * argumentA; }
            inline const unsigned short operator *(const unsigned short argument) const { return this -> value * argument; } friend inline const unsigned short operator *(const unsigned short argumentA, Boolean& argumentB) { return argumentB * argumentA; } friend inline const unsigned short operator *(const unsigned short argumentA, const Boolean& argumentB) { return argumentB * argumentA; }
            inline const wchar_t operator *(const wchar_t argument) const { return (this -> value ? 1u : 0u) * argument; } friend inline const wchar_t operator *(const wchar_t argumentA, Boolean& argumentB) { return argumentB * argumentA; } friend inline const wchar_t operator *(const wchar_t argumentA, const Boolean& argumentB) { return argumentB * argumentA; }

            inline const Boolean operator *(Boolean& argument) const { return this -> value * argument.valueOf(); }
            inline const Boolean operator *(const Boolean& argument) const { return this -> value * argument.valueOf(); }
            inline const Number operator *(Number&); friend inline const Number operator *(Number&, Boolean&); friend inline const Number operator *(Number& argumentA, const Boolean&);
            inline const Number operator *(const Number&); friend inline const Number operator *(const Number& argumentA, Boolean&); friend inline const Number operator *(const Number& argumentA, const Boolean&);

            // [/]
            inline const char operator /(const char argument) const { return (this -> value ? 1 : 0) / argument; } friend inline const char operator /(const char argumentA, Boolean& argumentB) { return argumentB / argumentA; } friend inline const char operator /(const char argumentA, const Boolean& argumentB) { return argumentB / argumentA; }
            inline const char16_t operator /(const char16_t argument) const { return (this -> value ? 1u : 0u) / argument; } friend inline const char16_t operator /(const char16_t argumentA, Boolean& argumentB) { return argumentB / argumentA; } friend inline const char16_t operator /(const char16_t argumentA, const Boolean& argumentB) { return argumentB / argumentA; }
            inline const char32_t operator /(const char32_t argument) const { return (this -> value ? 1u : 0u) / argument; } friend inline const char32_t operator /(const char32_t argumentA, Boolean& argumentB) { return argumentB / argumentA; } friend inline const char32_t operator /(const char32_t argumentA, const Boolean& argumentB) { return argumentB / argumentA; }
            inline const double operator /(const double argument) const { return (this -> value ? 1.0 : 0.0) / argument; } friend inline const double operator /(const double argumentA, Boolean& argumentB) { return argumentB / argumentA; } friend inline const double operator /(const double argumentA, const Boolean& argumentB) { return argumentB / argumentA; }
            inline const float operator /(const float argument) const { return (this -> value ? 1.0f : 0.0f) / argument; } friend inline const float operator /(const float argumentA, Boolean& argumentB) { return argumentB / argumentA; } friend inline const float operator /(const float argumentA, const Boolean& argumentB) { return argumentB / argumentA; }
            inline const int operator /(const int argument) const { return (this -> value ? 1 : 0) / argument; } friend inline const int operator /(const int argumentA, Boolean& argumentB) { return argumentB / argumentA; } friend inline const int operator /(const int argumentA, const Boolean& argumentB) { return argumentB / argumentA; }
            inline const long operator /(const long argument) const { return (this -> value ? 1L : 0L) / argument; } friend inline const long operator /(const long argumentA, Boolean& argumentB) { return argumentB / argumentA; } friend inline const long operator /(const long argumentA, const Boolean& argumentB) { return argumentB / argumentA; }
            inline const long double operator /(const long double argument) const { return (this -> value ? 1.00 : 0.00) / argument; } friend inline const long double operator /(const long double argumentA, Boolean& argumentB) { return argumentB / argumentA; } friend inline const long double operator /(const long double argumentA, const Boolean& argumentB) { return argumentB / argumentA; }
            inline const long long operator /(const long long argument) const { return (this -> value ? 1LL : 0LL) / argument; } friend inline const long long operator /(const long long argumentA, Boolean& argumentB) { return argumentB / argumentA; } friend inline const long long operator /(const long long argumentA, const Boolean& argumentB) { return argumentB / argumentA; }
            inline const short operator /(const short argument) const { return (this -> value ? 1 : 0) / argument; } friend inline const short operator /(const short argumentA, Boolean& argumentB) { return argumentB / argumentA; } friend inline const short operator /(const short argumentA, const Boolean& argumentB) { return argumentB / argumentA; }
            inline const signed char operator /(const signed char argument) const { return (this -> value ? 1 : 0) / argument; } friend inline const signed char operator /(const signed char argumentA, Boolean& argumentB) { return argumentB / argumentA; } friend inline const signed char operator /(const signed char argumentA, const Boolean& argumentB) { return argumentB / argumentA; }
            inline const unsigned char operator /(const unsigned char argument) const { return this -> value / argument; } friend inline const unsigned char operator /(const unsigned char argumentA, Boolean& argumentB) { return argumentB / argumentA; } friend inline const unsigned char operator /(const unsigned char argumentA, const Boolean& argumentB) { return argumentB / argumentA; }
            inline const unsigned int operator /(const unsigned int argument) const { return this -> value / argument; } friend inline const unsigned int operator /(const unsigned int argumentA, Boolean& argumentB) { return argumentB / argumentA; } friend inline const unsigned int operator /(const unsigned int argumentA, const Boolean& argumentB) { return argumentB / argumentA; }
            inline const unsigned long operator /(const unsigned long argument) const { return (this -> value ? 1uL : 0uL) / argument; } friend inline const unsigned long operator /(const unsigned long argumentA, Boolean& argumentB) { return argumentB / argumentA; } friend inline const unsigned long operator /(const unsigned long argumentA, const Boolean& argumentB) { return argumentB / argumentA; }
            inline const unsigned long long operator /(const unsigned long long argument) const { return (this -> value ? 1uLL : 0uLL) / argument; } friend inline const unsigned long long operator /(const unsigned long long argumentA, Boolean& argumentB) { return argumentB / argumentA; } friend inline const unsigned long long operator /(const unsigned long long argumentA, const Boolean& argumentB) { return argumentB / argumentA; }
            inline const unsigned short operator /(const unsigned short argument) const { return this -> value / argument; } friend inline const unsigned short operator /(const unsigned short argumentA, Boolean& argumentB) { return argumentB / argumentA; } friend inline const unsigned short operator /(const unsigned short argumentA, const Boolean& argumentB) { return argumentB / argumentA; }
            inline const wchar_t operator /(const wchar_t argument) const { return (this -> value ? 1u : 0u) / argument; } friend inline const wchar_t operator /(const wchar_t argumentA, Boolean& argumentB) { return argumentB / argumentA; } friend inline const wchar_t operator /(const wchar_t argumentA, const Boolean& argumentB) { return argumentB / argumentA; }

            inline const Boolean operator /(Boolean& argument) const { return this -> value / argument.valueOf(); }
            inline const Boolean operator /(const Boolean& argument) const { return this -> value / argument.valueOf(); }
            inline const Number operator /(Number&); friend inline const Number operator /(Number&, Boolean&); friend inline const Number operator /(Number& argumentA, const Boolean&);
            inline const Number operator /(const Number&); friend inline const Number operator /(const Number& argumentA, Boolean&); friend inline const Number operator /(const Number& argumentA, const Boolean&);

            // [%]
            inline const char operator %(const char argument) const { return LDKM::mod(this -> value ? 1 : 0, argument); } friend inline const char operator %(const char argumentA, Boolean& argumentB) { return argumentB % argumentA; } friend inline const char operator %(const char argumentA, const Boolean& argumentB) { return argumentB % argumentA; }
            inline const char16_t operator %(const char16_t argument) const { return LDKM::mod(this -> value ? 1u : 0u, argument); } friend inline const char16_t operator %(const char16_t argumentA, Boolean& argumentB) { return argumentB % argumentA; } friend inline const char16_t operator %(const char16_t argumentA, const Boolean& argumentB) { return argumentB % argumentA; }
            inline const char32_t operator %(const char32_t argument) const { return LDKM::mod(this -> value ? 1u : 0u, argument); } friend inline const char32_t operator %(const char32_t argumentA, Boolean& argumentB) { return argumentB % argumentA; } friend inline const char32_t operator %(const char32_t argumentA, const Boolean& argumentB) { return argumentB % argumentA; }
            const double operator %(const double argument) const { return LDKM::mod(this -> value ? 1.0 : 0.0, argument); } friend inline const double operator %(const double argumentA, Boolean& argumentB) { return argumentB % argumentA; } friend inline const double operator %(const double argumentA, const Boolean& argumentB) { return argumentB % argumentA; }
            const float operator %(const float argument) const { return LDKM::mod(this -> value ? 1.0f : 0.0f, argument); } friend inline const float operator %(const float argumentA, Boolean& argumentB) { return argumentB % argumentA; } friend inline const float operator %(const float argumentA, const Boolean& argumentB) { return argumentB % argumentA; }
            inline const int operator %(const int argument) const { return LDKM::mod(this -> value ? 1 : 0, argument); } friend inline const int operator %(const int argumentA, Boolean& argumentB) { return argumentB % argumentA; } friend inline const int operator %(const int argumentA, const Boolean& argumentB) { return argumentB % argumentA; }
            inline const long operator %(const long argument) const { return LDKM::mod(this -> value ? 1L : 0L, argument); } friend inline const long operator %(const long argumentA, Boolean& argumentB) { return argumentB % argumentA; } friend inline const long operator %(const long argumentA, const Boolean& argumentB) { return argumentB % argumentA; }
            const long double operator %(const long double argument) const { return LDKM::mod(this -> value ? 1.00 : 0.00, argument); } friend inline const long double operator %(const long double argumentA, Boolean& argumentB) { return argumentB % argumentA; } friend inline const long double operator %(const long double argumentA, const Boolean& argumentB) { return argumentB % argumentA; }
            inline const long long operator %(const long long argument) const { return LDKM::mod(this -> value ? 1LL : 0LL, argument); } friend inline const long long operator %(const long long argumentA, Boolean& argumentB) { return argumentB % argumentA; } friend inline const long long operator %(const long long argumentA, const Boolean& argumentB) { return argumentB % argumentA; }
            inline const short operator %(const short argument) const { return LDKM::mod(this -> value ? 1 : 0, argument); } friend inline const short operator %(const short argumentA, Boolean& argumentB) { return argumentB % argumentA; } friend inline const short operator %(const short argumentA, const Boolean& argumentB) { return argumentB % argumentA; }
            inline const signed char operator %(const signed char argument) const { return LDKM::mod(this -> value ? 1 : 0, argument); } friend inline const signed char operator %(const signed char argumentA, Boolean& argumentB) { return argumentB % argumentA; } friend inline const signed char operator %(const signed char argumentA, const Boolean& argumentB) { return argumentB % argumentA; }
            inline const unsigned char operator %(const unsigned char argument) const { return LDKM::mod(this -> value, argument); } friend inline const unsigned char operator %(const unsigned char argumentA, Boolean& argumentB) { return argumentB % argumentA; } friend inline const unsigned char operator %(const unsigned char argumentA, const Boolean& argumentB) { return argumentB % argumentA; }
            inline const unsigned int operator %(const unsigned int argument) const { return LDKM::mod(this -> value, argument); } friend inline const unsigned int operator %(const unsigned int argumentA, Boolean& argumentB) { return argumentB % argumentA; } friend inline const unsigned int operator %(const unsigned int argumentA, const Boolean& argumentB) { return argumentB % argumentA; }
            inline const unsigned long operator %(const unsigned long argument) const { return LDKM::mod(this -> value ? 1uL : 0uL, argument); } friend inline const unsigned long operator %(const unsigned long argumentA, Boolean& argumentB) { return argumentB % argumentA; } friend inline const unsigned long operator %(const unsigned long argumentA, const Boolean& argumentB) { return argumentB % argumentA; }
            inline const unsigned long long operator %(const unsigned long long argument) const { return LDKM::mod(this -> value ? 1uLL : 0uLL, argument); } friend inline const unsigned long long operator %(const unsigned long long argumentA, Boolean& argumentB) { return argumentB % argumentA; } friend inline const unsigned long long operator %(const unsigned long long argumentA, const Boolean& argumentB) { return argumentB % argumentA; }
            inline const unsigned short operator %(const unsigned short argument) const { return LDKM::mod(this -> value, argument); } friend inline const unsigned short operator %(const unsigned short argumentA, Boolean& argumentB) { return argumentB % argumentA; } friend inline const unsigned short operator %(const unsigned short argumentA, const Boolean& argumentB) { return argumentB % argumentA; }
            inline const wchar_t operator %(const wchar_t argument) const { return LDKM::mod(this -> value ? 1u : 0u, argument); } friend inline const wchar_t operator %(const wchar_t argumentA, Boolean& argumentB) { return argumentB % argumentA; } friend inline const wchar_t operator %(const wchar_t argumentA, const Boolean& argumentB) { return argumentB % argumentA; }

            inline const Boolean operator %(Boolean& argument) const { return LDKM::mod(this -> value, argument.valueOf()); }
            inline const Boolean operator %(const Boolean& argument) const { return LDKM::mod(this -> value, argument.valueOf()); }
            inline const Number operator %(Number&); friend inline const Number operator %(Number&, Boolean&); friend inline const Number operator %(Number& argumentA, const Boolean&);
            inline const Number operator %(const Number&); friend inline const Number operator %(const Number& argumentA, Boolean&); friend inline const Number operator %(const Number& argumentA, const Boolean&);

            // [^]
            inline const char operator ^(const char argument) const { return (this -> value ? 1 : 0) ^ argument; } friend inline const char operator ^(const char argumentA, Boolean& argumentB) { return argumentB ^ argumentA; } friend inline const char operator ^(const char argumentA, const Boolean& argumentB) { return argumentB ^ argumentA; }
            inline const char16_t operator ^(const char16_t argument) const { return (this -> value ? 1u : 0u) ^ argument; } friend inline const char16_t operator ^(const char16_t argumentA, Boolean& argumentB) { return argumentB ^ argumentA; } friend inline const char16_t operator ^(const char16_t argumentA, const Boolean& argumentB) { return argumentB ^ argumentA; }
            inline const char32_t operator ^(const char32_t argument) const { return (this -> value ? 1u : 0u) ^ argument; } friend inline const char32_t operator ^(const char32_t argumentA, Boolean& argumentB) { return argumentB ^ argumentA; } friend inline const char32_t operator ^(const char32_t argumentA, const Boolean& argumentB) { return argumentB ^ argumentA; }
            inline const double operator ^(const double argument) const { return (this -> value ? 1 : 0) ^ LDKF::numberToInteger(argument); } friend inline const double operator ^(const double argumentA, Boolean& argumentB) { return argumentB ^ argumentA; } friend inline const double operator ^(const double argumentA, const Boolean& argumentB) { return argumentB ^ argumentA; }
            inline const float operator ^(const float argument) const { return (this -> value ? 1 : 0) ^ LDKF::numberToInteger(argument); } friend inline const float operator ^(const float argumentA, Boolean& argumentB) { return argumentB ^ argumentA; } friend inline const float operator ^(const float argumentA, const Boolean& argumentB) { return argumentB ^ argumentA; }
            inline const int operator ^(const int argument) const { return (this -> value ? 1 : 0) ^ argument; } friend inline const int operator ^(const int argumentA, Boolean& argumentB) { return argumentB ^ argumentA; } friend inline const int operator ^(const int argumentA, const Boolean& argumentB) { return argumentB ^ argumentA; }
            inline const long operator ^(const long argument) const { return (this -> value ? 1L : 0L) ^ argument; } friend inline const long operator ^(const long argumentA, Boolean& argumentB) { return argumentB ^ argumentA; } friend inline const long operator ^(const long argumentA, const Boolean& argumentB) { return argumentB ^ argumentA; }
            inline const long double operator ^(const long double argument) const { return (this -> value ? 1 : 0) ^ LDKF::numberToInteger(argument); } friend inline const long double operator ^(const long double argumentA, Boolean& argumentB) { return argumentB ^ argumentA; } friend inline const long double operator ^(const long double argumentA, const Boolean& argumentB) { return argumentB ^ argumentA; }
            inline const long long operator ^(const long long argument) const { return (this -> value ? 1LL : 0LL) ^ argument; } friend inline const long long operator ^(const long long argumentA, Boolean& argumentB) { return argumentB ^ argumentA; } friend inline const long long operator ^(const long long argumentA, const Boolean& argumentB) { return argumentB ^ argumentA; }
            inline const short operator ^(const short argument) const { return (this -> value ? 1 : 0) ^ argument; } friend inline const short operator ^(const short argumentA, Boolean& argumentB) { return argumentB ^ argumentA; } friend inline const short operator ^(const short argumentA, const Boolean& argumentB) { return argumentB ^ argumentA; }
            inline const signed char operator ^(const signed char argument) const { return (this -> value ? 1 : 0) ^ argument; } friend inline const signed char operator ^(const signed char argumentA, Boolean& argumentB) { return argumentB ^ argumentA; } friend inline const signed char operator ^(const signed char argumentA, const Boolean& argumentB) { return argumentB ^ argumentA; }
            inline const unsigned char operator ^(const unsigned char argument) const { return this -> value ^ argument; } friend inline const unsigned char operator ^(const unsigned char argumentA, Boolean& argumentB) { return argumentB ^ argumentA; } friend inline const unsigned char operator ^(const unsigned char argumentA, const Boolean& argumentB) { return argumentB ^ argumentA; }
            inline const unsigned int operator ^(const unsigned int argument) const { return this -> value ^ argument; } friend inline const unsigned int operator ^(const unsigned int argumentA, Boolean& argumentB) { return argumentB ^ argumentA; } friend inline const unsigned int operator ^(const unsigned int argumentA, const Boolean& argumentB) { return argumentB ^ argumentA; }
            inline const unsigned long operator ^(const unsigned long argument) const { return (this -> value ? 1uL : 0uL) ^ argument; } friend inline const unsigned long operator ^(const unsigned long argumentA, Boolean& argumentB) { return argumentB ^ argumentA; } friend inline const unsigned long operator ^(const unsigned long argumentA, const Boolean& argumentB) { return argumentB ^ argumentA; }
            inline const unsigned long long operator ^(const unsigned long long argument) const { return (this -> value ? 1uLL : 0uLL) ^ argument; } friend inline const unsigned long long operator ^(const unsigned long long argumentA, Boolean& argumentB) { return argumentB ^ argumentA; } friend inline const unsigned long long operator ^(const unsigned long long argumentA, const Boolean& argumentB) { return argumentB ^ argumentA; }
            inline const unsigned short operator ^(const unsigned short argument) const { return this -> value ^ argument; } friend inline const unsigned short operator ^(const unsigned short argumentA, Boolean& argumentB) { return argumentB ^ argumentA; } friend inline const unsigned short operator ^(const unsigned short argumentA, const Boolean& argumentB) { return argumentB ^ argumentA; }
            inline const wchar_t operator ^(const wchar_t argument) const { return (this -> value ? 1u : 0u) ^ argument; } friend inline const wchar_t operator ^(const wchar_t argumentA, Boolean& argumentB) { return argumentB ^ argumentA; } friend inline const wchar_t operator ^(const wchar_t argumentA, const Boolean& argumentB) { return argumentB ^ argumentA; }

            inline const Boolean operator ^(Boolean& argument) const { return this -> value ^ argument.valueOf(); }
            inline const Boolean operator ^(const Boolean& argument) const { return this -> value ^ argument.valueOf(); }
            inline const Number operator ^(Number&); friend inline const Number operator ^(Number&, Boolean&); friend inline const Number operator ^(Number& argumentA, const Boolean&);
            inline const Number operator ^(const Number&); friend inline const Number operator ^(const Number& argumentA, Boolean&); friend inline const Number operator ^(const Number& argumentA, const Boolean&);

            // [&]
            inline const char operator &(const char argument) const { return (this -> value ? 1 : 0) & argument; } friend inline const char operator &(const char argumentA, Boolean& argumentB) { return argumentB & argumentA; } friend inline const char operator &(const char argumentA, const Boolean& argumentB) { return argumentB & argumentA; }
            inline const char16_t operator &(const char16_t argument) const { return (this -> value ? 1u : 0u) & argument; } friend inline const char16_t operator &(const char16_t argumentA, Boolean& argumentB) { return argumentB & argumentA; } friend inline const char16_t operator &(const char16_t argumentA, const Boolean& argumentB) { return argumentB & argumentA; }
            inline const char32_t operator &(const char32_t argument) const { return (this -> value ? 1u : 0u) & argument; } friend inline const char32_t operator &(const char32_t argumentA, Boolean& argumentB) { return argumentB & argumentA; } friend inline const char32_t operator &(const char32_t argumentA, const Boolean& argumentB) { return argumentB & argumentA; }
            inline const double operator &(const double argument) const { return (this -> value ? 1 : 0) & LDKF::numberToInteger(argument); } friend inline const double operator &(const double argumentA, Boolean& argumentB) { return argumentB & argumentA; } friend inline const double operator &(const double argumentA, const Boolean& argumentB) { return argumentB & argumentA; }
            inline const float operator &(const float argument) const { return (this -> value ? 1 : 0) & LDKF::numberToInteger(argument); } friend inline const float operator &(const float argumentA, Boolean& argumentB) { return argumentB & argumentA; } friend inline const float operator &(const float argumentA, const Boolean& argumentB) { return argumentB & argumentA; }
            inline const int operator &(const int argument) const { return (this -> value ? 1 : 0) & argument; } friend inline const int operator &(const int argumentA, Boolean& argumentB) { return argumentB & argumentA; } friend inline const int operator &(const int argumentA, const Boolean& argumentB) { return argumentB & argumentA; }
            inline const long operator &(const long argument) const { return (this -> value ? 1L : 0L) & argument; } friend inline const long operator &(const long argumentA, Boolean& argumentB) { return argumentB & argumentA; } friend inline const long operator &(const long argumentA, const Boolean& argumentB) { return argumentB & argumentA; }
            inline const long double operator &(const long double argument) const { return (this -> value ? 1 : 0) & LDKF::numberToInteger(argument); } friend inline const long double operator &(const long double argumentA, Boolean& argumentB) { return argumentB & argumentA; } friend inline const long double operator &(const long double argumentA, const Boolean& argumentB) { return argumentB & argumentA; }
            inline const long long operator &(const long long argument) const { return (this -> value ? 1LL : 0LL) & argument; } friend inline const long long operator &(const long long argumentA, Boolean& argumentB) { return argumentB & argumentA; } friend inline const long long operator &(const long long argumentA, const Boolean& argumentB) { return argumentB & argumentA; }
            inline const short operator &(const short argument) const { return (this -> value ? 1 : 0) & argument; } friend inline const short operator &(const short argumentA, Boolean& argumentB) { return argumentB & argumentA; } friend inline const short operator &(const short argumentA, const Boolean& argumentB) { return argumentB & argumentA; }
            inline const signed char operator &(const signed char argument) const { return (this -> value ? 1 : 0) & argument; } friend inline const signed char operator &(const signed char argumentA, Boolean& argumentB) { return argumentB & argumentA; } friend inline const signed char operator &(const signed char argumentA, const Boolean& argumentB) { return argumentB & argumentA; }
            inline const unsigned char operator &(const unsigned char argument) const { return this -> value & argument; } friend inline const unsigned char operator &(const unsigned char argumentA, Boolean& argumentB) { return argumentB & argumentA; } friend inline const unsigned char operator &(const unsigned char argumentA, const Boolean& argumentB) { return argumentB & argumentA; }
            inline const unsigned int operator &(const unsigned int argument) const { return this -> value & argument; } friend inline const unsigned int operator &(const unsigned int argumentA, Boolean& argumentB) { return argumentB & argumentA; } friend inline const unsigned int operator &(const unsigned int argumentA, const Boolean& argumentB) { return argumentB & argumentA; }
            inline const unsigned long operator &(const unsigned long argument) const { return (this -> value ? 1uL : 0uL) & argument; } friend inline const unsigned long operator &(const unsigned long argumentA, Boolean& argumentB) { return argumentB & argumentA; } friend inline const unsigned long operator &(const unsigned long argumentA, const Boolean& argumentB) { return argumentB & argumentA; }
            inline const unsigned long long operator &(const unsigned long long argument) const { return (this -> value ? 1uLL : 0uLL) & argument; } friend inline const unsigned long long operator &(const unsigned long long argumentA, Boolean& argumentB) { return argumentB & argumentA; } friend inline const unsigned long long operator &(const unsigned long long argumentA, const Boolean& argumentB) { return argumentB & argumentA; }
            inline const unsigned short operator &(const unsigned short argument) const { return this -> value & argument; } friend inline const unsigned short operator &(const unsigned short argumentA, Boolean& argumentB) { return argumentB & argumentA; } friend inline const unsigned short operator &(const unsigned short argumentA, const Boolean& argumentB) { return argumentB & argumentA; }
            inline const wchar_t operator &(const wchar_t argument) const { return (this -> value ? 1u : 0u) & argument; } friend inline const wchar_t operator &(const wchar_t argumentA, Boolean& argumentB) { return argumentB & argumentA; } friend inline const wchar_t operator &(const wchar_t argumentA, const Boolean& argumentB) { return argumentB & argumentA; }

            inline const Boolean operator &(Boolean& argument) const { return this -> value & argument.valueOf(); }
            inline const Boolean operator &(const Boolean& argument) const { return this -> value & argument.valueOf(); }
            inline const Number operator &(Number&); friend inline const Number operator &(Number&, Boolean&); friend inline const Number operator &(Number& argumentA, const Boolean&);
            inline const Number operator &(const Number&); friend inline const Number operator &(const Number& argumentA, Boolean&); friend inline const Number operator &(const Number& argumentA, const Boolean&);

            // [|]
            inline const char operator |(const char argument) const { return (this -> value ? 1 : 0) | argument; } friend inline const char operator |(const char argumentA, Boolean& argumentB) { return argumentB | argumentA; } friend inline const char operator |(const char argumentA, const Boolean& argumentB) { return argumentB | argumentA; }
            inline const char16_t operator |(const char16_t argument) const { return (this -> value ? 1u : 0u) | argument; } friend inline const char16_t operator |(const char16_t argumentA, Boolean& argumentB) { return argumentB | argumentA; } friend inline const char16_t operator |(const char16_t argumentA, const Boolean& argumentB) { return argumentB | argumentA; }
            inline const char32_t operator |(const char32_t argument) const { return (this -> value ? 1u : 0u) | argument; } friend inline const char32_t operator |(const char32_t argumentA, Boolean& argumentB) { return argumentB | argumentA; } friend inline const char32_t operator |(const char32_t argumentA, const Boolean& argumentB) { return argumentB | argumentA; }
            inline const double operator |(const double argument) const { return (this -> value ? 1 : 0) | LDKF::numberToInteger(argument); } friend inline const double operator |(const double argumentA, Boolean& argumentB) { return argumentB | argumentA; } friend inline const double operator |(const double argumentA, const Boolean& argumentB) { return argumentB | argumentA; }
            inline const float operator |(const float argument) const { return (this -> value ? 1 : 0) | LDKF::numberToInteger(argument); } friend inline const float operator |(const float argumentA, Boolean& argumentB) { return argumentB | argumentA; } friend inline const float operator |(const float argumentA, const Boolean& argumentB) { return argumentB | argumentA; }
            inline const int operator |(const int argument) const { return (this -> value ? 1 : 0) | argument; } friend inline const int operator |(const int argumentA, Boolean& argumentB) { return argumentB | argumentA; } friend inline const int operator |(const int argumentA, const Boolean& argumentB) { return argumentB | argumentA; }
            inline const long operator |(const long argument) const { return (this -> value ? 1L : 0L) | argument; } friend inline const long operator |(const long argumentA, Boolean& argumentB) { return argumentB | argumentA; } friend inline const long operator |(const long argumentA, const Boolean& argumentB) { return argumentB | argumentA; }
            inline const long double operator |(const long double argument) const { return (this -> value ? 1 : 0) | LDKF::numberToInteger(argument); } friend inline const long double operator |(const long double argumentA, Boolean& argumentB) { return argumentB | argumentA; } friend inline const long double operator |(const long double argumentA, const Boolean& argumentB) { return argumentB | argumentA; }
            inline const long long operator |(const long long argument) const { return (this -> value ? 1LL : 0LL) | argument; } friend inline const long long operator |(const long long argumentA, Boolean& argumentB) { return argumentB | argumentA; } friend inline const long long operator |(const long long argumentA, const Boolean& argumentB) { return argumentB | argumentA; }
            inline const short operator |(const short argument) const { return (this -> value ? 1 : 0) | argument; } friend inline const short operator |(const short argumentA, Boolean& argumentB) { return argumentB | argumentA; } friend inline const short operator |(const short argumentA, const Boolean& argumentB) { return argumentB | argumentA; }
            inline const signed char operator |(const signed char argument) const { return (this -> value ? 1 : 0) | argument; } friend inline const signed char operator |(const signed char argumentA, Boolean& argumentB) { return argumentB | argumentA; } friend inline const signed char operator |(const signed char argumentA, const Boolean& argumentB) { return argumentB | argumentA; }
            inline const unsigned char operator |(const unsigned char argument) const { return this -> value | argument; } friend inline const unsigned char operator |(const unsigned char argumentA, Boolean& argumentB) { return argumentB | argumentA; } friend inline const unsigned char operator |(const unsigned char argumentA, const Boolean& argumentB) { return argumentB | argumentA; }
            inline const unsigned int operator |(const unsigned int argument) const { return this -> value | argument; } friend inline const unsigned int operator |(const unsigned int argumentA, Boolean& argumentB) { return argumentB | argumentA; } friend inline const unsigned int operator |(const unsigned int argumentA, const Boolean& argumentB) { return argumentB | argumentA; }
            inline const unsigned long operator |(const unsigned long argument) const { return (this -> value ? 1uL : 0uL) | argument; } friend inline const unsigned long operator |(const unsigned long argumentA, Boolean& argumentB) { return argumentB | argumentA; } friend inline const unsigned long operator |(const unsigned long argumentA, const Boolean& argumentB) { return argumentB | argumentA; }
            inline const unsigned long long operator |(const unsigned long long argument) const { return (this -> value ? 1uLL : 0uLL) | argument; } friend inline const unsigned long long operator |(const unsigned long long argumentA, Boolean& argumentB) { return argumentB | argumentA; } friend inline const unsigned long long operator |(const unsigned long long argumentA, const Boolean& argumentB) { return argumentB | argumentA; }
            inline const unsigned short operator |(const unsigned short argument) const { return this -> value | argument; } friend inline const unsigned short operator |(const unsigned short argumentA, Boolean& argumentB) { return argumentB | argumentA; } friend inline const unsigned short operator |(const unsigned short argumentA, const Boolean& argumentB) { return argumentB | argumentA; }
            inline const wchar_t operator |(const wchar_t argument) const { return (this -> value ? 1u : 0u) | argument; } friend inline const wchar_t operator |(const wchar_t argumentA, Boolean& argumentB) { return argumentB | argumentA; } friend inline const wchar_t operator |(const wchar_t argumentA, const Boolean& argumentB) { return argumentB | argumentA; }

            inline const Boolean operator |(Boolean& argument) const { return this -> value | argument.valueOf(); }
            inline const Boolean operator |(const Boolean& argument) const { return this -> value | argument.valueOf(); }
            inline const Number operator |(Number&); friend inline const Number operator |(Number&, Boolean&); friend inline const Number operator |(Number& argumentA, const Boolean&);
            inline const Number operator |(const Number&); friend inline const Number operator |(const Number& argumentA, Boolean&); friend inline const Number operator |(const Number& argumentA, const Boolean&);

            // [~]
            inline const Number operator ~();

            // [!]
            inline const Boolean operator !() const { return this -> value ? 0u : 1u; }

            // [=]
            inline Boolean& operator =(const unsigned char argument) { this -> value = argument ? 1u : 0u; return *this; }
            inline Boolean& operator =(Boolean& argument) { this -> value = argument.valueOf(); return *this; }
            inline Boolean& operator =(const Boolean& argument) { this -> value = argument.valueOf(); return *this; }

            // [<]
            inline const Boolean operator <(const char argument) const { return (this -> value ? 1 : 0) < argument; } friend inline const Boolean operator <(const char argumentA, Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator <(const char argumentA, const Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator <(const char16_t argument) const { return (this -> value ? 1u : 0u) < argument; } friend inline const Boolean operator <(const char16_t argumentA, Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator <(const char16_t argumentA, const Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1u : 0u); }
            inline const Boolean operator <(const char32_t argument) const { return (this -> value ? 1u : 0u) < argument; } friend inline const Boolean operator <(const char32_t argumentA, Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator <(const char32_t argumentA, const Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1u : 0u); }
            inline const Boolean operator <(const double argument) const { return (this -> value ? 1.0 : 0.0) < argument; } friend inline const Boolean operator <(const double argumentA, Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1.0 : 0.0); } friend inline const Boolean operator <(const double argumentA, const Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1.0 : 0.0); }
            inline const Boolean operator <(const float argument) const { return (this -> value ? 1.0f : 0.0f) < argument; } friend inline const Boolean operator <(const float argumentA, Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1.0f : 0.0f); } friend inline const Boolean operator <(const float argumentA, const Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1.0f : 0.0f); }
            inline const Boolean operator <(const int argument) const { return (this -> value ? 1 : 0) < argument; } friend inline const Boolean operator <(const int argumentA, Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator <(const int argumentA, const Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator <(const long argument) const { return (this -> value ? 1L : 0L) < argument; } friend inline const Boolean operator <(const long argumentA, Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1L : 0L); } friend inline const Boolean operator <(const long argumentA, const Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1L : 0L); }
            inline const Boolean operator <(const long double argument) const { return (this -> value ? 1.00 : 0.00) < argument; } friend inline const Boolean operator <(const long double argumentA, Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1.00 : 0.00); } friend inline const Boolean operator <(const long double argumentA, const Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1.00 : 0.00); }
            inline const Boolean operator <(const long long argument) const { return (this -> value ? 1LL : 0LL) < argument; } friend inline const Boolean operator <(const long long argumentA, Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1LL : 0LL); } friend inline const Boolean operator <(const long long argumentA, const Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1LL : 0LL); }
            inline const Boolean operator <(const short argument) const { return (this -> value ? 1 : 0) < argument; } friend inline const Boolean operator <(const short argumentA, Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator <(const short argumentA, const Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator <(const signed char argument) const { return (this -> value ? 1 : 0) < argument; } friend inline const Boolean operator <(const signed char argumentA, Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator <(const signed char argumentA, const Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator <(const unsigned char argument) const { return this -> value < argument; } friend inline const Boolean operator <(const unsigned char argumentA, Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator <(const unsigned char argumentA, const Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1u : 0u); }
            inline const Boolean operator <(const unsigned int argument) const { return this -> value < argument; } friend inline const Boolean operator <(const unsigned int argumentA, Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator <(const unsigned int argumentA, const Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator <(const unsigned long argument) const { return (this -> value ? 1uL : 0uL) < argument; } friend inline const Boolean operator <(const unsigned long argumentA, Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1uL : 0uL); } friend inline const Boolean operator <(const unsigned long argumentA, const Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1uL : 0uL); }
            inline const Boolean operator <(const unsigned long long argument) const { return (this -> value ? 1uLL : 0uLL) < argument; } friend inline const Boolean operator <(const unsigned long long argumentA, Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1uLL : 0uLL); } friend inline const Boolean operator <(const unsigned long long argumentA, const Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1uLL : 0uLL); }
            inline const Boolean operator <(const unsigned short argument) const { return this -> value < argument; } friend inline const Boolean operator <(const unsigned short argumentA, Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator <(const unsigned short argumentA, const Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator <(const wchar_t argument) const { return (this -> value ? 1u : 0u) < argument; } friend inline const Boolean operator <(const wchar_t argumentA, Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator <(const wchar_t argumentA, const Boolean& argumentB) { return argumentA < (argumentB.valueOf() ? 1u : 0u); }

            inline const Boolean operator <(Boolean& argument) const { return this -> value < argument.valueOf(); }
            inline const Boolean operator <(const Boolean& argument) const { return this -> value < argument.valueOf(); }
            inline const Boolean operator <(Number&); friend inline const Boolean operator <(Number&, Boolean&); friend inline const Boolean operator <(Number& argumentA, const Boolean&);
            inline const Boolean operator <(const Number&); friend inline const Boolean operator <(const Number& argumentA, Boolean&); friend inline const Boolean operator <(const Number& argumentA, const Boolean&);
            inline const Boolean operator <(String&); friend inline const Boolean operator <(String&, Boolean&); friend inline const Boolean operator <(String& argumentA, const Boolean&);
            inline const Boolean operator <(const String&); friend inline const Boolean operator <(const String&, Boolean&); friend inline const Boolean operator <(const String& argumentA, const Boolean&);

            // [>]
            inline const Boolean operator >(const char argument) const { return (this -> value ? 1 : 0) > argument; } friend inline const Boolean operator >(const char argumentA, Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator >(const char argumentA, const Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator >(const char16_t argument) const { return (this -> value ? 1u : 0u) > argument; } friend inline const Boolean operator >(const char16_t argumentA, Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator >(const char16_t argumentA, const Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1u : 0u); }
            inline const Boolean operator >(const char32_t argument) const { return (this -> value ? 1u : 0u) > argument; } friend inline const Boolean operator >(const char32_t argumentA, Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator >(const char32_t argumentA, const Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1u : 0u); }
            inline const Boolean operator >(const double argument) const { return (this -> value ? 1.0 : 0.0) > argument; } friend inline const Boolean operator >(const double argumentA, Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1.0 : 0.0); } friend inline const Boolean operator >(const double argumentA, const Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1.0 : 0.0); }
            inline const Boolean operator >(const float argument) const { return (this -> value ? 1.0f : 0.0f) > argument; } friend inline const Boolean operator >(const float argumentA, Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1.0f : 0.0f); } friend inline const Boolean operator >(const float argumentA, const Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1.0f : 0.0f); }
            inline const Boolean operator >(const int argument) const { return (this -> value ? 1 : 0) > argument; } friend inline const Boolean operator >(const int argumentA, Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator >(const int argumentA, const Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator >(const long argument) const { return (this -> value ? 1L : 0L) > argument; } friend inline const Boolean operator >(const long argumentA, Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1L : 0L); } friend inline const Boolean operator >(const long argumentA, const Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1L : 0L); }
            inline const Boolean operator >(const long double argument) const { return (this -> value ? 1.00 : 0.00) > argument; } friend inline const Boolean operator >(const long double argumentA, Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1.00 : 0.00); } friend inline const Boolean operator >(const long double argumentA, const Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1.00 : 0.00); }
            inline const Boolean operator >(const long long argument) const { return (this -> value ? 1LL : 0LL) > argument; } friend inline const Boolean operator >(const long long argumentA, Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1LL : 0LL); } friend inline const Boolean operator >(const long long argumentA, const Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1LL : 0LL); }
            inline const Boolean operator >(const short argument) const { return (this -> value ? 1 : 0) > argument; } friend inline const Boolean operator >(const short argumentA, Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator >(const short argumentA, const Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator >(const signed char argument) const { return (this -> value ? 1 : 0) > argument; } friend inline const Boolean operator >(const signed char argumentA, Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator >(const signed char argumentA, const Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator >(const unsigned char argument) const { return this -> value > argument; } friend inline const Boolean operator >(const unsigned char argumentA, Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator >(const unsigned char argumentA, const Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1u : 0u); }
            inline const Boolean operator >(const unsigned int argument) const { return this -> value > argument; } friend inline const Boolean operator >(const unsigned int argumentA, Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator >(const unsigned int argumentA, const Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator >(const unsigned long argument) const { return (this -> value ? 1uL : 0uL) > argument; } friend inline const Boolean operator >(const unsigned long argumentA, Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1uL : 0uL); } friend inline const Boolean operator >(const unsigned long argumentA, const Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1uL : 0uL); }
            inline const Boolean operator >(const unsigned long long argument) const { return (this -> value ? 1uLL : 0uLL) > argument; } friend inline const Boolean operator >(const unsigned long long argumentA, Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1uLL : 0uLL); } friend inline const Boolean operator >(const unsigned long long argumentA, const Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1uLL : 0uLL); }
            inline const Boolean operator >(const unsigned short argument) const { return this -> value > argument; } friend inline const Boolean operator >(const unsigned short argumentA, Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator >(const unsigned short argumentA, const Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator >(const wchar_t argument) const { return (this -> value ? 1u : 0u) > argument; } friend inline const Boolean operator >(const wchar_t argumentA, Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator >(const wchar_t argumentA, const Boolean& argumentB) { return argumentA > (argumentB.valueOf() ? 1u : 0u); }

            inline const Boolean operator >(Boolean& argument) const { return this -> value > argument.valueOf(); }
            inline const Boolean operator >(const Boolean& argument) const { return this -> value > argument.valueOf(); }
            inline const Boolean operator >(Number&); friend inline const Boolean operator >(Number&, Boolean&); friend inline const Boolean operator >(Number& argumentA, const Boolean&);
            inline const Boolean operator >(const Number&); friend inline const Boolean operator >(const Number& argumentA, Boolean&); friend inline const Boolean operator >(const Number& argumentA, const Boolean&);
            inline const Boolean operator >(String&); friend inline const Boolean operator >(String&, Boolean&); friend inline const Boolean operator >(String& argumentA, const Boolean&);
            inline const Boolean operator >(const String&); friend inline const Boolean operator >(const String&, Boolean&); friend inline const Boolean operator >(const String& argumentA, const Boolean&);

            // [<=]
            inline const Boolean operator <=(const char argument) const { return (this -> value ? 1 : 0) <= argument; } friend inline const Boolean operator <=(const char argumentA, Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator <=(const char argumentA, const Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator <=(const char16_t argument) const { return (this -> value ? 1u : 0u) <= argument; } friend inline const Boolean operator <=(const char16_t argumentA, Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator <=(const char16_t argumentA, const Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1u : 0u); }
            inline const Boolean operator <=(const char32_t argument) const { return (this -> value ? 1u : 0u) <= argument; } friend inline const Boolean operator <=(const char32_t argumentA, Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator <=(const char32_t argumentA, const Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1u : 0u); }
            inline const Boolean operator <=(const double argument) const { return (this -> value ? 1.0 : 0.0) <= argument; } friend inline const Boolean operator <=(const double argumentA, Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1.0 : 0.0); } friend inline const Boolean operator <=(const double argumentA, const Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1.0 : 0.0); }
            inline const Boolean operator <=(const float argument) const { return (this -> value ? 1.0f : 0.0f) <= argument; } friend inline const Boolean operator <=(const float argumentA, Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1.0f : 0.0f); } friend inline const Boolean operator <=(const float argumentA, const Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1.0f : 0.0f); }
            inline const Boolean operator <=(const int argument) const { return (this -> value ? 1 : 0) <= argument; } friend inline const Boolean operator <=(const int argumentA, Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator <=(const int argumentA, const Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator <=(const long argument) const { return (this -> value ? 1L : 0L) <= argument; } friend inline const Boolean operator <=(const long argumentA, Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1L : 0L); } friend inline const Boolean operator <=(const long argumentA, const Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1L : 0L); }
            inline const Boolean operator <=(const long double argument) const { return (this -> value ? 1.00 : 0.00) <= argument; } friend inline const Boolean operator <=(const long double argumentA, Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1.00 : 0.00); } friend inline const Boolean operator <=(const long double argumentA, const Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1.00 : 0.00); }
            inline const Boolean operator <=(const long long argument) const { return (this -> value ? 1LL : 0LL) <= argument; } friend inline const Boolean operator <=(const long long argumentA, Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1LL : 0LL); } friend inline const Boolean operator <=(const long long argumentA, const Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1LL : 0LL); }
            inline const Boolean operator <=(const short argument) const { return (this -> value ? 1 : 0) <= argument; } friend inline const Boolean operator <=(const short argumentA, Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator <=(const short argumentA, const Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator <=(const signed char argument) const { return (this -> value ? 1 : 0) <= argument; } friend inline const Boolean operator <=(const signed char argumentA, Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator <=(const signed char argumentA, const Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator <=(const unsigned char argument) const { return this -> value <= argument; } friend inline const Boolean operator <=(const unsigned char argumentA, Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator <=(const unsigned char argumentA, const Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1u : 0u); }
            inline const Boolean operator <=(const unsigned int argument) const { return this -> value <= argument; } friend inline const Boolean operator <=(const unsigned int argumentA, Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator <=(const unsigned int argumentA, const Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator <=(const unsigned long argument) const { return (this -> value ? 1uL : 0uL) <= argument; } friend inline const Boolean operator <=(const unsigned long argumentA, Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1uL : 0uL); } friend inline const Boolean operator <=(const unsigned long argumentA, const Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1uL : 0uL); }
            inline const Boolean operator <=(const unsigned long long argument) const { return (this -> value ? 1uLL : 0uLL) <= argument; } friend inline const Boolean operator <=(const unsigned long long argumentA, Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1uLL : 0uLL); } friend inline const Boolean operator <=(const unsigned long long argumentA, const Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1uLL : 0uLL); }
            inline const Boolean operator <=(const unsigned short argument) const { return this -> value <= argument; } friend inline const Boolean operator <=(const unsigned short argumentA, Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator <=(const unsigned short argumentA, const Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator <=(const wchar_t argument) const { return (this -> value ? 1u : 0u) <= argument; } friend inline const Boolean operator <=(const wchar_t argumentA, Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator <=(const wchar_t argumentA, const Boolean& argumentB) { return argumentA <= (argumentB.valueOf() ? 1u : 0u); }

            inline const Boolean operator <=(Boolean& argument) const { return this -> value <= argument.valueOf(); }
            inline const Boolean operator <=(const Boolean& argument) const { return this -> value <= argument.valueOf(); }
            inline const Boolean operator <=(Number&); friend inline const Boolean operator <=(Number&, Boolean&); friend inline const Boolean operator <=(Number& argumentA, const Boolean&);
            inline const Boolean operator <=(const Number&); friend inline const Boolean operator <=(const Number& argumentA, Boolean&); friend inline const Boolean operator <=(const Number& argumentA, const Boolean&);
            inline const Boolean operator <=(String&); friend inline const Boolean operator <=(String&, Boolean&); friend inline const Boolean operator <=(String& argumentA, const Boolean&);
            inline const Boolean operator <=(const String&); friend inline const Boolean operator <=(const String&, Boolean&); friend inline const Boolean operator <=(const String& argumentA, const Boolean&);

            // [>=]
            inline const Boolean operator >=(const char argument) const { return (this -> value ? 1 : 0) >= argument; } friend inline const Boolean operator >=(const char argumentA, Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator >=(const char argumentA, const Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator >=(const char16_t argument) const { return (this -> value ? 1u : 0u) >= argument; } friend inline const Boolean operator >=(const char16_t argumentA, Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator >=(const char16_t argumentA, const Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1u : 0u); }
            inline const Boolean operator >=(const char32_t argument) const { return (this -> value ? 1u : 0u) >= argument; } friend inline const Boolean operator >=(const char32_t argumentA, Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator >=(const char32_t argumentA, const Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1u : 0u); }
            inline const Boolean operator >=(const double argument) const { return (this -> value ? 1.0 : 0.0) >= argument; } friend inline const Boolean operator >=(const double argumentA, Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1.0 : 0.0); } friend inline const Boolean operator >=(const double argumentA, const Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1.0 : 0.0); }
            inline const Boolean operator >=(const float argument) const { return (this -> value ? 1.0f : 0.0f) >= argument; } friend inline const Boolean operator >=(const float argumentA, Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1.0f : 0.0f); } friend inline const Boolean operator >=(const float argumentA, const Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1.0f : 0.0f); }
            inline const Boolean operator >=(const int argument) const { return (this -> value ? 1 : 0) >= argument; } friend inline const Boolean operator >=(const int argumentA, Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator >=(const int argumentA, const Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator >=(const long argument) const { return (this -> value ? 1L : 0L) >= argument; } friend inline const Boolean operator >=(const long argumentA, Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1L : 0L); } friend inline const Boolean operator >=(const long argumentA, const Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1L : 0L); }
            inline const Boolean operator >=(const long double argument) const { return (this -> value ? 1.00 : 0.00) >= argument; } friend inline const Boolean operator >=(const long double argumentA, Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1.00 : 0.00); } friend inline const Boolean operator >=(const long double argumentA, const Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1.00 : 0.00); }
            inline const Boolean operator >=(const long long argument) const { return (this -> value ? 1LL : 0LL) >= argument; } friend inline const Boolean operator >=(const long long argumentA, Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1LL : 0LL); } friend inline const Boolean operator >=(const long long argumentA, const Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1LL : 0LL); }
            inline const Boolean operator >=(const short argument) const { return (this -> value ? 1 : 0) >= argument; } friend inline const Boolean operator >=(const short argumentA, Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator >=(const short argumentA, const Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator >=(const signed char argument) const { return (this -> value ? 1 : 0) >= argument; } friend inline const Boolean operator >=(const signed char argumentA, Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator >=(const signed char argumentA, const Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator >=(const unsigned char argument) const { return this -> value >= argument; } friend inline const Boolean operator >=(const unsigned char argumentA, Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator >=(const unsigned char argumentA, const Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1u : 0u); }
            inline const Boolean operator >=(const unsigned int argument) const { return this -> value >= argument; } friend inline const Boolean operator >=(const unsigned int argumentA, Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator >=(const unsigned int argumentA, const Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator >=(const unsigned long argument) const { return (this -> value ? 1uL : 0uL) >= argument; } friend inline const Boolean operator >=(const unsigned long argumentA, Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1uL : 0uL); } friend inline const Boolean operator >=(const unsigned long argumentA, const Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1uL : 0uL); }
            inline const Boolean operator >=(const unsigned long long argument) const { return (this -> value ? 1uLL : 0uLL) >= argument; } friend inline const Boolean operator >=(const unsigned long long argumentA, Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1uLL : 0uLL); } friend inline const Boolean operator >=(const unsigned long long argumentA, const Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1uLL : 0uLL); }
            inline const Boolean operator >=(const unsigned short argument) const { return this -> value >= argument; } friend inline const Boolean operator >=(const unsigned short argumentA, Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator >=(const unsigned short argumentA, const Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator >=(const wchar_t argument) const { return (this -> value ? 1u : 0u) >= argument; } friend inline const Boolean operator >=(const wchar_t argumentA, Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator >=(const wchar_t argumentA, const Boolean& argumentB) { return argumentA >= (argumentB.valueOf() ? 1u : 0u); }

            inline const Boolean operator >=(Boolean& argument) const { return this -> value >= argument.valueOf(); }
            inline const Boolean operator >=(const Boolean& argument) const { return this -> value >= argument.valueOf(); }
            inline const Boolean operator >=(Number&); friend inline const Boolean operator >=(Number&, Boolean&); friend inline const Boolean operator >=(Number& argumentA, const Boolean&);
            inline const Boolean operator >=(const Number&); friend inline const Boolean operator >=(const Number& argumentA, Boolean&); friend inline const Boolean operator >=(const Number& argumentA, const Boolean&);
            inline const Boolean operator >=(String&); friend inline const Boolean operator >=(String&, Boolean&); friend inline const Boolean operator >=(String& argumentA, const Boolean&);
            inline const Boolean operator >=(const String&); friend inline const Boolean operator >=(const String&, Boolean&); friend inline const Boolean operator >=(const String& argumentA, const Boolean&);

            // [++]
            inline Number& operator ++();
            inline Number& operator ++(int);

            // [--]
            inline Number& operator --();
            inline Number& operator --(int);

            // [==]
            inline const Boolean operator ==(const char argument) const { return (this -> value ? 1 : 0) == argument; } friend inline const Boolean operator ==(const char argumentA, Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator ==(const char argumentA, const Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator ==(const char16_t argument) const { return (this -> value ? 1u : 0u) == argument; } friend inline const Boolean operator ==(const char16_t argumentA, Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator ==(const char16_t argumentA, const Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1u : 0u); }
            inline const Boolean operator ==(const char32_t argument) const { return (this -> value ? 1u : 0u) == argument; } friend inline const Boolean operator ==(const char32_t argumentA, Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator ==(const char32_t argumentA, const Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1u : 0u); }
            inline const Boolean operator ==(const double argument) const { return (this -> value ? 1.0 : 0.0) == argument; } friend inline const Boolean operator ==(const double argumentA, Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1.0 : 0.0); } friend inline const Boolean operator ==(const double argumentA, const Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1.0 : 0.0); }
            inline const Boolean operator ==(const float argument) const { return (this -> value ? 1.0f : 0.0f) == argument; } friend inline const Boolean operator ==(const float argumentA, Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1.0f : 0.0f); } friend inline const Boolean operator ==(const float argumentA, const Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1.0f : 0.0f); }
            inline const Boolean operator ==(const int argument) const { return (this -> value ? 1 : 0) == argument; } friend inline const Boolean operator ==(const int argumentA, Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator ==(const int argumentA, const Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator ==(const long argument) const { return (this -> value ? 1L : 0L) == argument; } friend inline const Boolean operator ==(const long argumentA, Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1L : 0L); } friend inline const Boolean operator ==(const long argumentA, const Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1L : 0L); }
            inline const Boolean operator ==(const long double argument) const { return (this -> value ? 1.00 : 0.00) == argument; } friend inline const Boolean operator ==(const long double argumentA, Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1.00 : 0.00); } friend inline const Boolean operator ==(const long double argumentA, const Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1.00 : 0.00); }
            inline const Boolean operator ==(const long long argument) const { return (this -> value ? 1LL : 0LL) == argument; } friend inline const Boolean operator ==(const long long argumentA, Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1LL : 0LL); } friend inline const Boolean operator ==(const long long argumentA, const Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1LL : 0LL); }
            inline const Boolean operator ==(const short argument) const { return (this -> value ? 1 : 0) == argument; } friend inline const Boolean operator ==(const short argumentA, Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator ==(const short argumentA, const Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator ==(const signed char argument) const { return (this -> value ? 1 : 0) == argument; } friend inline const Boolean operator ==(const signed char argumentA, Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator ==(const signed char argumentA, const Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator ==(const unsigned char argument) const { return this -> value == argument; } friend inline const Boolean operator ==(const unsigned char argumentA, Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator ==(const unsigned char argumentA, const Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1u : 0u); }
            inline const Boolean operator ==(const unsigned int argument) const { return this -> value == argument; } friend inline const Boolean operator ==(const unsigned int argumentA, Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator ==(const unsigned int argumentA, const Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator ==(const unsigned long argument) const { return (this -> value ? 1uL : 0uL) == argument; } friend inline const Boolean operator ==(const unsigned long argumentA, Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1uL : 0uL); } friend inline const Boolean operator ==(const unsigned long argumentA, const Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1uL : 0uL); }
            inline const Boolean operator ==(const unsigned long long argument) const { return (this -> value ? 1uLL : 0uLL) == argument; } friend inline const Boolean operator ==(const unsigned long long argumentA, Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1uLL : 0uLL); } friend inline const Boolean operator ==(const unsigned long long argumentA, const Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1uLL : 0uLL); }
            inline const Boolean operator ==(const unsigned short argument) const { return this -> value == argument; } friend inline const Boolean operator ==(const unsigned short argumentA, Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator ==(const unsigned short argumentA, const Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator ==(const wchar_t argument) const { return (this -> value ? 1u : 0u) == argument; } friend inline const Boolean operator ==(const wchar_t argumentA, Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator ==(const wchar_t argumentA, const Boolean& argumentB) { return argumentA == (argumentB.valueOf() ? 1u : 0u); }

            inline const Boolean operator ==(Boolean& argument) const { return this -> value == argument.valueOf(); }
            inline const Boolean operator ==(const Boolean& argument) const { return this -> value == argument.valueOf(); }
            inline const Boolean operator ==(Number&); friend inline const Boolean operator ==(Number&, Boolean&); friend inline const Boolean operator ==(Number& argumentA, const Boolean&);
            inline const Boolean operator ==(const Number&); friend inline const Boolean operator ==(const Number& argumentA, Boolean&); friend inline const Boolean operator ==(const Number& argumentA, const Boolean&);
            inline const Boolean operator ==(String&); friend inline const Boolean operator ==(String&, Boolean&); friend inline const Boolean operator ==(String& argumentA, const Boolean&);
            inline const Boolean operator ==(const String&); friend inline const Boolean operator ==(const String&, Boolean&); friend inline const Boolean operator ==(const String& argumentA, const Boolean&);

            // [!=]
            inline const Boolean operator !=(const char argument) const { return (this -> value ? 1 : 0) != argument; } friend inline const Boolean operator !=(const char argumentA, Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator !=(const char argumentA, const Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator !=(const char16_t argument) const { return (this -> value ? 1u : 0u) != argument; } friend inline const Boolean operator !=(const char16_t argumentA, Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator !=(const char16_t argumentA, const Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1u : 0u); }
            inline const Boolean operator !=(const char32_t argument) const { return (this -> value ? 1u : 0u) != argument; } friend inline const Boolean operator !=(const char32_t argumentA, Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator !=(const char32_t argumentA, const Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1u : 0u); }
            inline const Boolean operator !=(const double argument) const { return (this -> value ? 1.0 : 0.0) != argument; } friend inline const Boolean operator !=(const double argumentA, Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1.0 : 0.0); } friend inline const Boolean operator !=(const double argumentA, const Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1.0 : 0.0); }
            inline const Boolean operator !=(const float argument) const { return (this -> value ? 1.0f : 0.0f) != argument; } friend inline const Boolean operator !=(const float argumentA, Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1.0f : 0.0f); } friend inline const Boolean operator !=(const float argumentA, const Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1.0f : 0.0f); }
            inline const Boolean operator !=(const int argument) const { return (this -> value ? 1 : 0) != argument; } friend inline const Boolean operator !=(const int argumentA, Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator !=(const int argumentA, const Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator !=(const long argument) const { return (this -> value ? 1L : 0L) != argument; } friend inline const Boolean operator !=(const long argumentA, Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1L : 0L); } friend inline const Boolean operator !=(const long argumentA, const Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1L : 0L); }
            inline const Boolean operator !=(const long double argument) const { return (this -> value ? 1.00 : 0.00) != argument; } friend inline const Boolean operator !=(const long double argumentA, Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1.00 : 0.00); } friend inline const Boolean operator !=(const long double argumentA, const Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1.00 : 0.00); }
            inline const Boolean operator !=(const long long argument) const { return (this -> value ? 1LL : 0LL) != argument; } friend inline const Boolean operator !=(const long long argumentA, Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1LL : 0LL); } friend inline const Boolean operator !=(const long long argumentA, const Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1LL : 0LL); }
            inline const Boolean operator !=(const short argument) const { return (this -> value ? 1 : 0) != argument; } friend inline const Boolean operator !=(const short argumentA, Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator !=(const short argumentA, const Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator !=(const signed char argument) const { return (this -> value ? 1 : 0) != argument; } friend inline const Boolean operator !=(const signed char argumentA, Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator !=(const signed char argumentA, const Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator !=(const unsigned char argument) const { return this -> value != argument; } friend inline const Boolean operator !=(const unsigned char argumentA, Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator !=(const unsigned char argumentA, const Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1u : 0u); }
            inline const Boolean operator !=(const unsigned int argument) const { return this -> value != argument; } friend inline const Boolean operator !=(const unsigned int argumentA, Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator !=(const unsigned int argumentA, const Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator !=(const unsigned long argument) const { return (this -> value ? 1uL : 0uL) != argument; } friend inline const Boolean operator !=(const unsigned long argumentA, Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1uL : 0uL); } friend inline const Boolean operator !=(const unsigned long argumentA, const Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1uL : 0uL); }
            inline const Boolean operator !=(const unsigned long long argument) const { return (this -> value ? 1uLL : 0uLL) != argument; } friend inline const Boolean operator !=(const unsigned long long argumentA, Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1uLL : 0uLL); } friend inline const Boolean operator !=(const unsigned long long argumentA, const Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1uLL : 0uLL); }
            inline const Boolean operator !=(const unsigned short argument) const { return this -> value != argument; } friend inline const Boolean operator !=(const unsigned short argumentA, Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1 : 0); } friend inline const Boolean operator !=(const unsigned short argumentA, const Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1 : 0); }
            inline const Boolean operator !=(const wchar_t argument) const { return (this -> value ? 1u : 0u) != argument; } friend inline const Boolean operator !=(const wchar_t argumentA, Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1u : 0u); } friend inline const Boolean operator !=(const wchar_t argumentA, const Boolean& argumentB) { return argumentA != (argumentB.valueOf() ? 1u : 0u); }

            inline const Boolean operator !=(Boolean& argument) const { return this -> value != argument.valueOf(); }
            inline const Boolean operator !=(const Boolean& argument) const { return this -> value != argument.valueOf(); }
            inline const Boolean operator !=(Number&); friend inline const Boolean operator !=(Number&, Boolean&); friend inline const Boolean operator !=(Number& argumentA, const Boolean&);
            inline const Boolean operator !=(const Number&); friend inline const Boolean operator !=(const Number& argumentA, Boolean&); friend inline const Boolean operator !=(const Number& argumentA, const Boolean&);
            inline const Boolean operator !=(String&); friend inline const Boolean operator !=(String&, Boolean&); friend inline const Boolean operator !=(String& argumentA, const Boolean&);
            inline const Boolean operator !=(const String&); friend inline const Boolean operator !=(const String&, Boolean&); friend inline const Boolean operator !=(const String& argumentA, const Boolean&);

            // [+=]
            inline const Boolean& operator +=(const char argument) { this -> value = ((*this) + argument ? 1u : 0u); return *this; } friend inline const char& operator +=(char& argumentA, Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; } friend inline const char& operator +=(char& argumentA, const Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; }
            inline const Boolean& operator +=(const char16_t argument) { this -> value = ((*this) + argument ? 1u : 0u); return *this; } friend inline const char16_t& operator +=(char16_t& argumentA, Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; } friend inline const char16_t& operator +=(char16_t& argumentA, const Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; }
            inline const Boolean& operator +=(const char32_t argument) { this -> value = ((*this) + argument ? 1u : 0u); return *this; } friend inline const char32_t& operator +=(char32_t& argumentA, Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; } friend inline const char32_t& operator +=(char32_t& argumentA, const Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; }
            inline const Boolean& operator +=(const double argument) { this -> value = ((*this) + argument ? 1u : 0u); return *this; } friend inline const double& operator +=(double& argumentA, Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; } friend inline const double& operator +=(double& argumentA, const Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; }
            inline const Boolean& operator +=(const float argument) { this -> value = ((*this) + argument ? 1u : 0u); return *this; } friend inline const float& operator +=(float& argumentA, Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; } friend inline const float& operator +=(float& argumentA, const Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; }
            inline const Boolean& operator +=(const int argument) { this -> value = ((*this) + argument ? 1u : 0u); return *this; } friend inline const int& operator +=(int& argumentA, Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; } friend inline const int& operator +=(int& argumentA, const Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; }
            inline const Boolean& operator +=(const long argument) { this -> value = ((*this) + argument ? 1u : 0u); return *this; } friend inline const long& operator +=(long& argumentA, Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; } friend inline const long& operator +=(long& argumentA, const Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; }
            inline const Boolean& operator +=(const long double argument) { this -> value = ((*this) + argument ? 1u : 0u); return *this; } friend inline const long double& operator +=(long double& argumentA, Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; } friend inline const long double& operator +=(long double& argumentA, const Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; }
            inline const Boolean& operator +=(const long long argument) { this -> value = ((*this) + argument ? 1u : 0u); return *this; } friend inline const long long& operator +=(long long& argumentA, Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; } friend inline const long long& operator +=(long long& argumentA, const Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; }
            inline const Boolean& operator +=(const short argument) { this -> value = ((*this) + argument ? 1u : 0u); return *this; } friend inline const short& operator +=(short& argumentA, Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; } friend inline const short& operator +=(short& argumentA, const Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; }
            inline const Boolean& operator +=(const signed char argument) { this -> value = ((*this) + argument ? 1u : 0u); return *this; } friend inline const signed char& operator +=(signed char& argumentA, Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; } friend inline const signed char& operator +=(signed char& argumentA, const Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; }
            inline const Boolean& operator +=(const unsigned char argument) { this -> value = ((*this) + argument ? 1u : 0u); return *this; } friend inline const unsigned char& operator +=(unsigned char& argumentA, Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; } friend inline const unsigned char& operator +=(unsigned char& argumentA, const Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; }
            inline const Boolean& operator +=(const unsigned int argument) { this -> value = ((*this) + argument ? 1u : 0u); return *this; } friend inline const unsigned int& operator +=(unsigned int& argumentA, Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; } friend inline const unsigned int& operator +=(unsigned int& argumentA, const Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; }
            inline const Boolean& operator +=(const unsigned long argument) { this -> value = ((*this) + argument ? 1u : 0u); return *this; } friend inline const unsigned long& operator +=(unsigned long& argumentA, Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; } friend inline const unsigned long& operator +=(unsigned long& argumentA, const Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; }
            inline const Boolean& operator +=(const unsigned long long argument) { this -> value = ((*this) + argument ? 1u : 0u); return *this; } friend inline const unsigned long long& operator +=(unsigned long long& argumentA, Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; } friend inline const unsigned long long& operator +=(unsigned long long& argumentA, const Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; }
            inline const Boolean& operator +=(const unsigned short argument) { this -> value = ((*this) + argument ? 1u : 0u); return *this; } friend inline const unsigned short& operator +=(unsigned short& argumentA, Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; } friend inline const unsigned short& operator +=(unsigned short& argumentA, const Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; }
            inline const Boolean& operator +=(const wchar_t argument) { this -> value = ((*this) + argument ? 1u : 0u); return *this; } friend inline const wchar_t& operator +=(wchar_t& argumentA, Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; } friend inline const wchar_t& operator +=(wchar_t& argumentA, const Boolean& argumentB) { argumentA = argumentA + argumentB; return argumentA; }

            inline const Boolean& operator +=(Boolean& argument) { this -> value = (this -> value + argument ? 1u : 0u); return *this; }
            inline const Boolean& operator +=(const Boolean& argument) { this -> value = (this -> value + argument ? 1u : 0u); return *this; }
            inline const Boolean& operator +=(Number&); friend inline const Number& operator +=(Number&, Boolean&); friend inline const Number& operator +=(Number& argumentA, const Boolean&);
            inline const Boolean& operator +=(const Number&); friend inline const Number& operator +=(const Number& argumentA, Boolean&); friend inline const Number& operator +=(const Number& argumentA, const Boolean&);
            inline const Boolean& operator +=(String&); friend inline const String& operator +=(String&, Boolean&); friend inline const String& operator +=(String& argumentA, const Boolean&);
            inline const Boolean& operator +=(const String&); friend inline const String& operator +=(const String&, Boolean&); friend inline const String& operator +=(const String& argumentA, const Boolean&);

            // [-=]
            inline const Boolean& operator -=(const char argument) { this -> value = ((*this) - argument ? 1u : 0u); return *this; } friend inline const char& operator -=(char& argumentA, Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; } friend inline const char& operator -=(char& argumentA, const Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; }
            inline const Boolean& operator -=(const char16_t argument) { this -> value = ((*this) - argument ? 1u : 0u); return *this; } friend inline const char16_t& operator -=(char16_t& argumentA, Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; } friend inline const char16_t& operator -=(char16_t& argumentA, const Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; }
            inline const Boolean& operator -=(const char32_t argument) { this -> value = ((*this) - argument ? 1u : 0u); return *this; } friend inline const char32_t& operator -=(char32_t& argumentA, Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; } friend inline const char32_t& operator -=(char32_t& argumentA, const Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; }
            inline const Boolean& operator -=(const double argument) { this -> value = ((*this) - argument ? 1u : 0u); return *this; } friend inline const double& operator -=(double& argumentA, Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; } friend inline const double& operator -=(double& argumentA, const Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; }
            inline const Boolean& operator -=(const float argument) { this -> value = ((*this) - argument ? 1u : 0u); return *this; } friend inline const float& operator -=(float& argumentA, Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; } friend inline const float& operator -=(float& argumentA, const Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; }
            inline const Boolean& operator -=(const int argument) { this -> value = ((*this) - argument ? 1u : 0u); return *this; } friend inline const int& operator -=(int& argumentA, Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; } friend inline const int& operator -=(int& argumentA, const Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; }
            inline const Boolean& operator -=(const long argument) { this -> value = ((*this) - argument ? 1u : 0u); return *this; } friend inline const long& operator -=(long& argumentA, Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; } friend inline const long& operator -=(long& argumentA, const Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; }
            inline const Boolean& operator -=(const long double argument) { this -> value = ((*this) - argument ? 1u : 0u); return *this; } friend inline const long double& operator -=(long double& argumentA, Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; } friend inline const long double& operator -=(long double& argumentA, const Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; }
            inline const Boolean& operator -=(const long long argument) { this -> value = ((*this) - argument ? 1u : 0u); return *this; } friend inline const long long& operator -=(long long& argumentA, Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; } friend inline const long long& operator -=(long long& argumentA, const Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; }
            inline const Boolean& operator -=(const short argument) { this -> value = ((*this) - argument ? 1u : 0u); return *this; } friend inline const short& operator -=(short& argumentA, Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; } friend inline const short& operator -=(short& argumentA, const Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; }
            inline const Boolean& operator -=(const signed char argument) { this -> value = ((*this) - argument ? 1u : 0u); return *this; } friend inline const signed char& operator -=(signed char& argumentA, Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; } friend inline const signed char& operator -=(signed char& argumentA, const Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; }
            inline const Boolean& operator -=(const unsigned char argument) { this -> value = ((*this) - argument ? 1u : 0u); return *this; } friend inline const unsigned char& operator -=(unsigned char& argumentA, Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; } friend inline const unsigned char& operator -=(unsigned char& argumentA, const Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; }
            inline const Boolean& operator -=(const unsigned int argument) { this -> value = ((*this) - argument ? 1u : 0u); return *this; } friend inline const unsigned int& operator -=(unsigned int& argumentA, Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; } friend inline const unsigned int& operator -=(unsigned int& argumentA, const Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; }
            inline const Boolean& operator -=(const unsigned long argument) { this -> value = ((*this) - argument ? 1u : 0u); return *this; } friend inline const unsigned long& operator -=(unsigned long& argumentA, Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; } friend inline const unsigned long& operator -=(unsigned long& argumentA, const Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; }
            inline const Boolean& operator -=(const unsigned long long argument) { this -> value = ((*this) - argument ? 1u : 0u); return *this; } friend inline const unsigned long long& operator -=(unsigned long long& argumentA, Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; } friend inline const unsigned long long& operator -=(unsigned long long& argumentA, const Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; }
            inline const Boolean& operator -=(const unsigned short argument) { this -> value = ((*this) - argument ? 1u : 0u); return *this; } friend inline const unsigned short& operator -=(unsigned short& argumentA, Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; } friend inline const unsigned short& operator -=(unsigned short& argumentA, const Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; }
            inline const Boolean& operator -=(const wchar_t argument) { this -> value = ((*this) - argument ? 1u : 0u); return *this; } friend inline const wchar_t& operator -=(wchar_t& argumentA, Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; } friend inline const wchar_t& operator -=(wchar_t& argumentA, const Boolean& argumentB) { argumentA = argumentA - argumentB; return argumentA; }

            inline const Boolean& operator -=(Boolean& argument) { this -> value = (this -> value - argument ? 1u : 0u); return *this; }
            inline const Boolean& operator -=(const Boolean& argument) { this -> value = (this -> value - argument ? 1u : 0u); return *this; }
            inline const Boolean& operator -=(Number&); friend inline const Number& operator -=(Number&, Boolean&); friend inline const Number& operator -=(Number& argumentA, const Boolean&);
            inline const Boolean& operator -=(const Number&); friend inline const Number& operator -=(const Number& argumentA, Boolean&); friend inline const Number& operator -=(const Number& argumentA, const Boolean&);

            // [/=]
            inline const Boolean& operator /=(const char argument) { this -> value = ((*this) / argument ? 1u : 0u); return *this; } friend inline const char& operator /=(char& argumentA, Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; } friend inline const char& operator /=(char& argumentA, const Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; }
            inline const Boolean& operator /=(const char16_t argument) { this -> value = ((*this) / argument ? 1u : 0u); return *this; } friend inline const char16_t& operator /=(char16_t& argumentA, Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; } friend inline const char16_t& operator /=(char16_t& argumentA, const Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; }
            inline const Boolean& operator /=(const char32_t argument) { this -> value = ((*this) / argument ? 1u : 0u); return *this; } friend inline const char32_t& operator /=(char32_t& argumentA, Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; } friend inline const char32_t& operator /=(char32_t& argumentA, const Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; }
            inline const Boolean& operator /=(const double argument) { this -> value = ((*this) / argument ? 1u : 0u); return *this; } friend inline const double& operator /=(double& argumentA, Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; } friend inline const double& operator /=(double& argumentA, const Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; }
            inline const Boolean& operator /=(const float argument) { this -> value = ((*this) / argument ? 1u : 0u); return *this; } friend inline const float& operator /=(float& argumentA, Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; } friend inline const float& operator /=(float& argumentA, const Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; }
            inline const Boolean& operator /=(const int argument) { this -> value = ((*this) / argument ? 1u : 0u); return *this; } friend inline const int& operator /=(int& argumentA, Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; } friend inline const int& operator /=(int& argumentA, const Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; }
            inline const Boolean& operator /=(const long argument) { this -> value = ((*this) / argument ? 1u : 0u); return *this; } friend inline const long& operator /=(long& argumentA, Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; } friend inline const long& operator /=(long& argumentA, const Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; }
            inline const Boolean& operator /=(const long double argument) { this -> value = ((*this) / argument ? 1u : 0u); return *this; } friend inline const long double& operator /=(long double& argumentA, Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; } friend inline const long double& operator /=(long double& argumentA, const Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; }
            inline const Boolean& operator /=(const long long argument) { this -> value = ((*this) / argument ? 1u : 0u); return *this; } friend inline const long long& operator /=(long long& argumentA, Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; } friend inline const long long& operator /=(long long& argumentA, const Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; }
            inline const Boolean& operator /=(const short argument) { this -> value = ((*this) / argument ? 1u : 0u); return *this; } friend inline const short& operator /=(short& argumentA, Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; } friend inline const short& operator /=(short& argumentA, const Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; }
            inline const Boolean& operator /=(const signed char argument) { this -> value = ((*this) / argument ? 1u : 0u); return *this; } friend inline const signed char& operator /=(signed char& argumentA, Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; } friend inline const signed char& operator /=(signed char& argumentA, const Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; }
            inline const Boolean& operator /=(const unsigned char argument) { this -> value = ((*this) / argument ? 1u : 0u); return *this; } friend inline const unsigned char& operator /=(unsigned char& argumentA, Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; } friend inline const unsigned char& operator /=(unsigned char& argumentA, const Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; }
            inline const Boolean& operator /=(const unsigned int argument) { this -> value = ((*this) / argument ? 1u : 0u); return *this; } friend inline const unsigned int& operator /=(unsigned int& argumentA, Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; } friend inline const unsigned int& operator /=(unsigned int& argumentA, const Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; }
            inline const Boolean& operator /=(const unsigned long argument) { this -> value = ((*this) / argument ? 1u : 0u); return *this; } friend inline const unsigned long& operator /=(unsigned long& argumentA, Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; } friend inline const unsigned long& operator /=(unsigned long& argumentA, const Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; }
            inline const Boolean& operator /=(const unsigned long long argument) { this -> value = ((*this) / argument ? 1u : 0u); return *this; } friend inline const unsigned long long& operator /=(unsigned long long& argumentA, Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; } friend inline const unsigned long long& operator /=(unsigned long long& argumentA, const Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; }
            inline const Boolean& operator /=(const unsigned short argument) { this -> value = ((*this) / argument ? 1u : 0u); return *this; } friend inline const unsigned short& operator /=(unsigned short& argumentA, Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; } friend inline const unsigned short& operator /=(unsigned short& argumentA, const Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; }
            inline const Boolean& operator /=(const wchar_t argument) { this -> value = ((*this) / argument ? 1u : 0u); return *this; } friend inline const wchar_t& operator /=(wchar_t& argumentA, Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; } friend inline const wchar_t& operator /=(wchar_t& argumentA, const Boolean& argumentB) { argumentA = argumentA / argumentB; return argumentA; }

            inline const Boolean& operator /=(Boolean& argument) { this -> value = (this -> value / argument ? 1u : 0u); return *this; }
            inline const Boolean& operator /=(const Boolean& argument) { this -> value = (this -> value / argument ? 1u : 0u); return *this; }
            inline const Boolean& operator /=(Number&); friend inline const Number& operator /=(Number&, Boolean&); friend inline const Number& operator /=(Number& argumentA, const Boolean&);
            inline const Boolean& operator /=(const Number&); friend inline const Number& operator /=(const Number& argumentA, Boolean&); friend inline const Number& operator /=(const Number& argumentA, const Boolean&);

            // [%=]
            inline const Boolean& operator %=(const char argument) { this -> value = ((*this) % argument ? 1u : 0u); return *this; } friend inline const char& operator %=(char& argumentA, Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; } friend inline const char& operator %=(char& argumentA, const Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; }
            inline const Boolean& operator %=(const char16_t argument) { this -> value = ((*this) % argument ? 1u : 0u); return *this; } friend inline const char16_t& operator %=(char16_t& argumentA, Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; } friend inline const char16_t& operator %=(char16_t& argumentA, const Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; }
            inline const Boolean& operator %=(const char32_t argument) { this -> value = ((*this) % argument ? 1u : 0u); return *this; } friend inline const char32_t& operator %=(char32_t& argumentA, Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; } friend inline const char32_t& operator %=(char32_t& argumentA, const Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; }
            inline const Boolean& operator %=(const double argument) { this -> value = ((*this) % argument ? 1u : 0u); return *this; } friend inline const double& operator %=(double& argumentA, Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; } friend inline const double& operator %=(double& argumentA, const Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; }
            inline const Boolean& operator %=(const float argument) { this -> value = ((*this) % argument ? 1u : 0u); return *this; } friend inline const float& operator %=(float& argumentA, Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; } friend inline const float& operator %=(float& argumentA, const Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; }
            inline const Boolean& operator %=(const int argument) { this -> value = ((*this) % argument ? 1u : 0u); return *this; } friend inline const int& operator %=(int& argumentA, Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; } friend inline const int& operator %=(int& argumentA, const Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; }
            inline const Boolean& operator %=(const long argument) { this -> value = ((*this) % argument ? 1u : 0u); return *this; } friend inline const long& operator %=(long& argumentA, Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; } friend inline const long& operator %=(long& argumentA, const Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; }
            inline const Boolean& operator %=(const long double argument) { this -> value = ((*this) % argument ? 1u : 0u); return *this; } friend inline const long double& operator %=(long double& argumentA, Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; } friend inline const long double& operator %=(long double& argumentA, const Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; }
            inline const Boolean& operator %=(const long long argument) { this -> value = ((*this) % argument ? 1u : 0u); return *this; } friend inline const long long& operator %=(long long& argumentA, Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; } friend inline const long long& operator %=(long long& argumentA, const Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; }
            inline const Boolean& operator %=(const short argument) { this -> value = ((*this) % argument ? 1u : 0u); return *this; } friend inline const short& operator %=(short& argumentA, Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; } friend inline const short& operator %=(short& argumentA, const Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; }
            inline const Boolean& operator %=(const signed char argument) { this -> value = ((*this) % argument ? 1u : 0u); return *this; } friend inline const signed char& operator %=(signed char& argumentA, Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; } friend inline const signed char& operator %=(signed char& argumentA, const Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; }
            inline const Boolean& operator %=(const unsigned char argument) { this -> value = ((*this) % argument ? 1u : 0u); return *this; } friend inline const unsigned char& operator %=(unsigned char& argumentA, Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; } friend inline const unsigned char& operator %=(unsigned char& argumentA, const Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; }
            inline const Boolean& operator %=(const unsigned int argument) { this -> value = ((*this) % argument ? 1u : 0u); return *this; } friend inline const unsigned int& operator %=(unsigned int& argumentA, Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; } friend inline const unsigned int& operator %=(unsigned int& argumentA, const Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; }
            inline const Boolean& operator %=(const unsigned long argument) { this -> value = ((*this) % argument ? 1u : 0u); return *this; } friend inline const unsigned long& operator %=(unsigned long& argumentA, Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; } friend inline const unsigned long& operator %=(unsigned long& argumentA, const Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; }
            inline const Boolean& operator %=(const unsigned long long argument) { this -> value = ((*this) % argument ? 1u : 0u); return *this; } friend inline const unsigned long long& operator %=(unsigned long long& argumentA, Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; } friend inline const unsigned long long& operator %=(unsigned long long& argumentA, const Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; }
            inline const Boolean& operator %=(const unsigned short argument) { this -> value = ((*this) % argument ? 1u : 0u); return *this; } friend inline const unsigned short& operator %=(unsigned short& argumentA, Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; } friend inline const unsigned short& operator %=(unsigned short& argumentA, const Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; }
            inline const Boolean& operator %=(const wchar_t argument) { this -> value = ((*this) % argument ? 1u : 0u); return *this; } friend inline const wchar_t& operator %=(wchar_t& argumentA, Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; } friend inline const wchar_t& operator %=(wchar_t& argumentA, const Boolean& argumentB) { argumentA = argumentA % argumentB; return argumentA; }

            inline const Boolean& operator %=(Boolean& argument) { this -> value = (this -> value % argument ? 1u : 0u); return *this; }
            inline const Boolean& operator %=(const Boolean& argument) { this -> value = (this -> value % argument ? 1u : 0u); return *this; }
            inline const Boolean& operator %=(Number&); friend inline const Number& operator %=(Number&, Boolean&); friend inline const Number& operator %=(Number& argumentA, const Boolean&);
            inline const Boolean& operator %=(const Number&); friend inline const Number& operator %=(const Number& argumentA, Boolean&); friend inline const Number& operator %=(const Number& argumentA, const Boolean&);

            // [^=]
            inline const Boolean& operator ^=(const char argument) { this -> value = ((*this) ^ argument ? 1u : 0u); return *this; } friend inline const char& operator ^=(char& argumentA, Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; } friend inline const char& operator ^=(char& argumentA, const Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; }
            inline const Boolean& operator ^=(const char16_t argument) { this -> value = ((*this) ^ argument ? 1u : 0u); return *this; } friend inline const char16_t& operator ^=(char16_t& argumentA, Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; } friend inline const char16_t& operator ^=(char16_t& argumentA, const Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; }
            inline const Boolean& operator ^=(const char32_t argument) { this -> value = ((*this) ^ argument ? 1u : 0u); return *this; } friend inline const char32_t& operator ^=(char32_t& argumentA, Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; } friend inline const char32_t& operator ^=(char32_t& argumentA, const Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; }
            inline const Boolean& operator ^=(const double argument) { this -> value = ((*this) ^ argument ? 1u : 0u); return *this; } friend inline const double& operator ^=(double& argumentA, Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; } friend inline const double& operator ^=(double& argumentA, const Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; }
            inline const Boolean& operator ^=(const float argument) { this -> value = ((*this) ^ argument ? 1u : 0u); return *this; } friend inline const float& operator ^=(float& argumentA, Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; } friend inline const float& operator ^=(float& argumentA, const Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; }
            inline const Boolean& operator ^=(const int argument) { this -> value = ((*this) ^ argument ? 1u : 0u); return *this; } friend inline const int& operator ^=(int& argumentA, Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; } friend inline const int& operator ^=(int& argumentA, const Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; }
            inline const Boolean& operator ^=(const long argument) { this -> value = ((*this) ^ argument ? 1u : 0u); return *this; } friend inline const long& operator ^=(long& argumentA, Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; } friend inline const long& operator ^=(long& argumentA, const Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; }
            inline const Boolean& operator ^=(const long double argument) { this -> value = ((*this) ^ argument ? 1u : 0u); return *this; } friend inline const long double& operator ^=(long double& argumentA, Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; } friend inline const long double& operator ^=(long double& argumentA, const Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; }
            inline const Boolean& operator ^=(const long long argument) { this -> value = ((*this) ^ argument ? 1u : 0u); return *this; } friend inline const long long& operator ^=(long long& argumentA, Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; } friend inline const long long& operator ^=(long long& argumentA, const Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; }
            inline const Boolean& operator ^=(const short argument) { this -> value = ((*this) ^ argument ? 1u : 0u); return *this; } friend inline const short& operator ^=(short& argumentA, Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; } friend inline const short& operator ^=(short& argumentA, const Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; }
            inline const Boolean& operator ^=(const signed char argument) { this -> value = ((*this) ^ argument ? 1u : 0u); return *this; } friend inline const signed char& operator ^=(signed char& argumentA, Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; } friend inline const signed char& operator ^=(signed char& argumentA, const Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; }
            inline const Boolean& operator ^=(const unsigned char argument) { this -> value = ((*this) ^ argument ? 1u : 0u); return *this; } friend inline const unsigned char& operator ^=(unsigned char& argumentA, Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; } friend inline const unsigned char& operator ^=(unsigned char& argumentA, const Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; }
            inline const Boolean& operator ^=(const unsigned int argument) { this -> value = ((*this) ^ argument ? 1u : 0u); return *this; } friend inline const unsigned int& operator ^=(unsigned int& argumentA, Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; } friend inline const unsigned int& operator ^=(unsigned int& argumentA, const Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; }
            inline const Boolean& operator ^=(const unsigned long argument) { this -> value = ((*this) ^ argument ? 1u : 0u); return *this; } friend inline const unsigned long& operator ^=(unsigned long& argumentA, Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; } friend inline const unsigned long& operator ^=(unsigned long& argumentA, const Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; }
            inline const Boolean& operator ^=(const unsigned long long argument) { this -> value = ((*this) ^ argument ? 1u : 0u); return *this; } friend inline const unsigned long long& operator ^=(unsigned long long& argumentA, Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; } friend inline const unsigned long long& operator ^=(unsigned long long& argumentA, const Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; }
            inline const Boolean& operator ^=(const unsigned short argument) { this -> value = ((*this) ^ argument ? 1u : 0u); return *this; } friend inline const unsigned short& operator ^=(unsigned short& argumentA, Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; } friend inline const unsigned short& operator ^=(unsigned short& argumentA, const Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; }
            inline const Boolean& operator ^=(const wchar_t argument) { this -> value = ((*this) ^ argument ? 1u : 0u); return *this; } friend inline const wchar_t& operator ^=(wchar_t& argumentA, Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; } friend inline const wchar_t& operator ^=(wchar_t& argumentA, const Boolean& argumentB) { argumentA = argumentA ^ argumentB; return argumentA; }

            inline const Boolean& operator ^=(Boolean& argument) { this -> value = (this -> value ^ argument ? 1u : 0u); return *this; }
            inline const Boolean& operator ^=(const Boolean& argument) { this -> value = (this -> value ^ argument ? 1u : 0u); return *this; }
            inline const Boolean& operator ^=(Number&); friend inline const Number& operator ^=(Number&, Boolean&); friend inline const Number& operator ^=(Number& argumentA, const Boolean&);
            inline const Boolean& operator ^=(const Number&); friend inline const Number& operator ^=(const Number& argumentA, Boolean&); friend inline const Number& operator ^=(const Number& argumentA, const Boolean&);

            // [&=]
            inline const Boolean& operator &=(const char argument) { this -> value = ((*this) & argument ? 1u : 0u); return *this; } friend inline const char& operator &=(char& argumentA, Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; } friend inline const char& operator &=(char& argumentA, const Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; }
            inline const Boolean& operator &=(const char16_t argument) { this -> value = ((*this) & argument ? 1u : 0u); return *this; } friend inline const char16_t& operator &=(char16_t& argumentA, Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; } friend inline const char16_t& operator &=(char16_t& argumentA, const Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; }
            inline const Boolean& operator &=(const char32_t argument) { this -> value = ((*this) & argument ? 1u : 0u); return *this; } friend inline const char32_t& operator &=(char32_t& argumentA, Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; } friend inline const char32_t& operator &=(char32_t& argumentA, const Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; }
            inline const Boolean& operator &=(const double argument) { this -> value = ((*this) & argument ? 1u : 0u); return *this; } friend inline const double& operator &=(double& argumentA, Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; } friend inline const double& operator &=(double& argumentA, const Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; }
            inline const Boolean& operator &=(const float argument) { this -> value = ((*this) & argument ? 1u : 0u); return *this; } friend inline const float& operator &=(float& argumentA, Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; } friend inline const float& operator &=(float& argumentA, const Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; }
            inline const Boolean& operator &=(const int argument) { this -> value = ((*this) & argument ? 1u : 0u); return *this; } friend inline const int& operator &=(int& argumentA, Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; } friend inline const int& operator &=(int& argumentA, const Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; }
            inline const Boolean& operator &=(const long argument) { this -> value = ((*this) & argument ? 1u : 0u); return *this; } friend inline const long& operator &=(long& argumentA, Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; } friend inline const long& operator &=(long& argumentA, const Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; }
            inline const Boolean& operator &=(const long double argument) { this -> value = ((*this) & argument ? 1u : 0u); return *this; } friend inline const long double& operator &=(long double& argumentA, Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; } friend inline const long double& operator &=(long double& argumentA, const Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; }
            inline const Boolean& operator &=(const long long argument) { this -> value = ((*this) & argument ? 1u : 0u); return *this; } friend inline const long long& operator &=(long long& argumentA, Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; } friend inline const long long& operator &=(long long& argumentA, const Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; }
            inline const Boolean& operator &=(const short argument) { this -> value = ((*this) & argument ? 1u : 0u); return *this; } friend inline const short& operator &=(short& argumentA, Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; } friend inline const short& operator &=(short& argumentA, const Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; }
            inline const Boolean& operator &=(const signed char argument) { this -> value = ((*this) & argument ? 1u : 0u); return *this; } friend inline const signed char& operator &=(signed char& argumentA, Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; } friend inline const signed char& operator &=(signed char& argumentA, const Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; }
            inline const Boolean& operator &=(const unsigned char argument) { this -> value = ((*this) & argument ? 1u : 0u); return *this; } friend inline const unsigned char& operator &=(unsigned char& argumentA, Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; } friend inline const unsigned char& operator &=(unsigned char& argumentA, const Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; }
            inline const Boolean& operator &=(const unsigned int argument) { this -> value = ((*this) & argument ? 1u : 0u); return *this; } friend inline const unsigned int& operator &=(unsigned int& argumentA, Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; } friend inline const unsigned int& operator &=(unsigned int& argumentA, const Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; }
            inline const Boolean& operator &=(const unsigned long argument) { this -> value = ((*this) & argument ? 1u : 0u); return *this; } friend inline const unsigned long& operator &=(unsigned long& argumentA, Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; } friend inline const unsigned long& operator &=(unsigned long& argumentA, const Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; }
            inline const Boolean& operator &=(const unsigned long long argument) { this -> value = ((*this) & argument ? 1u : 0u); return *this; } friend inline const unsigned long long& operator &=(unsigned long long& argumentA, Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; } friend inline const unsigned long long& operator &=(unsigned long long& argumentA, const Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; }
            inline const Boolean& operator &=(const unsigned short argument) { this -> value = ((*this) & argument ? 1u : 0u); return *this; } friend inline const unsigned short& operator &=(unsigned short& argumentA, Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; } friend inline const unsigned short& operator &=(unsigned short& argumentA, const Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; }
            inline const Boolean& operator &=(const wchar_t argument) { this -> value = ((*this) & argument ? 1u : 0u); return *this; } friend inline const wchar_t& operator &=(wchar_t& argumentA, Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; } friend inline const wchar_t& operator &=(wchar_t& argumentA, const Boolean& argumentB) { argumentA = argumentA & argumentB; return argumentA; }

            inline const Boolean& operator &=(Boolean& argument) { this -> value = (this -> value & argument ? 1u : 0u); return *this; }
            inline const Boolean& operator &=(const Boolean& argument) { this -> value = (this -> value & argument ? 1u : 0u); return *this; }
            inline const Boolean& operator &=(Number&); friend inline const Number& operator &=(Number&, Boolean&); friend inline const Number& operator &=(Number& argumentA, const Boolean&);
            inline const Boolean& operator &=(const Number&); friend inline const Number& operator &=(const Number& argumentA, Boolean&); friend inline const Number& operator &=(const Number& argumentA, const Boolean&);

            // [|=]
            inline const Boolean& operator |=(const char argument) { this -> value = ((*this) | argument ? 1u : 0u); return *this; } friend inline const char& operator |=(char& argumentA, Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; } friend inline const char& operator |=(char& argumentA, const Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; }
            inline const Boolean& operator |=(const char16_t argument) { this -> value = ((*this) | argument ? 1u : 0u); return *this; } friend inline const char16_t& operator |=(char16_t& argumentA, Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; } friend inline const char16_t& operator |=(char16_t& argumentA, const Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; }
            inline const Boolean& operator |=(const char32_t argument) { this -> value = ((*this) | argument ? 1u : 0u); return *this; } friend inline const char32_t& operator |=(char32_t& argumentA, Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; } friend inline const char32_t& operator |=(char32_t& argumentA, const Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; }
            inline const Boolean& operator |=(const double argument) { this -> value = ((*this) | argument ? 1u : 0u); return *this; } friend inline const double& operator |=(double& argumentA, Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; } friend inline const double& operator |=(double& argumentA, const Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; }
            inline const Boolean& operator |=(const float argument) { this -> value = ((*this) | argument ? 1u : 0u); return *this; } friend inline const float& operator |=(float& argumentA, Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; } friend inline const float& operator |=(float& argumentA, const Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; }
            inline const Boolean& operator |=(const int argument) { this -> value = ((*this) | argument ? 1u : 0u); return *this; } friend inline const int& operator |=(int& argumentA, Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; } friend inline const int& operator |=(int& argumentA, const Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; }
            inline const Boolean& operator |=(const long argument) { this -> value = ((*this) | argument ? 1u : 0u); return *this; } friend inline const long& operator |=(long& argumentA, Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; } friend inline const long& operator |=(long& argumentA, const Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; }
            inline const Boolean& operator |=(const long double argument) { this -> value = ((*this) | argument ? 1u : 0u); return *this; } friend inline const long double& operator |=(long double& argumentA, Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; } friend inline const long double& operator |=(long double& argumentA, const Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; }
            inline const Boolean& operator |=(const long long argument) { this -> value = ((*this) | argument ? 1u : 0u); return *this; } friend inline const long long& operator |=(long long& argumentA, Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; } friend inline const long long& operator |=(long long& argumentA, const Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; }
            inline const Boolean& operator |=(const short argument) { this -> value = ((*this) | argument ? 1u : 0u); return *this; } friend inline const short& operator |=(short& argumentA, Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; } friend inline const short& operator |=(short& argumentA, const Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; }
            inline const Boolean& operator |=(const signed char argument) { this -> value = ((*this) | argument ? 1u : 0u); return *this; } friend inline const signed char& operator |=(signed char& argumentA, Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; } friend inline const signed char& operator |=(signed char& argumentA, const Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; }
            inline const Boolean& operator |=(const unsigned char argument) { this -> value = ((*this) | argument ? 1u : 0u); return *this; } friend inline const unsigned char& operator |=(unsigned char& argumentA, Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; } friend inline const unsigned char& operator |=(unsigned char& argumentA, const Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; }
            inline const Boolean& operator |=(const unsigned int argument) { this -> value = ((*this) | argument ? 1u : 0u); return *this; } friend inline const unsigned int& operator |=(unsigned int& argumentA, Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; } friend inline const unsigned int& operator |=(unsigned int& argumentA, const Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; }
            inline const Boolean& operator |=(const unsigned long argument) { this -> value = ((*this) | argument ? 1u : 0u); return *this; } friend inline const unsigned long& operator |=(unsigned long& argumentA, Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; } friend inline const unsigned long& operator |=(unsigned long& argumentA, const Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; }
            inline const Boolean& operator |=(const unsigned long long argument) { this -> value = ((*this) | argument ? 1u : 0u); return *this; } friend inline const unsigned long long& operator |=(unsigned long long& argumentA, Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; } friend inline const unsigned long long& operator |=(unsigned long long& argumentA, const Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; }
            inline const Boolean& operator |=(const unsigned short argument) { this -> value = ((*this) | argument ? 1u : 0u); return *this; } friend inline const unsigned short& operator |=(unsigned short& argumentA, Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; } friend inline const unsigned short& operator |=(unsigned short& argumentA, const Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; }
            inline const Boolean& operator |=(const wchar_t argument) { this -> value = ((*this) | argument ? 1u : 0u); return *this; } friend inline const wchar_t& operator |=(wchar_t& argumentA, Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; } friend inline const wchar_t& operator |=(wchar_t& argumentA, const Boolean& argumentB) { argumentA = argumentA | argumentB; return argumentA; }

            inline const Boolean& operator |=(Boolean& argument) { this -> value = (this -> value | argument ? 1u : 0u); return *this; }
            inline const Boolean& operator |=(const Boolean& argument) { this -> value = (this -> value | argument ? 1u : 0u); return *this; }
            inline const Boolean& operator |=(Number&); friend inline const Number& operator |=(Number&, Boolean&); friend inline const Number& operator |=(Number& argumentA, const Boolean&);
            inline const Boolean& operator |=(const Number&); friend inline const Number& operator |=(const Number& argumentA, Boolean&); friend inline const Number& operator |=(const Number& argumentA, const Boolean&);

            // [*=]
            inline const Boolean& operator *=(const char argument) { this -> value = ((*this) * argument ? 1u : 0u); return *this; } friend inline const char& operator *=(char& argumentA, Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; } friend inline const char& operator *=(char& argumentA, const Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; }
            inline const Boolean& operator *=(const char16_t argument) { this -> value = ((*this) * argument ? 1u : 0u); return *this; } friend inline const char16_t& operator *=(char16_t& argumentA, Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; } friend inline const char16_t& operator *=(char16_t& argumentA, const Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; }
            inline const Boolean& operator *=(const char32_t argument) { this -> value = ((*this) * argument ? 1u : 0u); return *this; } friend inline const char32_t& operator *=(char32_t& argumentA, Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; } friend inline const char32_t& operator *=(char32_t& argumentA, const Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; }
            inline const Boolean& operator *=(const double argument) { this -> value = ((*this) * argument ? 1u : 0u); return *this; } friend inline const double& operator *=(double& argumentA, Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; } friend inline const double& operator *=(double& argumentA, const Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; }
            inline const Boolean& operator *=(const float argument) { this -> value = ((*this) * argument ? 1u : 0u); return *this; } friend inline const float& operator *=(float& argumentA, Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; } friend inline const float& operator *=(float& argumentA, const Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; }
            inline const Boolean& operator *=(const int argument) { this -> value = ((*this) * argument ? 1u : 0u); return *this; } friend inline const int& operator *=(int& argumentA, Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; } friend inline const int& operator *=(int& argumentA, const Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; }
            inline const Boolean& operator *=(const long argument) { this -> value = ((*this) * argument ? 1u : 0u); return *this; } friend inline const long& operator *=(long& argumentA, Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; } friend inline const long& operator *=(long& argumentA, const Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; }
            inline const Boolean& operator *=(const long double argument) { this -> value = ((*this) * argument ? 1u : 0u); return *this; } friend inline const long double& operator *=(long double& argumentA, Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; } friend inline const long double& operator *=(long double& argumentA, const Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; }
            inline const Boolean& operator *=(const long long argument) { this -> value = ((*this) * argument ? 1u : 0u); return *this; } friend inline const long long& operator *=(long long& argumentA, Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; } friend inline const long long& operator *=(long long& argumentA, const Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; }
            inline const Boolean& operator *=(const short argument) { this -> value = ((*this) * argument ? 1u : 0u); return *this; } friend inline const short& operator *=(short& argumentA, Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; } friend inline const short& operator *=(short& argumentA, const Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; }
            inline const Boolean& operator *=(const signed char argument) { this -> value = ((*this) * argument ? 1u : 0u); return *this; } friend inline const signed char& operator *=(signed char& argumentA, Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; } friend inline const signed char& operator *=(signed char& argumentA, const Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; }
            inline const Boolean& operator *=(const unsigned char argument) { this -> value = ((*this) * argument ? 1u : 0u); return *this; } friend inline const unsigned char& operator *=(unsigned char& argumentA, Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; } friend inline const unsigned char& operator *=(unsigned char& argumentA, const Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; }
            inline const Boolean& operator *=(const unsigned int argument) { this -> value = ((*this) * argument ? 1u : 0u); return *this; } friend inline const unsigned int& operator *=(unsigned int& argumentA, Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; } friend inline const unsigned int& operator *=(unsigned int& argumentA, const Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; }
            inline const Boolean& operator *=(const unsigned long argument) { this -> value = ((*this) * argument ? 1u : 0u); return *this; } friend inline const unsigned long& operator *=(unsigned long& argumentA, Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; } friend inline const unsigned long& operator *=(unsigned long& argumentA, const Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; }
            inline const Boolean& operator *=(const unsigned long long argument) { this -> value = ((*this) * argument ? 1u : 0u); return *this; } friend inline const unsigned long long& operator *=(unsigned long long& argumentA, Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; } friend inline const unsigned long long& operator *=(unsigned long long& argumentA, const Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; }
            inline const Boolean& operator *=(const unsigned short argument) { this -> value = ((*this) * argument ? 1u : 0u); return *this; } friend inline const unsigned short& operator *=(unsigned short& argumentA, Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; } friend inline const unsigned short& operator *=(unsigned short& argumentA, const Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; }
            inline const Boolean& operator *=(const wchar_t argument) { this -> value = ((*this) * argument ? 1u : 0u); return *this; } friend inline const wchar_t& operator *=(wchar_t& argumentA, Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; } friend inline const wchar_t& operator *=(wchar_t& argumentA, const Boolean& argumentB) { argumentA = argumentA * argumentB; return argumentA; }

            inline const Boolean& operator *=(Boolean& argument) { this -> value = (this -> value * argument ? 1u : 0u); return *this; }
            inline const Boolean& operator *=(const Boolean& argument) { this -> value = (this -> value * argument ? 1u : 0u); return *this; }
            inline const Boolean& operator *=(Number&); friend inline const Number& operator *=(Number&, Boolean&); friend inline const Number& operator *=(Number& argumentA, const Boolean&);
            inline const Boolean& operator *=(const Number&); friend inline const Number& operator *=(const Number& argumentA, Boolean&); friend inline const Number& operator *=(const Number& argumentA, const Boolean&);

            // ...
            inline operator unsigned char() const { return this -> valueOf(); }

            inline operator Boolean() const { return *this; }
            operator Number() const;
            operator String() const;

        // Method > ...
        const Number toNumber() const;
        const String toString() const;

        inline const unsigned char valueOf() const { return this -> value; }
};
